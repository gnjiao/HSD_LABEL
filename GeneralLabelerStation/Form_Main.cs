#define MACHINE_ZDT

using GeneralLabelerStation.Common;
using GeneralLabelerStation.Param;
using GeneralLabelerStation.Statistics;
using GeneralLabelerStation.Tool;
using GeneralLabelerStation.UI;
using GeneralLabelerStation.ViewModle;
using Microsoft.Win32;
using NationalInstruments.Vision;
using NationalInstruments.Vision.Acquisition.Imaqdx;
using NationalInstruments.Vision.Analysis;
using NationalInstruments.Vision.WindowsForms;
using NPOI.HPSF;
using NPOI.HSSF.UserModel;
using NPOI.SS.UserModel;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using WinClass;
using GeneralLabelerStation.Camera;
using GeneralLabelerStation.HalconVision;
using HalconDotNet;
using GeneralLabelerStation.ServiceMonitor;

namespace GeneralLabelerStation
{
    public partial class Form_Main : Form, IDisposable
    {
        //*******************************************[ZDT MES 相关]**************************************************
        #region 2018年7月18日15:28:39 ZDT MES 相关
        public string RUN_BadmarkCode = string.Empty; // Badmark码
        public string RUN_TrayCode = string.Empty; // 治具码

        public void ReadZDTConfig()
        {
            ZDTHelper.Load();
            FeederHelper.Load();
            ZDTHelper.Instance.ReloadClient();
        }

        public enum SIDE
        {
            A = 0,// 正反
            B = 1,
        }

        /// <summary>
        /// 获得Badmark信息
        /// </summary>
        /// <param name="BadMarkNo"></param>
        /// <param name="code"></param>
        /// <param name="side"></param>
        /// <returns></returns>
        public bool GetBadMark(string code, SIDE side, out string info)
        {
            info = string.Empty;
            try
            {
                ZDT.Service1SoapClient client = new GeneralLabelerStation.ZDT.Service1SoapClient();
                info = client.ReturnSPIBarmark(code, side == SIDE.A ? "A" : "B");
                if (info == "NULL")
                    return false;
                return true;
            }
            catch (Exception ex)
            {
            }
            return false;
        }

        public void BadmarkCheck(string info)
        {
            //string temp = "Badmark点位:";
            for (int k = 0; k < JOB.PASTEInfo.Length; ++k)
            {
                for (int i = 0; i < JOB.PASTEInfo[k].iPasteED.Length; ++i)
                {
                    try
                    {
                        int badMarkIndex = int.Parse(RUN_PASTEInfo[k].PastePN[i]);
                        if (info[badMarkIndex - 1] == '0')
                        {
                            JOB.PASTEInfo[k].iPasteED[i] = 1;
                            //temp += $"{k}-{i},";
                        }
                    }
                    catch { }
                }
            }
        }

        public void BadmarkCheck(Dictionary<int, bool> badmarkList)
        {
            for (int k = 0; k < JOB.PASTEInfo.Length; ++k)
            {
                for (int i = 0; i < JOB.PASTEInfo[k].iPasteED.Length; ++i)
                {
                    try
                    {
                        int badMarkIndex = int.Parse(RUN_PASTEInfo[k].PastePN[i]);
                        if (badmarkList.ContainsKey(badMarkIndex) && !badmarkList[badMarkIndex])
                        {
                            JOB.PASTEInfo[k].iPasteED[i] = 1;
                        }
                    }
                    catch { }
                }
            }
        }
        #endregion

        #region 单例 方便模块间交互
        public static Form_Main Instance = null;
        #endregion

        #region 2017年11月3日14:15:30 自动标定
        public void StartGrabImage()
        {
            return;
        }

        public void StopGrabImage()
        {
            return;
        }

        /// <summary>
        /// 通过 ViewBox 获得 image
        /// </summary>
        /// <returns></returns>
        public VisionImage ViewImage
        {
            get
            {
                return this.imageSet.Image;
            }
            set
            {
                if (value != null)
                    Algorithms.Copy(value, imageSet.Image);
            }
        }

        public VisionImage GrabImage2View(CAM camera)
        {
            return CameraDefine.Instance[camera]._Session.Snap(imageSet.Image);
        }
        #endregion

        #region 2017年12月7日 13:40:21 添加异常结束  自动运行 指定起始点功能
        private int StartPanel = 0; //! 起始的Panel号
        private int StartPaste = 0; //! 起始的Paste号
        private bool WhetherStartPoint = false; //!　是否从指定点开始
        #endregion

        #region 2018年9月3日19:46:51 添加回拍功能
        /// <summary>
        /// 是否启用回拍
        /// </summary>
        public bool EnableReCheck = false;

        #endregion

        #region 2018年9月7日16:32:36 玻璃板相关功能
        //自动侦测Mark并查看贴附点（上视觉）
        private void thread_DetectMark()
        {
            //return;
            PastePoints = new PointF[PasteInfo.PastePoints.Length];
            BadMarkPoints = new PointF[PasteInfo.PastePoints.Length];
            short RTN = 0;
            //关闭实时
            RTN = (short)this.Invoke(new VoidDO(CloseUpCamera));
            if (RTN != 0)
            {
                return;
            }
            //MARK1
            RTN = XYGoPosTillStop(30000, PasteInfo.CamPoint1, VariableSys.VelMode_Current_Manual);
            if (RTN != 0)
            {
                return;
            }
            LightON_Up(PasteInfo.bRed1, PasteInfo.bGreen1, PasteInfo.bBlue1, PasteInfo.dRedValue1, PasteInfo.dGreenValue1, PasteInfo.dBlueValue1);
            SetShutter((int)PasteInfo.Shutter1, CAM.Top);
            Thread.Sleep(200);
            RTN = (short)this.Invoke(new VoidDO(Manual_UpCamSnap_ImageSet));
            if (RTN != 0)
            {
                return;
            }
            RTN = (short)this.Invoke(new VoidDO(Manual_Detect1));
            if (RTN != 0)
            {
                return;
            }
            //MARK2
            RTN = XYGoPosTillStop(30000, PasteInfo.CamPoint2, VariableSys.VelMode_Current_Manual);
            if (RTN != 0)
            {
                return;
            }
            LightON_Up(PasteInfo.bRed1, PasteInfo.bGreen1, PasteInfo.bBlue1, PasteInfo.dRedValue1, PasteInfo.dGreenValue1, PasteInfo.dBlueValue1);
            SetShutter((int)PasteInfo.Shutter1, CAM.Top);
            Thread.Sleep(200);
            RTN = (short)this.Invoke(new VoidDO(Manual_UpCamSnap_ImageSet));
            if (RTN != 0)
            {
                return;
            }
            RTN = (short)this.Invoke(new VoidDO(Manual_Detect2));
            if (RTN != 0)
            {
                return;
            }
            //计算
            PastePoints = TransformPointsForm2Mark_IsPasteManaul(PasteInfo.PastePoints, PasteInfo.Mark1, PasteInfo.Mark2, newMark1, newMark2, ref PasteAngle_Check);
            BadMarkPoints = TransformPointsForm2Mark_IsPasteManaul(PasteInfo.BadMarkPoints, PasteInfo.Mark1, PasteInfo.Mark2, newMark1, newMark2, ref R);

            RTN = (short)this.Invoke(new VoidDO(LiveUpCamera));
            if (RTN != 0)
            {
                return;
            }
        }
        private PointF CalPastePoint(uint zIndex, double camAngle)
        {
            Z_RunParam zParam = this.Z_RunParamMap[(uint)zIndex];

            PointContour temp = new PointContour();
            zParam.RUN_PasteRealAngle =
                +JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].Rotation
                + zParam.Nozzle_Down_Angle
                + JOB.OffsetR[zParam.RUN_PasteInfoIndex]
                + camAngle
                + RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].BaseAngle
                + RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].PasteAngle[zParam.RUN_PastePointIndex];

            temp = PtRotateDown(zParam.Nozzle_DownXY_Pos, VariableSys.pDownRotateCenter[zIndex], zParam.RUN_PasteRealAngle);

            var cam = Nozzle2Cam((int)zIndex);
            // label 矫正之后在下视觉中的坐标
            PointF labelPt = this.Point2CCDCenter(VariableSys.pReadyPoint, temp, cam.Item1, cam.Item2);
            PointF centerPt = VariableSys.pReadyPoint;
            // 计算出 label距离相机 到下视觉中心的偏差

            PointF pastePt = new PointF();

            PointF upPt = GlassHelper.MachinePoint2ActPoint(JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].TransformedPoints[zParam.RUN_PastePointIndex]);
            pastePt.X = upPt.X + (labelPt.X - centerPt.X) + VariableSys.pNozzle_2_Cam[zIndex].X;
            pastePt.Y = upPt.Y + (labelPt.Y - centerPt.Y) + VariableSys.pNozzle_2_Cam[zIndex].Y;

            pastePt = GlassHelper.ActPoint2MachinePoint(pastePt);
            pastePt = this.GetPasteOfffset(zIndex, upPt, pastePt);

            //吸嘴单偏移
            pastePt.X += (float)(RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].OffsetX) + (float)(RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].OffsetX_Single[zParam.RUN_PastePointIndex]) + (float)JOB.OffsetX[zParam.RUN_PasteInfoIndex];
            pastePt.Y += (float)(RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].OffsetY) + (float)(RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].OffsetY_Single[zParam.RUN_PastePointIndex]) + (float)JOB.OffsetY[zParam.RUN_PasteInfoIndex];
            return pastePt;
        }
        /// 玻璃板扩展
        #endregion

        #region 2017年12月7日15:10:09 添加 Mark 点指定功能

        /// <summary>
        /// 需要手动指定Mark
        /// </summary>
        private bool NeedAppointMark = false;

        private PointContour appointMark = new PointContour();

        /// <summary>
        /// 确定Mark点
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void imageUp_MouseDoubleClick(object sender, ImageMouseEventArgs e)
        {
            if (NeedAppointMark)
            {
                if (MessageBox.Show("是否指定该点为Mark点", "提示", MessageBoxButtons.YesNo) == DialogResult.Yes)
                {
                    appointMark.X = e.Point.X;//(float)(X.Pos - (coordreport.Points[0].X - VariableSys.CenterPoint_CCDUp.X));
                    appointMark.Y = e.Point.Y; //(float)(Y.Pos - (coordreport.Points[0].Y - VariableSys.CenterPoint_CCDUp.Y));
                }
                else
                {
                    return;
                }

                MessageBox.Show(string.Format("Mark({0},{1})", appointMark.X, appointMark.Y));
                NeedAppointMark = false;
            }
        }

        /// <summary>
        /// 辅助线
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void imageUp_MouseMove(object sender, ImageMouseEventArgs e)
        {
            if (NeedAppointMark)
            {
                imageUp.Image.Overlays.Default.Clear();
                LineContour xLine = new LineContour(new PointContour(0, e.Point.Y), new PointContour(imageUp.Image.Width, e.Point.Y));
                LineContour yLine = new LineContour(new PointContour(e.Point.X, 0), new PointContour(e.Point.X, imageUp.Image.Height));

                this.imageUp.Image.Overlays.Default.AddLine(xLine, Rgb32Value.RedColor);
                this.imageUp.Image.Overlays.Default.AddLine(yLine, Rgb32Value.RedColor);
            }
        }

        /// <summary>
        /// 手动添加Mark点报警
        /// </summary>
        /// <param name="alarmInfo"></param>
        /// <returns></returns>
        private short AlarmInfoFindMark(string alarmInfo)
        {
            short rtn = 0;
            RUN_AlarmInfo[0] = 1;

            DialogResult aa = MessageBox.Show(alarmInfo + ",Retry-Go on;Cancel-Pause", "Info", MessageBoxButtons.YesNoCancel);
            if (aa == DialogResult.Yes)
            {
                this.NeedAppointMark = true;
                rtn = 1;
            }
            else if (aa == DialogResult.Cancel)
            {
                this.bAutoSinglePause_Click(this, new EventArgs());
                RunMode = 2;
            }

            RUN_AlarmInfo[0] = 0;
            RestartStopwatch();
            PutInLog(alarmInfo);
            return rtn;
        }
        #endregion

        #region 2017年12月8日13:35:39 by lichen 异常关闭时，释放相机 板卡等资源
        public new void Dispose()
        {
            try
            {
                foreach (var camera in CameraDefine.Instance.Entiys.Values)
                {
                    if (camera._Session != null)
                    {
                        camera._Session.Acquisition.Unconfigure();
                        camera._Session.Dispose();
                    }
                }
            }
            catch { }
        }
        #endregion

        #region 2018年9月25日19:39:30 添加 圆+寻边算法
        public Roi ConvertToRoi(string roi)
        {
            RectangleContour rect = new RectangleContour();
            try
            {
                string[] arr = roi.Split(',');
                rect.Top = double.Parse(arr[0]);
                rect.Left = double.Parse(arr[1]);
                rect.Width = double.Parse(arr[2]);
                rect.Height = double.Parse(arr[3]);
            }
            catch { }

            return rect.ConvertToRoi();
        }
        #endregion
        #region 参数-(全局-功能)
        public short AlarmOnce = 0;
        public PointF DownUpPointNow = new PointF();
        public bool bUpdateChart = false;
        /// <summary>
        /// 下视觉飞拍：0 上视觉飞拍:1
        /// </summary>
        public int FlyMode = 0;
        public bool bFlyStart = false;
        private bool bMachineAlarm = false;
        private StringBuilder req = new StringBuilder(1024);
        private StringBuilder res = new StringBuilder(1024);
        private PictureBox[] PB_IO_IN, PB_IO_OUT;//控件数组
        private Label[] LIO_In, LIO_Out;//控件数组
        AutoSizeFormClass asc = new AutoSizeFormClass();//自适应窗口
        //*******************************************[系统参数]**************************************************
        private short rtn = 0;
        public static Variable VariableSys = new Variable();
        public IniFile Ini_Sys = new IniFile(Variable.sPath_BaseProgram + "\\Configure\\System.ini");

        private bool b_Login, bSet_CamLive, bSet_Cross;
        //*******************************************[模式切换]**************************************************
        /// <summary>
        /// 切换Z轴1-Z1 2-Z2 3-Z3 4-Z4
        /// </summary>
        private short ZAxisIndex = 1;
        /// <summary>
        /// 切换Z轴1-R1 2-R2 3-R3 4-R4
        /// </summary>
        private short RAxisIndex = 1;

        private short CamIndexSelected = 1;//切换相机1-up 2-down
        private bool KeyMove_Jog_or_Trim = true;
        #region*******************************************[相机]**************************************************
        private ImaqdxCameraInformation[] cameraList;//相机列表

        private VisionImage imageTemp = new VisionImage();
        public VisionImage ImageCapture_UpLabel, ImageCapture_Up1, ImageCapture_Up2;//上下相机取像图片序列
        private VisionImage ImageCapture_BadMark = new VisionImage();
        private CoordinatesReport coordreport;// 坐标系转换结果

        private int[] CalibrationImageIndex = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };//九点校验
        private Collection<PointContour> PixelCoordPoints, WorldCoordPoints;
        private Collection<PointContour> PointRotateArr = new Collection<PointContour>();//
        private PointContour PixelPoint1, PixelPoint2, PixelPoint3, PixelPoint4, PixelPoint5, PixelPoint6, PixelPoint7, PixelPoint8, PixelPoint9, WorldPoint1, WorldPoint2, WorldPoint3, WorldPoint4, WorldPoint5, WorldPoint6, WorldPoint7, WorldPoint8, WorldPoint9;//像数坐标 世界坐标
        private Variable.CamReturn CamReturnInfo = new Variable.CamReturn();
        #endregion

        public Axis_RunParam X, Y, Turn, Axis4, XY;
        public R_RunParam R1, R2, R3, R4;
        public Z_RunParam Z1, Z2, Z3, Z4;
        #region 视觉算法
        #region MatchPattern
        private float[] minAngleVals = { -20, 0 };//角度-10 到10 如果选择镜像 后面为 （180-10） 和（180+10）
        private float[] maxAngleVals = { 20, 0 };
        private int[] advancedOptionsItems = { 102, 106, 107, 108, 109, 111, 112, 113, 103, 104, 105, 100 };
        private double[] advancedOptionsValues = { 10, 300, 0, 6, 0, 20, 10, 20, 1, 20, 0, 4 };

        private MatchingAlgorithm matchAlgorithm = MatchingAlgorithm.MatchGrayValuePyramid;
        private Collection<RotationAngleRange> angleRange;
        private Collection<PMMatchAdvancedSetupDataOption> advancedMatchOptions;
        #endregion

        #region MatchGeometric
        private CurveOptions curveOptions;
        private LearnGeometricPatternEdgeBasedAdvancedOptions learnGPEBAdvancedOptions;
        private MatchGeometricPatternEdgeBasedOptions matchGPMOptions;
        private Collection<GeometricEdgeBasedPatternMatch> gpmResults;
        #endregion
        #endregion

        private OPTControllerAPI OPTController_Up = new OPTControllerAPI();//LightUp
        private OPTControllerAPI OPTController_Down = new OPTControllerAPI();//LightDown
        //private Form fm;    //启动窗口-信息提示窗口
        private Form_Info fm = new Form_Info();
        public static HSSFWorkbook hssfworkbook;//EXCEL 操作

        //*******************************************[贴附信息]**************************************************
        public Variable.PASTAE PasteInfo = new Variable.PASTAE();
        private short Mark_Index = 0;
        private short Paste_Index = 0;

        //*******************************************[Feeder信息]**************************************************
        public Variable.FEEDER[] Feeder = new Variable.FEEDER[2] { new Variable.FEEDER(), new Variable.FEEDER() };
        public Variable.JOB JOB = new Variable.JOB();
        private IniFile JobFile;
        private uint bufNum = 0;//相机取图个数
        private List<VisionImage> UpFlyCapture = new List<VisionImage>();//下视觉飞行模式取图List

        private VisionImage DownTemp = new VisionImage();
        private VisionImage UpTemp = new VisionImage();

        public Stopwatch Test = new Stopwatch();
        private float Xpos_Temp = 0;
        private float Ypos_Temp = 0;
        private bool bFlyCal = false;
        private bool bFlyTest = false;

        private PointF[] PastePoints;//FOR 修正检视
        private double PasteAngle_Check;//FOR 修正检视
        private PointF[] BadMarkPoints;
        private int iTemp0, iTemp1;
        private PointContour P_Start = new PointContour();
        private PointContour P_End = new PointContour();
        private PointContour P_Mid_H1, P_Mid_H2, P_Mid_V1, P_Mid_V2;
        //*******************************************[复检功能]**************************************************

        #endregion

        #region 2017年12月21日09:50:50 by lichen 维信贴麦克风底部

        private DownVisionCaler DownCaler = new DownVisionCaler();

        private UpVisionCaler UpCaler = new UpVisionCaler();

        //private bool EnableLoaclMode = false;

        /// <summary>
        /// 0:stop 1:reset 2:led 3:run
        /// </summary>
        /// <returns></returns>
        private void OpenBtnLight(ushort light)
        {
            Axis4.SetIO_OUT((ushort)(light + 4));
        }

        /// <summary>
        /// 0:stop 1:reset 2:led 3:run
        /// </summary>
        private void CloseBtnLight(ushort light)
        {
            Axis4.ResetIO_OUT((ushort)(light + 4));
        }

        //todo 轨道停止
        /// <summary>
        /// 轨道停止
        /// </summary>
        private short ConveyorStop()
        {
            ConveyorIsRun = false;
            if (VariableSys.machineVersion == 3)
            {
                short rtn = R3.ResetIO_OUT(4);
                rtn += R3.ResetIO_OUT(5);
            }
            else
            {
                short rtn = R2.ResetIO_OUT(4);
                rtn += R2.ResetIO_OUT(5);
            }
            return rtn;
        }

        private bool ConveyorIsRun = false;
        private bool ConveyorRunDir = true;

        private bool T_ConveyorIsRun = false;
        private bool T_ConveyorRunDir = false;

        /// <summary>
        /// 轨道运动
        /// </summary>
        /// <param name="velMode"></param>
        /// <param name="dir">true:正转  false:反转</param>
        /// <returns></returns>
        private short ConveyorJog(bool dir)
        {
            ConveyorIsRun = true;
            ConveyorRunDir = dir;
            short rtn = 0;
            if (VariableSys.machineVersion == 3)
            {
                if (dir)
                {
                    rtn += R3.SetIO_OUT(4);
                    rtn += R3.ResetIO_OUT(5);
                }
                else
                {
                    rtn += R3.SetIO_OUT(4);
                    rtn += R3.SetIO_OUT(5);
                }
            }
            else
            {
                if (dir)
                {
                    rtn += R2.SetIO_OUT(4);
                    rtn += R2.ResetIO_OUT(5);
                }
                else
                {
                    rtn += R2.SetIO_OUT(4);
                    rtn += R2.SetIO_OUT(5);
                }
            }
            return rtn;
        }

        /// <summary>
        /// Z 轴 的运行参数
        /// </summary>
        public ConcurrentDictionary<uint, Z_RunParam> Z_RunParamMap = new ConcurrentDictionary<uint, Z_RunParam>();

        /// <summary>
        /// R 轴 的运行参数
        /// </summary>
        public ConcurrentDictionary<uint, R_RunParam> R_RunParamMap = new ConcurrentDictionary<uint, R_RunParam>();

        /// <summary>
        /// 根据名称 获得 R 轴运行参数
        /// </summary>
        /// <param name="name">名称</param>
        /// <returns>运行参数</returns>
        public R_RunParam Get_R_RunParam(string name)
        {
            try
            {
                if (name.Contains("R1"))
                {
                    return this.R_RunParamMap[0];
                }
                else if (name.Contains("R2"))
                {
                    return this.R_RunParamMap[1];
                }
                else if (name.Contains("R3"))
                {
                    return this.R_RunParamMap[2];
                }
                else
                {
                    return this.R_RunParamMap[3];
                }
            }
            catch { return null; }
        }

        public Z_RunParam Get_Z_RunParam(string name)
        {
            try
            {
                if (name == "Z1")
                {
                    return this.Z_RunParamMap[0];
                }
                else if (name == "Z2")
                {
                    return this.Z_RunParamMap[1];
                }
                else if (name == "Z3")
                {
                    return this.Z_RunParamMap[2];
                }
                else
                {
                    return this.Z_RunParamMap[3];
                }
            }
            catch { return null; }
        }

        /// <summary>
        /// 所有 Z 是否到达安全位置
        /// </summary>
        /// <returns></returns>
        public bool All_ZReachOrg()
        {
            bool allZReachOrg = true;
            for (uint i = 0; i < this.Z_RunParamMap.Count; ++i)
            {
                if (!Z_RunParamMap[i].IsSafePos)
                {
                    allZReachOrg = false;
                }
            }

            return allZReachOrg;
        }

        /// <summary>
        /// 所有 Z轴 去安全高度
        /// </summary>
        /// <returns></returns>
        public bool All_ZGoSafe(Variable.VelMode velMode)
        {
            for (uint i = 0; i < this.Z_RunParamMap.Count; ++i)
            {
                short rtn = Z_RunParamMap[i].GoSafePos(velMode);
                if (rtn != 0)
                    return false;
            }

            return true;
        }

        /// <summary>
        /// 等 Z 轴到安全高度
        /// </summary>
        /// <param name="timeout">等待时长</param>
        /// <returns></returns>
        public bool All_ZGoSafeTillStop(int timeout, Variable.VelMode velMode)
        {
            Stopwatch watch = new Stopwatch();
            watch.Reset();
            watch.Start();
            this.All_ZGoSafe(velMode);

            while (watch.ElapsedMilliseconds < timeout && !this.All_ZReachOrg())
            {
                Thread.Sleep(1);
                continue;
            }

            if (watch.ElapsedMilliseconds > timeout)
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 所有 Z轴 重置真空
        /// </summary>
        /// <returns></returns>
        public bool All_ZResetVaccm()
        {
            for (uint i = 0; i < this.Z_RunParamMap.Count; ++i)
            {
                short rtn = Z_RunParamMap[i].XI_vaccum.SetIO();
                rtn += Z_RunParamMap[i].XI_vaccum.ResetIO();
                if (rtn != 0)
                    return false;
            }

            return true;
        }


        /// <summary>
        /// 所有 U 轴到一个位置
        /// </summary>
        /// <param name="pos"></param>
        /// <param name="velMode"></param>
        /// <returns></returns>
        public bool All_RGoPos(double pos, Variable.VelMode velMode)
        {
            for (uint i = 0; i < this.R_RunParamMap.Count; ++i)
            {
                short rtn = R_RunParamMap[i].GoPos(pos + R_RunParamMap[i].InitPos, velMode);
                if (rtn != 0)
                    return false;
            }

            return true;
        }

        /// <summary>
        /// 所有 R 轴到 不同位置
        /// </summary>
        /// <param name="posList"></param>
        /// <param name="velMode"></param>
        /// <returns></returns>
        public bool All_RGoPos(List<double> posList, Variable.VelMode velMode)
        {
            for (uint i = 0; i < this.R_RunParamMap.Count; ++i)
            {
                short rtn = R_RunParamMap[i].GoPos(posList[(int)i], velMode);
                if (rtn != 0)
                    return false;
            }

            return true;
        }

        public Variable.VelMode GetTurnVel(Variable.VelMode velMode)
        {
            Variable.VelMode newVel = new Variable.VelMode();
            newVel.LowVel = velMode.Acc * VariableSys.dRatio_Axis_Turn * VariableSys.dRatio_Axis_Turn_LowVel;
            newVel.HighVel = velMode.Acc * VariableSys.dRatio_Axis_Turn * VariableSys.dRatio_Axis_Turn_HighVel;
            newVel.Acc = velMode.Acc * VariableSys.dRatio_Axis_Turn * VariableSys.dRatio_Axis_Turn_Acc;
            newVel.Dec = velMode.Acc * VariableSys.dRatio_Axis_Turn * VariableSys.dRatio_Axis_Turn_Dec;
            return newVel;
        }

        /// <summary>
        /// 所有R 轴回原点
        /// </summary>
        /// <param name="mode"></param>
        /// <param name="velMode"></param>
        /// <returns></returns>
        public bool All_RGoHome(Axis_RunParam.HomeMode mode, Variable.VelMode velMode)
        {
            short rtn = 0;
            if (VariableSys.machineVersion == 3)
            {
                for (uint i = 0; i < this.R_RunParamMap.Count; i += 2)
                {
                    rtn += R_RunParamMap[i].GoHome(mode, velMode, true);
                }
            }
            else
            {
                for (uint i = 0; i < this.R_RunParamMap.Count; i++)
                {
                    rtn += R_RunParamMap[i].GoHome(mode, velMode, true);
                }
            }
            return rtn == 0;
        }

        /// <summary>
        /// 停止 所有 R轴 运行
        /// </summary>
        /// <returns></returns>
        public bool All_RStop()
        {
            for (uint i = 0; i < this.R_RunParamMap.Count; ++i)
            {
                short rtn = R_RunParamMap[i].Stop();
            }

            return true;
        }

        /// <summary>
        /// 停止 所有 R轴 运行
        /// </summary>
        /// <returns></returns>
        public bool All_ZStop()
        {
            for (uint i = 0; i < this.Z_RunParamMap.Count; ++i)
            {
                short rtn = Z_RunParamMap[i].Stop();
            }

            return true;
        }
        #endregion

        #region 界面刷新
        /// <summary>
        /// UI 和 IO刷新Timer
        /// </summary>
        public System.Windows.Forms.Timer UIRefresh = new System.Windows.Forms.Timer();

        /// <summary>
        /// 刷新界面
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void UIRefresh_Tick(object sender, EventArgs e)
        {
            try
            {
                Form_Main.Instance.Instance_UIRefresh();
            }
            catch { }
        }
        #endregion

        #region 2018年12月29日17:02:21 相机模块重新整理
        /// <summary>
        /// 根据相机 获得像素当前对应的机械坐标
        /// </summary>
        /// <param name="captrue"></param>
        /// <param name="pixel"></param>
        /// <param name="camera"></param>
        /// <returns></returns>
        public PointF Point2CCDCenter(PointF captrue, PointContour pixel, CAM camera, int calib)
        {
            return CameraDefine.Instance[camera].ImagePt2WorldPt(captrue, pixel, calib);
        }

        /// <summary>
        /// 根据吸嘴获得对应相机
        /// </summary>
        /// <param name="nozzle"></param>
        /// <returns></returns>
        public static Tuple<CAM,int> Nozzle2Cam(int nozzle)
        {
            CAM cam = (CAM)(nozzle / 2 + 1);
            int calib = nozzle % 2;
            return new Tuple<CAM, int>(cam, calib);
        }
        #endregion

        #region 2018年12月30日20:19:40 界面优化
        public void NagvSet()
        {
            this.panel23.Controls.Clear();
            this.panel23.Controls.Add(this.lSafeDoorEN);
            this.panel23.Controls.Add(this.pLanguage);
            this.panel23.Controls.Add(this.bExit);
            this.panel23.Controls.Add(this.lb_5);
            this.panel23.Controls.Add(this.pMode_SysSet);
            this.panel23.Controls.Add(this.lb_1);
            this.panel23.Controls.Add(this.pMode_Calibration);
            this.panel23.Controls.Add(this.lb_2);
            this.panel23.Controls.Add(this.pMode_PASTE);
            this.panel23.Controls.Add(this.lb_3);
            this.panel23.Controls.Add(this.pMode_Manual);
            this.panel23.Controls.Add(this.lb_0);
            this.panel23.Controls.Add(this.pMode_Run);
            this.panel23.Controls.Add(this.lUser);
            this.panel23.Controls.Add(this.pMode_Login);
        }

        public int CurShowIndex = 0; // 0:Mark 1:Z1 2:Z2....4:Z4 IsSelectShow 是否选择性输出

        public Tuple<string, Color> GetDescr(Variable.VisionState state)
        {
            string text = "PASS";
            Color color = Color.LightGreen;
            switch (state)
            {
                case Variable.VisionState.Fail:
                    text = "Fail";
                    color = Color.Red;
                    break;
                case Variable.VisionState.FindCircleFail:
                    text = "抓圆失败";
                    color = Color.Red;
                    break;
                case Variable.VisionState.FindLineFial:
                    text = "抓边失败";
                    color = Color.Red;
                    break;
                case Variable.VisionState.InitFail:
                    text = "初定位失败";
                    color = Color.Red;
                    break;
                case Variable.VisionState.AngleFail:
                    text = "角度过大";
                    color = Color.Red;
                    break;
                case Variable.VisionState.NoLabel:
                    text = "无料";
                    color = Color.Yellow;
                    break;
                case Variable.VisionState.MoreLabel:
                    text = "吸嘴沾料";
                    color = Color.Red;
                    break;
                case Variable.VisionState.OutoffRange:
                    text = "吸标超管控";
                    color = Color.Red;
                    break;
            }

            return new Tuple<string, Color>(text, color);
        }
        public void ShowVisionStatus(int visionIndex, Variable.CamReturn result, VisionImage image, bool IsSelectShow = true)
        {
            this.BeginInvoke(new Action(() =>
            {
                string showText = string.Empty;
                if (visionIndex == 0)
                    showText = "Mark:";
                else
                    showText = $"Z{visionIndex}:";


                this.SaveImage(result.IsOK, image);
                var t = this.GetDescr(result.State);

                this.VisionStateLabel[visionIndex].Text = showText + t.Item1;
                this.VisionStateLabel[visionIndex].BackColor = t.Item2;

                if (visionIndex == CurShowIndex || !IsSelectShow)
                {
                    try
                    {
                        this.lVisionPass.Text = t.Item1;
                        this.lVisionPass.BackColor = t.Item2;
                        Algorithms.Copy(image, imageUp.Image);
                    }
                    catch { }
                }

            }));
        }

        public void ShowVisionStatus(int visionIndex, bool IsOK, VisionImage image, bool IsSelectShow = true)
        {
            this.BeginInvoke(new Action(() =>
            {
                string showText = string.Empty;
                if (visionIndex == 0)
                    showText = "Mark:";
                else
                    showText = $"Z{visionIndex}:";


                this.SaveImage(IsOK, image);

                string state = "PASS";
                Color color = Color.LightGreen;
                if (!IsOK)
                {
                    this.VisionStateLabel[visionIndex].Text = showText + "NG";
                    this.VisionStateLabel[visionIndex].BackColor = Color.Red;
                }

                this.VisionStateLabel[visionIndex].Text = showText + state;
                this.VisionStateLabel[visionIndex].BackColor = color;

                if (visionIndex == CurShowIndex || !IsSelectShow)
                {
                    try
                    {
                        this.lVisionPass.Text = state;
                        this.lVisionPass.BackColor = color;
                        Algorithms.Copy(image, imageUp.Image);
                    }
                    catch { }
                }

            }));
        }

        public Label[] VisionStateLabel = new Label[5];

        public Label[] SelectLabel = new Label[5];

        public void InitShowLabel()
        {
            PressSensorHelper.Load();
            PressSensorHelper.Instance.Start();

            PressSensorHelper.Instance.ShowPasteLabel.Add(this.lPastePressZ1);
            PressSensorHelper.Instance.ShowPasteLabel.Add(this.lPastePressZ2);
            PressSensorHelper.Instance.ShowPasteLabel.Add(this.lPastePressZ3);
            PressSensorHelper.Instance.ShowPasteLabel.Add(this.lPastePressZ4);

            PressSensorHelper.Instance.ShowLabel.Add(this.lRealPressZ1);
            PressSensorHelper.Instance.ShowLabel.Add(this.lRealPressZ2);
            PressSensorHelper.Instance.ShowLabel.Add(this.lRealPressZ3);
            PressSensorHelper.Instance.ShowLabel.Add(this.lRealPressZ4);

            VisionStateLabel[0] = this.lMarkState;
            VisionStateLabel[1] = this.lZ1State;
            VisionStateLabel[2] = this.lZ2State;
            VisionStateLabel[3] = this.lZ3State;
            VisionStateLabel[4] = this.lZ4State;

            SelectLabel[0] = this.lShowMark;
            SelectLabel[1] = this.lShowZ1;
            SelectLabel[2] = this.lShowZ2;
            SelectLabel[3] = this.lShowZ3;
            SelectLabel[4] = this.lShowZ4;
        }

        #endregion

        #region 新改吸嘴校验方式

        /// <summary>
        /// 初始化吸嘴间关系
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        //todo 设定吸嘴孔位
        private void bInitNozzleOffset_Click(object sender, EventArgs e)
        {
            //if (this.cbNzStep4.SelectedIndex < 0) return;
            //NozzleCenterOffset[this.cbNzStep4.SelectedIndex] = this.XYPos;
            if (this.cbNzStep1.SelectedIndex < 0) return;
            NozzleCenterOffset[this.cbNzStep1.SelectedIndex] = this.XYPos;
            SaveNozzleOffsetConfig();
        }

        /// <summary>
        /// 吸标偏移值
        /// </summary>
        public PointF[] NozzleCenterOffset = null;

        /// <summary>
        /// 辅助吸料偏移调整
        /// </summary>
        public PointF[] NozzleManualOffset = null;

        /// <summary>
        /// 读取吸嘴偏移配置
        /// </summary>
        public void ReadNozzleOffsetCofing()
        {
            IniFile ini = new IniFile(Variable.sPath_Configure + "NozzleOffset.ini");
            try
            {
                NozzleCenterOffset = new PointF[Variable.NOZZLE_NUM];
                NozzleManualOffset = new PointF[Variable.NOZZLE_NUM];
                PointF[] temp = new PointF[Variable.NOZZLE_NUM];
                for (int i = 0; i < Variable.NOZZLE_NUM; ++i)
                {
                    NozzleCenterOffset[i].X = (float)ini.IniReadNum("app", $"Nozzle{i + 1}OffsetX");
                    NozzleCenterOffset[i].Y = (float)ini.IniReadNum("app", $"Nozzle{i + 1}OffsetY");

                    NozzleManualOffset[i].X = (float)ini.IniReadNum("app", $"Nozzle{i + 1}ManualOffsetX");
                    NozzleManualOffset[i].Y = (float)ini.IniReadNum("app", $"Nozzle{i + 1}ManualOffsetY");
                }
            }
            catch { }
        }

        public void SaveNozzleOffsetConfig()
        {
            IniFile ini = new IniFile(Variable.sPath_Configure + "NozzleOffset.ini");
            for (int i = 0; i < Variable.NOZZLE_NUM; ++i)
            {
                ini.IniWriteNumber("app", $"Nozzle{i + 1}OffsetX", NozzleCenterOffset[i].X);
                ini.IniWriteNumber("app", $"Nozzle{i + 1}OffsetY", NozzleCenterOffset[i].Y);
            }
        }

        public void SaveNozzleManualOffsetConfig()
        {
            IniFile ini = new IniFile(Variable.sPath_Configure + "NozzleOffset.ini");
            for (int i = 0; i < Variable.NOZZLE_NUM; ++i)
            {
                ini.IniWriteNumber("app", $"Nozzle{i + 1}ManualOffsetX", NozzleManualOffset[i].X);
                ini.IniWriteNumber("app", $"Nozzle{i + 1}ManualOffsetY", NozzleManualOffset[i].Y);
            }
        }

        /// <summary>
        /// 通过吸嘴1得到其他位置
        /// </summary>
        /// <param name="nz1"></param>
        /// <param name="selectNz"></param>
        /// <returns></returns>
        public PointF Nz1ToOther(PointF nz1, int selectNz)
        {
            //todo 加入辅助吸料偏移调整
            float dx = NozzleCenterOffset[selectNz].X - NozzleCenterOffset[0].X + NozzleManualOffset[selectNz].X;
            float dy = NozzleCenterOffset[selectNz].Y - NozzleCenterOffset[0].Y + NozzleManualOffset[selectNz].Y;
            return new PointF(nz1.X - dx, nz1.Y + dy);
        }

        /// <summary>
        /// 通过其他吸嘴得到吸嘴1位置
        /// </summary>
        /// <param name="other"></param>
        /// <param name="selectNz"></param>
        /// <returns></returns>
        public PointF OtherToNz1(PointF other, int selectNz)
        {
            float dx = NozzleCenterOffset[selectNz].X - NozzleCenterOffset[0].X;
            float dy = NozzleCenterOffset[selectNz].Y - NozzleCenterOffset[0].Y;

            return new PointF(other.X + dx, other.Y - dy);
        }
        #endregion

        #region 勾选贴附功能
        private void LoadPasteRegion()
        {
            string tt = Ini_Sys.IniReadValue("PasteRegion", "DisRegions");
            if (tt == string.Empty) return;
            var tts = tt.Split(',');
            if (tts != null)
                RUN_DisPasteRegion = tts.ToList();
        }

        private void SavePasteRegion()
        {
            string tt = string.Empty;
            for (int i = 0; i < RUN_DisPasteRegion.Count; ++i)
            {
                tt += RUN_DisPasteRegion[i];
                if (i != (RUN_DisPasteRegion.Count - 1))
                    tt += ',';
            }

            Ini_Sys.IniWriteValue("PasteRegion", "DisRegions", tt);
        }

        public List<string> RUN_DisPasteRegion = new List<string>();

        private void bSelectPasteRegion_Click(object sender, EventArgs e)
        {
            fmSelectPasteRegion fm = new fmSelectPasteRegion();
            fm.DisRegions = RUN_DisPasteRegion.ToList();
            if (fm.ShowDialog() == DialogResult.OK)
            {
                RUN_DisPasteRegion = fm.DisRegions.ToList();
                SavePasteRegion();
            }
        }
        #endregion

        #region 翻转轴空跑测试功能
        public bool IsTurnTest = false;
        public int TurnCycle = 10;
        private void bStartTurnTest_Click(object sender, EventArgs e)
        {
            this.All_ZGoSafeTillStop(3000, VariableSys.VelMode_Current);
            Thread.Sleep(500);
            TurnCycle = (int)this.nCycle.Value;
            if (this.All_ZReachOrg())
            {
                IsTurnTest = true;
                Task.Factory.StartNew(() =>
                {
                    for(int i = 0; i < TurnCycle; ++i)
                    {
                        if (!IsTurnTest || this.Turn.bAxisServoWarning) break;
                        this.Turn.GoPosTillStop(5000, VariableSys.dTurnXIAngle, VariableSys.VelMode_Current);
                        Thread.Sleep(300);
                        this.Turn.GoPosTillStop(5000, VariableSys.dTurnPasteAngle, VariableSys.VelMode_Current);
                        Thread.Sleep(300);
                    }
                });
            }
        }

        private void bStopTurnTest_Click(object sender, EventArgs e)
        {
            IsTurnTest = false;
        }
        #endregion

        #region FD屏蔽功能
        /// <summary>
        /// 是否屏蔽FD
        /// </summary>
        public bool[] ClosedFD = new bool[2];

        #endregion


        #region 报警功能
        public enum AlarmLevel
        {
            Tips,
            /// <summary>
            /// 只提示记录,不记录报警率
            /// </summary>
            Warn,

            /// <summary>
            /// 提示并记录报警率
            /// </summary>
            Alarm,

            /// <summary>
            /// 只能暂停不允许继续
            /// </summary>
            Err,
        }

        /// <summary>
        /// 当前panel是否报警过
        /// </summary>
        private bool PanelAlarmed = false;
 

        public short AlarmInfoInvoke(string alarmInfo, AlarmLevel level = AlarmLevel.Alarm)
        {
            return (short)this.Invoke(new Func<short>(() => {
                return this.AlarmInfo(alarmInfo, level);
            }));
        }

        private short AlarmInfo(string alarmInfo, AlarmLevel level)//报警提示
        {
            RUN_AlarmInfo[0] = 1;

            if(level <= AlarmLevel.Tips)
            {
                StatisticsHelper.Instance.Reoprt.Start(TimeDefine.PauseTime, alarmInfo);
            }
            else
            {
                StatisticsHelper.Instance.Reoprt.Start(TimeDefine.DTTime, alarmInfo);
                ZDTHelper.Instance.UpdateAlarmMessage(alarmInfo);
                PutInLog(Variable.sPath_ZDTMESLog, "报警", alarmInfo);

                if(level >= AlarmLevel.Alarm)
                {
                    StatisticsHelper.Instance.Reoprt.Total.AlarmPcsCount += 1;
                    if (!PanelAlarmed)
                    {
                        StatisticsHelper.Instance.Reoprt.Total.AlaramPanelCount += 1;
                        PanelAlarmed = true;
                    }
                }
            }

            DialogResult aa = MessageBox.Show(alarmInfo, "提示", MessageBoxButtons.RetryCancel);

            if(level >= AlarmLevel.Err)
            {
                this.bAutoSinglePause_Click(this, new EventArgs());
                if(alarmInfo.Contains("有沾料"))
                {
                    Task.Factory.StartNew(() =>
                    {
                        bool rtn = this.All_ZGoSafeTillStop(5000, VariableSys.VelMode_Current_Manual);
                        short rtn1 = 0;
                        if (rtn) rtn1 += this.XYGoPosTillStop(5000, VariableSys.pReadyPoint, VariableSys.VelMode_Current_Manual);
                        this.Turn.GoPosTillStop(5000, VariableSys.dTurnPasteAngle, VariableSys.VelMode_Current_Manual);
                    });
                }
            }
            else
            {
                if (aa == DialogResult.Retry)
                    StatisticsHelper.Instance.Reoprt.Start(TimeDefine.ProductTime, "异常处理完成");
                else
                    this.bAutoSinglePause_Click(this, new EventArgs());
            }

            RUN_AlarmInfo[0] = 0;
            RestartStopwatch();
            return 0;
        }
        #endregion

        public Form_Main()
        {
            AxisOffsetItem.VisionDetect += AxisOffsetItem_VisionDetect;
            HardwareOrgHelper.Load();
            Instance = this;

            rtn = 1;
            #region Language UI
            VariableSys.LanguageFlag = (short)Ini_Sys.IniReadNum("RunOption", "LanguageFlag");
            if (VariableSys.LanguageFlag == 1)
            {
                //pLanguage.Image = Properties.Resources.english;
                string ww = typeof(Form_Main).Assembly.GetName().Name;
                ChangLanguage.SetAllLang("en-GB", ww, "Form_Main");
                ChangLanguage.SetLang("en-GB", this, typeof(Form_Main));
            }
            else
            {
                //pLanguage.Image = Properties.Resources.china;
                string ww = typeof(Form_Main).Assembly.GetName().Name;
                ChangLanguage.SetAllLang("zh-CN", ww, "Form_Main");
                ChangLanguage.SetLang("zh-CN", this, typeof(Form_Main));
            }
            #endregion 

            InitializeComponent();
            this.InitShowLabel();
            InitializeWorkbook(Variable.sPath_XLS_Configure);
            if (MessageBox.Show("是否启动 [ALM900-DB] 软体", "提示", MessageBoxButtons.YesNo) == DialogResult.No)
            {
                this.Close();
                Application.Exit();
                Environment.Exit(0);
                return;
            }

            this.LoadPasteRegion();
            StatisticsHelper.Instance.Refresh();
            StatisticsHelper.Instance.SetGridView(StatisticsHelper.Instance.Reoprt, this.dGV_Statics, true);
            frm_AddModel.GetImage += Frm_AddModel_GetImage;
            VariableSys.bEnableGlassOffset = Ini_Sys.IniReadValue("RunOption", "EnableGlassOffset") == "True" ? true : false;
            GlassHelper.LoadJigData();
            this.ReadNozzleOffsetCofing();
            SerivceMonitorHelper.Load();
            rtn = SystemInit();

#if MACHINE_ZDT
            this.bZDT_BJ.Visible = true;
            this.bZDT_JY.Visible = true;
            this.bMFlexMES.Visible = false;
            MFlex.MFlexHelper.Instance.EnableMES = false;
#else
            ZDTHelper.Instance.EnableBJZS = false;
            ZDTHelper.Instance.EnableAlarmUpload = false;
            ZDTHelper.Instance.EnableJY = false;
            this.bZDT_BJ.Visible = false;
            this.bZDT_JY.Visible = false;
            this.bMFlexMES.Visible = true;
#endif

            if (rtn != 0)
            {
                if (MessageBox.Show("机台初始化失败", "提示", MessageBoxButtons.OKCancel) == DialogResult.Cancel)
                {
                    Application.Exit();
                    Environment.Exit(0);
                    return;
                }
                PutInLog("机台初始化失败");
                return;
            }
            else
            {
                Task Thread_Main = new Task(thread_Main);
                Task Thread_Conveyor = new Task(thread_Conveyor);

                Task Thread_Light = new Task(thread_Light);
                this.DownCaler.StartLoop();
                this.UpCaler.StartLoop();
                UIRefresh.Tick += UIRefresh_Tick;
                UIRefresh.Interval = 33;
                UIRefresh.Start();
                Thread_Main.Start();
                Thread_Conveyor.Start();
                Thread_Light.Start();
                SerivceMonitorHelper.Instance.StartMonitor();
                XYGoPosTillStopNoSafeHeight(30000, VariableSys.pReadyPoint, VariableSys.VelMode_Slow_Manual);
                PressSensorHelper.Instance.SendZeroAll();
            }
        }

        #region 三色灯控制
        private void thread_Light()
        {
            while(!bSystemExit)
            {
                Thread.Sleep(100);
                #region 三色灯-自动运行
                if (X.bAxisEmgOn)
                {
                    Three_Green_OFF();
                    Three_Yellow_ON();
                    Three_Red_OFF();
                }
                else
                {
                    if (RunMode == 1 || Monitor.IsEntered(this.SafeDoor))
                    {
                        #region 运行无报警
                        if (RUN_AlarmInfo.Sum() == 0)
                        {
                            Three_Noise_OFF();
                            Three_Red_OFF();

                            #region FD是否屏蔽
                            if (this.cbLeftFD.Checked || this.cbRightFD.Checked)
                            {
                                Three_Yellow_ON();
                                Three_Green_OFF();
                            }
                            #endregion
                            else
                            {
                                // 待板绿闪
                                if (StatisticsHelper.Instance.Reoprt.CurRecordTime == TimeDefine.WaitInputTime)
                                {
                                    Three_Green_ON();
                                    Thread.Sleep(500);
                                    Three_Green_OFF();
                                    Thread.Sleep(400);
                                }
                                // 出板黄闪
                                else if (StatisticsHelper.Instance.Reoprt.CurRecordTime == TimeDefine.WaitOuputTime)
                                {
                                    Three_Green_OFF();
                                    Three_Yellow_ON();
                                    Thread.Sleep(500);
                                    Three_Yellow_OFF();
                                    Thread.Sleep(400);
                                }
                                else
                                {
                                    Three_Yellow_OFF();
                                    Three_Green_ON();
                                }
                            }
                        }
                        #endregion
                        else
                        #region 运行有报警
                        {
                            Three_Green_OFF();
                            Three_Yellow_OFF();

                            Three_Red_ON();
                            Thread.Sleep(200);
                            Three_Red_OFF();
                            Thread.Sleep(100);
                        }
                        #endregion
                    }
                    else
                    {
                        Three_Noise_OFF();
                        Three_Yellow_ON();
                        Three_Green_OFF();
                        Three_Red_OFF();
                    }
                }
                #endregion
            }
        }
        #endregion

        private Tuple<PointF, double> AxisOffsetItem_VisionDetect(short arg1, short arg2)
        {
            PointContour center = new PointContour();
            double r = 0;
            CameraDefine.Instance[CAM.Top]._Session.Acquisition.Unconfigure();
            CommonHelper.DoEvent(100);
            CameraDefine.Instance[CAM.Top]._Session.Snap(this.imageSet.Image);
            short rtn = this.CamDetect_Circle(this.imageSet.Image, this.imageSet.Roi, arg1, arg2, ref center, ref r);
            if (rtn != 0)
            {
                Debug.WriteLine("抓取失败!!");
                return new Tuple<PointF, double>(this.XYPos, 0);
            }
            PointF wrold = this.Point2CCDCenter(this.XYPos, center, CAM.Top, 0);
            return new Tuple<PointF, double>(wrold, r);
        }

        private VisionImage Frm_AddModel_GetImage()
        {
            return imageSet.Image;
        }

        #region 自适应&&取消热键
        private void Form_Main_Load(object sender, EventArgs e)
        {
            try
            {
                pLanguage.Image = Properties.Resources.china;
                dGV_JOB_U.Columns[0].HeaderText = "帖附信息";
                dGV_JOB_U.Columns[1].HeaderText = "Mark1拍照点X";
                dGV_JOB_U.Columns[2].HeaderText = "Mark1拍照点Y";
                dGV_JOB_U.Columns[3].HeaderText = "Mark2拍照点X";
                dGV_JOB_U.Columns[4].HeaderText = "Mark2拍照点Y";
                dGV_JOB_U.Columns[5].HeaderText = "OffsetX";
                dGV_JOB_U.Columns[6].HeaderText = "OffsetY";
                dGV_JOB_U.Columns[7].HeaderText = "OffsetR";

                //线程开启
                DataGridViewCellEventArgs a = new DataGridViewCellEventArgs(0, 0);
                dGV_CompareVel_CellClick(sender, a);//.Rows[0].Selected = true;
                dGV_FeederLeft_CellClick(sender, a);//.Rows[0].Selected = true;
                AddRowHeader(dGV_JOB_U, false);

                if (ZDTHelper.Instance.EnableBJZS)
                {
                    //this.feederMesInfo.RefreshData();
                    //this.feederMesInfo.RefreshUIData();
                }

                LoadFrmFinshed = true;
            }
            catch { }
        }

        private void Form_Main_SizeChanged(object sender, EventArgs e)
        {
            //asc.controlAutoSize(this); 
        }

        private void tabControl_Main_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Left || e.KeyCode == Keys.Right)
            {
                e.Handled = true;
            }
        }

        private void tabControl_Set_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Left || e.KeyCode == Keys.Right)
            {
                e.Handled = true;
            }
        }
        #endregion

        #region 功能函数
        private short SystemInit()//系统初始化
        {
            short RTNN_Program = 0;
            #region 到位Sensor数量
            bArr_IO_IN_Status.bIN_LabelReach = new int[16];
            #endregion
            #region 系统文件产生

            string programPath = Ini_Sys.IniReadValue("SaveFile", "ProgramPath");
            if (programPath == string.Empty)
            {
                Ini_Sys.IniWriteValue("SaveFile", "ProgramPath", "D:\\ALM1000");
            }
            else
            {
                Variable.sPath_SYS_MachineNO = programPath;
                Variable.sPath_SYS_Program = Variable.sPath_SYS_MachineNO + "\\ALMProgram";//打包程式
                Variable.sPath_SYS_FEEDER = Variable.sPath_SYS_MachineNO + "\\FEEDER";//程式模块1-Feeder
                Variable.sPath_SYS_JOBFILE = Variable.sPath_SYS_MachineNO + "\\JOBFILE";//程式模块2-JOBFILE
                Variable.sPath_SYS_LABEL = Variable.sPath_SYS_MachineNO + "\\LABEL";//程式模块3-LABEL
                Variable.sPath_SYS_LABEL_UP = Variable.sPath_SYS_MachineNO + "\\LABEL_UP";//程式模块3-LABEL
                Variable.sPath_SYS_PASTE = Variable.sPath_SYS_MachineNO + "\\PASTE";//程式模块4-PASTE
                Variable.sPath_SYS_FLY = Variable.sPath_SYS_MachineNO + "\\FLYCapture";//
                Variable.sPath_SYS_BadMark = Variable.sPath_SYS_MachineNO + "\\BadMark";//
                Variable.sPath_SYS_ReCheck = Variable.sPath_SYS_MachineNO + "\\ReCheck";// 
            }

            if (!Directory.Exists(Variable.sPath_SYS_MachineNO))
            {
                Directory.CreateDirectory(Variable.sPath_SYS_MachineNO);
            }
            if (!Directory.Exists(Variable.sPath_SYS_Program))
            {
                Directory.CreateDirectory(Variable.sPath_SYS_Program);
            }
            //if (!Directory.Exists(Variable.sPath_SYS_FEEDER))
            //{
            //    Directory.CreateDirectory(Variable.sPath_SYS_FEEDER);
            //}
            //if (!Directory.Exists(Variable.sPath_SYS_JOBFILE))
            //{
            //    Directory.CreateDirectory(Variable.sPath_SYS_JOBFILE);
            //}
            if (!Directory.Exists(Variable.sPath_SYS_LABEL))
            {
                Directory.CreateDirectory(Variable.sPath_SYS_LABEL);
            }
            if (!Directory.Exists(Variable.sPath_SYS_LABEL_UP))
            {
                Directory.CreateDirectory(Variable.sPath_SYS_LABEL_UP);
            }
            if (!Directory.Exists(Variable.sPath_SYS_PASTE))
            {
                Directory.CreateDirectory(Variable.sPath_SYS_PASTE);
            }
            if (!Directory.Exists(Variable.sPath_SYS_FLY))
            {
                Directory.CreateDirectory(Variable.sPath_SYS_FLY);
            }
            if (!Directory.Exists(Variable.sPath_SYS_BadMark))
            {
                Directory.CreateDirectory(Variable.sPath_SYS_BadMark);
            }
            Common.CommonHelper.CreatePath(Variable.sPath_ZDTMESLog);
            Common.CommonHelper.CreatePath(Variable.sPath_ReadCodeBean);
            Common.CommonHelper.CreatePath(Variable.sPath_ErrorCodeInfoConfig);

            //if (!Directory.Exists(Variable.sPath_SYS_ReCheck))
            //{
            //    Directory.CreateDirectory(Variable.sPath_SYS_ReCheck);
            //}
            #endregion
            #region 算法参数初始化
            #region PM
            angleRange = new Collection<RotationAngleRange>();
            for (int i = 0; i < 2; ++i)
            {
                angleRange.Add(new RotationAngleRange(minAngleVals[i], maxAngleVals[i]));
            }
            int numAdvancedOptions = 12;
            // Set the advanced options.
            advancedMatchOptions = new Collection<PMMatchAdvancedSetupDataOption>();
            for (int i = 0; i < numAdvancedOptions; ++i)
            {
                advancedMatchOptions.Add(new PMMatchAdvancedSetupDataOption((MatchSetupOption)advancedOptionsItems[i], advancedOptionsValues[i]));
            }
            #endregion
            #region GM
            curveOptions = new CurveOptions();
            curveOptions.ColumnStepSize = 15;
            curveOptions.ExtractionMode = ExtractionMode.UniformRegions;
            curveOptions.FilterSize = EdgeFilterSize.Fine;
            curveOptions.MaximumEndPointGap = 10;
            curveOptions.MinimumLength = 25;
            curveOptions.RowStepSize = 15;
            learnGPEBAdvancedOptions = new LearnGeometricPatternEdgeBasedAdvancedOptions();
            learnGPEBAdvancedOptions.ImageSamplingFactor = 2;
            learnGPEBAdvancedOptions.RotationAngleRange = new Range(0, 360);
            learnGPEBAdvancedOptions.ScaleRange = new Range(90, 110);

            matchGPMOptions = new MatchGeometricPatternEdgeBasedOptions();
            matchGPMOptions.Advanced.ContrastMode = ContrastMode.Original;
            matchGPMOptions.Advanced.MatchStrategy = GeometricMatchingSearchStrategy.Balanced;
            matchGPMOptions.MinimumMatchScore = 800;
            matchGPMOptions.Mode = GeometricMatchModes.RotationInvariant | GeometricMatchModes.ScaleInvariant | GeometricMatchModes.OcclusionInvariant;
            matchGPMOptions.NumberOfMatchesRequested = 1;
            double[] vaRangesMin = { 0, 0, 90, 0 };
            double[] vaRangesMax = { 360, 0, 110, 25 };
            matchGPMOptions.OcclusionRange = new Range(vaRangesMin[3], vaRangesMax[3]);
            matchGPMOptions.RotationAngleRanges.Add(new Range(vaRangesMin[0], vaRangesMax[0]));
            matchGPMOptions.RotationAngleRanges.Add(new Range(vaRangesMin[1], vaRangesMax[1]));
            matchGPMOptions.ScaleRange = new Range(vaRangesMin[2], vaRangesMax[2]);
            matchGPMOptions.SubpixelAccuracy = true;
            gpmResults = new Collection<GeometricEdgeBasedPatternMatch>();
            #endregion
            #endregion
            #region 轴控 实例化
            #region 初始化轴卡
            rtn = AxisInit();
            if (rtn != 0)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Motion Control Fail!", "Info");
                    PutInLog("Motion Control Fail!");
                }
                else
                {
                    MessageBox.Show("轴卡初始化失败!", "提示");
                    PutInLog("轴卡初始化失败!");
                }
                return 1;
            }
            #endregion

            #region 控件数组 实例化
            #region 表格参数
            dGV_CompareVel.ColumnHeadersDefaultCellStyle.Font = new Font("Tahoma", 12);
            dGV_CompareVel.RowHeadersDefaultCellStyle.Font = new Font("Tahoma", 12);
            dGV_CompareVel.DefaultCellStyle.Font = new Font("Tahoma", 12);
            dGV_CompareVel.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            dGV_CompareVel.ColumnHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.False;
            dGV_CompareVel.RowHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.False;
            dGV_CompareVel.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            dGV_CompareVel.RowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders;
            dGV_CompareVel.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
            dGV_CompareVel.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.AllHeaders;
            for (int i = 0; i < dGV_CompareVel.Columns.Count; i++)
                this.dGV_CompareVel.Columns[i].SortMode = DataGridViewColumnSortMode.NotSortable;

            dGV_JOB_U.ColumnHeadersDefaultCellStyle.Font = new Font("Tahoma", 10);
            dGV_JOB_U.RowHeadersDefaultCellStyle.Font = new Font("Tahoma", 10);
            dGV_JOB_U.DefaultCellStyle.Font = new Font("Tahoma", 10);
            dGV_JOB_U.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            dGV_JOB_U.ColumnHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.False;
            dGV_JOB_U.RowHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.False;
            dGV_JOB_U.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            dGV_JOB_U.RowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders;
            dGV_JOB_U.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
            dGV_JOB_U.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.AllHeaders;
            for (int i = 0; i < dGV_JOB_U.Columns.Count; i++)
                this.dGV_JOB_U.Columns[i].SortMode = DataGridViewColumnSortMode.NotSortable;

            dGV_Mark.Rows.Add(2);
            dGV_Mark.ColumnHeadersDefaultCellStyle.Font = new Font("Tahoma", 10);
            dGV_Mark.RowHeadersDefaultCellStyle.Font = new Font("Tahoma", 10);
            dGV_Mark.DefaultCellStyle.Font = new Font("Tahoma", 10);
            dGV_Mark.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            dGV_Mark.ColumnHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.False;
            dGV_Mark.RowHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.False;
            dGV_Mark.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            dGV_Mark.RowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders;
            dGV_Mark.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
            dGV_Mark.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.AllHeaders;
            dGV_Mark.Rows[0].Selected = true;//默认第一行选中
            dGV_Mark.Rows[0].HeaderCell.Value = "MARK1";
            dGV_Mark.Rows[1].HeaderCell.Value = "MARK2";
            for (int i = 0; i < dGV_Mark.Columns.Count; i++)
                this.dGV_Mark.Columns[i].SortMode = DataGridViewColumnSortMode.NotSortable;

            dGV_Paste.ColumnHeadersDefaultCellStyle.Font = new Font("Tahoma", 10);
            dGV_Paste.RowHeadersDefaultCellStyle.Font = new Font("Tahoma", 10);
            dGV_Paste.DefaultCellStyle.Font = new Font("Tahoma", 10);
            dGV_Paste.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            dGV_Paste.ColumnHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.False;
            dGV_Paste.RowHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.False;
            dGV_Paste.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            dGV_Paste.RowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders;
            dGV_Paste.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
            dGV_Paste.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.AllHeaders;
            dGV_Paste.Rows[0].Selected = true;//默认第一行选中
            for (int i = 0; i < dGV_Paste.Columns.Count; i++)
                this.dGV_Paste.Columns[i].SortMode = DataGridViewColumnSortMode.NotSortable;

            dGV_FeederLeft.ColumnHeadersDefaultCellStyle.Font = new Font("Tahoma", 10);
            dGV_FeederLeft.RowHeadersDefaultCellStyle.Font = new Font("Tahoma", 10);
            dGV_FeederLeft.DefaultCellStyle.Font = new Font("Tahoma", 10);
            dGV_FeederLeft.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            dGV_FeederLeft.ColumnHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.False;
            dGV_FeederLeft.RowHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.False;
            dGV_FeederLeft.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            dGV_FeederLeft.RowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders;
            dGV_FeederLeft.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
            dGV_FeederLeft.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.AllHeaders;
            dGV_FeederLeft.Rows[0].Selected = true;//默认第一行选中
            for (int i = 0; i < dGV_FeederLeft.Columns.Count; i++)
                this.dGV_FeederLeft.Columns[i].SortMode = DataGridViewColumnSortMode.NotSortable;
            #endregion
            BaseCoordinateSystem.AxisOrientation = AxisOrientation.Direct;
            MeasurementSystems.AxisOrientation = AxisOrientation.Direct;
            PB_IO_IN = (PictureBox[])(ControlArrayUtils.ControlArrayUtils.getControlArray(this.gB_DI, "pIN", ""));//输入
            PB_IO_OUT = (PictureBox[])(ControlArrayUtils.ControlArrayUtils.getControlArray(this.gB_DO, "pOUT", ""));//输出
            LIO_In = (Label[])(ControlArrayUtils.ControlArrayUtils.getControlArray(this.gB_DI, "lIN", ""));//输入
            LIO_Out = (Label[])(ControlArrayUtils.ControlArrayUtils.getControlArray(this.gB_DO, "lOUT", ""));//输出
            //对输出添加事件
            for (int i = 0; i < 16; i++)
            {
                PB_IO_OUT[i].Click += new System.EventHandler(this.Output);
            }

            imageSet.ToolsShown = ViewerTools.All;
            imageUp.ToolsShown = ViewerTools.All;

            VariableSys.imageCali_Template = new VisionImage();
            ImageCapture_UpLabel = new VisionImage();
            ImageCapture_Up1 = new VisionImage();
            ImageCapture_Up2 = new VisionImage();

            VariableSys.bIO_Card_0to3 = new bool[16];
            VariableSys.bIO_Card_4to7 = new bool[16];
            VariableSys.bIO_Out_Card_0to3 = new bool[16];
            VariableSys.bIO_Out_Card_4to7 = new bool[16];

            cB_CardIO_Index.SelectedIndex = 0;

            #endregion
            #region 读系统文件 & 光源控制

            bAlrmIgnore = false;

            VariableSys.sProgramName = Ini_Sys.IniReadValue("LastProgram", "ProgramName");
            VariableSys.sFeederLeftName = Ini_Sys.IniReadValue("Feeder", "FeederLeft");
            VariableSys.sFeederRightName = Ini_Sys.IniReadValue("Feeder", "FeederRight");
            VariableSys.sJobName = Ini_Sys.IniReadValue("LastJob", "LastJob");
            VariableSys.sReCheckName = Ini_Sys.IniReadValue("LastReCheck", "LastReCheck");
            RTNN_Program = InitProgram(VariableSys.sProgramName);
            if (RTNN_Program != 0)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Load the Lastest Program Fail!", "Info");
                }
                else
                {
                    MessageBox.Show("导入最近的程式失败!", "提示");
                }
            }
            VariableSys.LanguageFlag = (short)Ini_Sys.IniReadNum("RunOption", "LanguageFlag");
            VariableSys.iAddress_FeederDelay1 = (short)Ini_Sys.IniReadNum("RunOption", "Feeder1Address_Delay");
            VariableSys.iAddress_FeederDelay2 = (short)Ini_Sys.IniReadNum("RunOption", "Feeder2Address_Delay");
            VariableSys.iAddress_FeederSpeed1 = (short)Ini_Sys.IniReadNum("RunOption", "Feeder1Address_Speed");
            VariableSys.iAddress_FeederSpeed2 = (short)Ini_Sys.IniReadNum("RunOption", "Feeder2Address_Speed");
            VariableSys.ComIndex_LightUp = (short)Ini_Sys.IniReadNum("RunOption", "COMIndex_LightUp");
            VariableSys.ComIndex_LightDown = (short)Ini_Sys.IniReadNum("RunOption", "COMIndex_LightDown");
            VariableSys.ComIndex_FeederPLC = (short)Ini_Sys.IniReadNum("RunOption", "COMIndex_FeederPLC");
            VariableSys.LightUpVendor = (short)Ini_Sys.IniReadNum("RunOption", "LightUpVendor");
            VariableSys.LightDownVendor = (short)Ini_Sys.IniReadNum("RunOption", "LightDownVendor");
            VariableSys.bEnableAsyncXI = Ini_Sys.IniReadValue("RunOption", "EnableAsyncXI") == "False" ? false : true;
            VariableSys.bEnableVaccumCheck = Ini_Sys.IniReadValue("RunOption", "EnableVacuumCheck") == "True" ? true : false;
            VariableSys.bEnableLineOffset = Ini_Sys.IniReadBool("RunOption", "EnableLineOffset");
            VariableSys.bEnableThrowPut = Ini_Sys.IniReadBool("RunOption", "EnableThrowPut");

            #region 光源控制
            int lRet = Init_LightUp(VariableSys.LightUpVendor);
            if (0 != lRet)
            {
                bConnectU.BackColor = Color.White;
            }
            else
            {
                bConnectU.BackColor = Color.GreenYellow;
            }
            lRet = Init_LightDown(VariableSys.LightDownVendor);
            if (0 != lRet)
            {
                bConnectD.BackColor = Color.White;
            }
            else
            {
                bConnectD.BackColor = Color.GreenYellow;
            }
            #endregion
            //DistVel
            VariableSys.DistVelCount = (short)Ini_Sys.IniReadNum("DistVel", "Count");
            VariableSys.DistVel_MinDist = new double[VariableSys.DistVelCount];
            VariableSys.DistVel_MaxDist = new double[VariableSys.DistVelCount];
            VariableSys.DistVel_Ratio_LowVel = new double[VariableSys.DistVelCount];
            VariableSys.DistVel_Ratio_HighVel = new double[VariableSys.DistVelCount];
            VariableSys.DistVel_Ratio_Acc = new double[VariableSys.DistVelCount];
            VariableSys.DistVel_Ratio_Dec = new double[VariableSys.DistVelCount];
            for (int i = 0; i < VariableSys.DistVelCount; i++)
            {
                VariableSys.DistVel_MinDist[i] = Ini_Sys.IniReadNum("DistVel", "MinDist" + (i + 1).ToString());
                VariableSys.DistVel_MaxDist[i] = Ini_Sys.IniReadNum("DistVel", "MaxDist" + (i + 1).ToString());
                VariableSys.DistVel_Ratio_LowVel[i] = Ini_Sys.IniReadNum("DistVel", "VelRatioLowVel" + (i + 1).ToString());
                VariableSys.DistVel_Ratio_HighVel[i] = Ini_Sys.IniReadNum("DistVel", "VelRatioHighVel" + (i + 1).ToString());
                VariableSys.DistVel_Ratio_Acc[i] = Ini_Sys.IniReadNum("DistVel", "VelRatioAcc" + (i + 1).ToString());
                VariableSys.DistVel_Ratio_Dec[i] = Ini_Sys.IniReadNum("DistVel", "VelRatioDec" + (i + 1).ToString());
            }

            // Turn
            VariableSys.dTurnPasteAngle = Ini_Sys.IniReadNum("TurnConfig", "PasteAngle");
            VariableSys.dTurnXIAngle = Ini_Sys.IniReadNum("TurnConfig", "XIAngle");
            VariableSys.dXSafeMinX = Ini_Sys.IniReadNum("TurnConfig", "XSafeMinX");
            VariableSys.dXSafeMaxX = Ini_Sys.IniReadNum("TurnConfig", "XSafeMaxX");

            //Position
            for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
            {
                this.R_RunParamMap[i].InitPos = Ini_Sys.IniReadNum("Position", string.Format("Init_R{0}_Deg", i + 1));
                this.Z_RunParamMap[i].SafeHeigh = Ini_Sys.IniReadNum("Position", $"SafeHeightZ{i + 1}");
                this.Z_RunParamMap[i].CamHeigh = Ini_Sys.IniReadNum("Position", $"CamHeightZ{i + 1}");
                this.Z_RunParamMap[i].PasteHeight = Ini_Sys.IniReadNum("Position", $"PasteHeightZ{i + 1}");
                this.Z_RunParamMap[i].ThrowHeight = Ini_Sys.IniReadNum("Position", $"ThrowHeightZ{i + 1}");

                this.Z_RunParamMap[i].ThrowPoint1.X = (float)Ini_Sys.IniReadNum("Position", string.Format("ThrowPoint{0}_1X", i + 1));
                this.Z_RunParamMap[i].ThrowPoint1.Y = (float)Ini_Sys.IniReadNum("Position", string.Format("ThrowPoint{0}_1Y", i + 1));
            }

            VariableSys.pReadyPoint = new PointF((float)Ini_Sys.IniReadNum("Position", "ReadyPointX"), (float)Ini_Sys.IniReadNum("Position", "ReadyPointY"));
            VariableSys.pTest1 = new PointF((float)Ini_Sys.IniReadNum("Position", "TestP1X"), (float)Ini_Sys.IniReadNum("Position", "TestP1Y"));
            VariableSys.pTest2 = new PointF((float)Ini_Sys.IniReadNum("Position", "TestP2X"), (float)Ini_Sys.IniReadNum("Position", "TestP2Y"));
            VariableSys.pTest3 = new PointF((float)Ini_Sys.IniReadNum("Position", "TestP3X"), (float)Ini_Sys.IniReadNum("Position", "TestP3Y"));
            VariableSys.pTest4 = new PointF((float)Ini_Sys.IniReadNum("Position", "TestP4X"), (float)Ini_Sys.IniReadNum("Position", "TestP4Y"));
            VariableSys.iThrowTime = (short)Ini_Sys.IniReadNum("TimeOut", "ThrowKeepTime");


            VariableSys.iThrowAlarmTime = (short)Ini_Sys.IniReadNum("TimeOut", "ThrowAlarmTime");
            VariableSys.iThrowAlarmAddTime = (int)Ini_Sys.IniReadNum("TimeOut", "ThrowAlarmAddTime");
            VariableSys.iSuckAlarmTime = (int)Ini_Sys.IniReadNum("TimeOut", "SuckAlarmTime");

            //VariableSys.dThrowDepth = Ini_Sys.IniReadNum("Position", "ThrowDepth");
            //VariableSys.dThrowDepth2 = Ini_Sys.IniReadNum("Position", "ThrowDepth2");

            //Statistics
            VariableSys.iTotalCount = (int)Ini_Sys.IniReadNum("Statistics", "Total");
            VariableSys.iNGCount = (int)Ini_Sys.IniReadNum("Statistics", "NGCount");
            //VisionCalibration
            //VariableSys.iNozzleCount = (short)Ini_Sys.IniReadNum("VisionCalibration", "NozzleCount");
            VariableSys.iNozzleCount = (short)Variable.NOZZLE_NUM;
            VariableSys.pNozzle_2_Cam = new PointF[VariableSys.iNozzleCount];
            VariableSys.pNozzle_2_CamLabel = new PointF();
            VariableSys.pLabelCam2MarkCam = new PointF();
            VariableSys.pDownMarkCoord = new PointF[VariableSys.iNozzleCount];
            VariableSys.pPasteCoord = new PointF[VariableSys.iNozzleCount];
            VariableSys.pUpMarkCoord = new PointF[VariableSys.iNozzleCount];
            VariableSys.pDownRotateCenter = new PointContour[VariableSys.iNozzleCount];
            VariableSys.pDownRotateCam = new PointF[VariableSys.iNozzleCount];
            VariableSys.rDownROI = new RectangleContour[Variable.NOZZLE_NUM];

            VariableSys.pLabelCam2MarkCam = new PointF((float)Ini_Sys.IniReadNum("VisionCalibration", "CamLabel_2_UpCam_X"), (float)Ini_Sys.IniReadNum("VisionCalibration", "CamLabel_2_UpCam_Y"));
            VariableSys.pNozzle_2_CamLabel = new PointF((float)Ini_Sys.IniReadNum("VisionCalibration", "Nozzle_2_CamLabel_X"), (float)Ini_Sys.IniReadNum("VisionCalibration", "Nozzle_2_CamLabel_Y"));

            for (int ii = 0; ii < VariableSys.iNozzleCount; ii++)
            {
                VariableSys.pNozzle_2_Cam[ii] = new PointF((float)Ini_Sys.IniReadNum("VisionCalibration", "Nozzle" + (ii + 1).ToString() + "_2_Cam_X"), (float)Ini_Sys.IniReadNum("VisionCalibration", "Nozzle" + (ii + 1).ToString() + "_2_Cam_Y"));
                VariableSys.pDownMarkCoord[ii] = new PointF((float)Ini_Sys.IniReadNum("VisionCalibration", "Nozzle" + (ii + 1).ToString() + "_DownCam_MarkX"), (float)Ini_Sys.IniReadNum("VisionCalibration", "Nozzle" + (ii + 1).ToString() + "_DownCam_MarkY"));
                VariableSys.pPasteCoord[ii] = new PointF((float)Ini_Sys.IniReadNum("VisionCalibration", "Nozzle" + (ii + 1).ToString() + "_Paste_X"), (float)Ini_Sys.IniReadNum("VisionCalibration", "Nozzle" + (ii + 1).ToString() + "_Paste_Y"));
                VariableSys.pUpMarkCoord[ii] = new PointF((float)Ini_Sys.IniReadNum("VisionCalibration", "Nozzle" + (ii + 1).ToString() + "_UpCam_MarkX"), (float)Ini_Sys.IniReadNum("VisionCalibration", "Nozzle" + (ii + 1).ToString() + "_UpCam_MarkY"));
                VariableSys.pDownRotateCenter[ii] = new PointContour((float)Ini_Sys.IniReadNum("VisionCalibration", "Nozzle" + (ii + 1).ToString() + "_RotateCenterX"), (float)Ini_Sys.IniReadNum("VisionCalibration", "Nozzle" + (ii + 1).ToString() + "_RotateCenterY"));

                VariableSys.pDownRotateCam[ii].X = (float)Ini_Sys.IniReadNum("VisionCalibration", $"Nozzle{ii + 1}_RotateCamX");
                VariableSys.pDownRotateCam[ii].Y = (float)Ini_Sys.IniReadNum("VisionCalibration", $"Nozzle{ii + 1}_RotateCamY");
                VariableSys.rDownROI[ii] = Ini_Sys.IniReadCamResolution("VisionCalibration", $"Nozzle{ii + 1}_ROI");
            }
            //RunOption

            VariableSys.bRunMode = (int)Ini_Sys.IniReadNum("RunOption", "Mode") == 0 ? false : true;
            VariableSys.iOutSideBadMark = (int)Ini_Sys.IniReadNum("RunOption", "OutSideBadMarkEN");
            VariableSys.bLabelOffsetEN = (int)Ini_Sys.IniReadNum("RunOption", "LabelOffsetEN") == 0 ? false : true;
            VariableSys.bSafeDoorEN = true;// (int)Ini_Sys.IniReadNum("RunOption", "SafeDoorEN") == 0 ? false : true;
            VariableSys.bAfterBreakEN = (int)Ini_Sys.IniReadNum("RunOption", "AfterBreakEN") == 0 ? false : true;
            VariableSys.bSystemIsOnLine = (int)Ini_Sys.IniReadNum("RunOption", "SystemIsOnLine") == 0 ? false : true;
            VariableSys.dFlowIN_OUT = (short)Ini_Sys.IniReadNum("RunOption", "FlowIN_OUT");
            VariableSys.dMaxOffsetX = Ini_Sys.IniReadNum("RunOption", "MaxOffsetX");
            VariableSys.dMaxOffsetY = Ini_Sys.IniReadNum("RunOption", "MaxOffsetY");
            VariableSys.dMaxOffsetR = Ini_Sys.IniReadNum("RunOption", "MaxOffsetR");
            XI_IndexG[0] = (short)Ini_Sys.IniReadNum("RunOption", "XI_LeftIndex");
            XI_IndexG[1] = (short)Ini_Sys.IniReadNum("RunOption", "XI_RightIndex");
            //机台坐标
            VariableSys.iAxisSource = (short)Ini_Sys.IniReadNum("RunOption", "AxisPosSource");
            //压力传感器
            VariableSys.bPressureEN = (int)Ini_Sys.IniReadNum("RunOption", "PressureEN") == 0 ? false : true; ;//false-不启用压力反馈 true-启用压力反馈

            //TimeOut
            VariableSys.iDelay_PASTE = (short)Ini_Sys.IniReadNum("TimeOut", "ReachPasteDelay");//
            VariableSys.iDelayReach = (short)Ini_Sys.IniReadNum("TimeOut", "ReachDelay");//
            VariableSys.iDelay_BeforeXI = (short)Ini_Sys.IniReadNum("TimeOut", "XIdelay");
            VariableSys.iDelay_XIOK = (short)Ini_Sys.IniReadNum("TimeOut", "XIOKdelay");
            VariableSys.iXIRetry = (short)Ini_Sys.IniReadNum("TimeOut", "XIRetry");
            VariableSys.iTimeOut_Feeder = Ini_Sys.IniReadNum("TimeOut", "FeederTimeout");
            VariableSys.iTimeOut_Normal = Ini_Sys.IniReadNum("TimeOut", "NormalTimeout");
            VariableSys.iDelayReached = (int)Ini_Sys.IniReadNum("TimeOut", "ReachedDelay");
            VariableSys.iUpCamDelay = (short)Ini_Sys.IniReadNum("TimeOut", "UpCamDelay");
            VariableSys.iDownCamDelay = (short)Ini_Sys.IniReadNum("TimeOut", "DownCamDelay");

            //SaveFile
            VariableSys.iPic_SaveIndex = (short)Ini_Sys.IniReadNum("SaveFile", "PicSaveIndex");
            VariableSys.sPath_PicSave = Ini_Sys.IniReadValue("SaveFile", "PicPath");
            VariableSys.sLogPath = Ini_Sys.IniReadValue("SaveFile", "LogFilePath");

            //VelMode
            VariableSys.iVelMode_Current_NO = (short)Ini_Sys.IniReadNum("VelMode", "CurrentVel");//速度模式 1-Run 2-Slow 3-Debug
            VariableSys.dRatio_Axis_X_LowVel = Ini_Sys.IniReadNum("VelMode", "AxisRatio_X_LowVel");
            VariableSys.dRatio_Axis_Y_LowVel = Ini_Sys.IniReadNum("VelMode", "AxisRatio_Y_LowVel");
            VariableSys.dRatio_Axis_Turn_LowVel = Ini_Sys.IniReadNum("VelMode", "AxisRatio_Turn_LowVel");
            VariableSys.dRatio_Axis_R_LowVel = Ini_Sys.IniReadNum("VelMode", "AxisRatio_R_LowVel");

            VariableSys.dRatio_Axis_X_HighVel = Ini_Sys.IniReadNum("VelMode", "AxisRatio_X_HighVel");
            VariableSys.dRatio_Axis_Y_HighVel = Ini_Sys.IniReadNum("VelMode", "AxisRatio_Y_HighVel");
            VariableSys.dRatio_Axis_Turn_HighVel = Ini_Sys.IniReadNum("VelMode", "AxisRatio_Turn_HighVel");
            VariableSys.dRatio_Axis_R_HighVel = Ini_Sys.IniReadNum("VelMode", "AxisRatio_R_HighVel");

            VariableSys.dRatio_Axis_X_Dec = Ini_Sys.IniReadNum("VelMode", "AxisRatio_X_Dec");
            VariableSys.dRatio_Axis_Y_Dec = Ini_Sys.IniReadNum("VelMode", "AxisRatio_Y_Dec");
            VariableSys.dRatio_Axis_Turn_Dec = Ini_Sys.IniReadNum("VelMode", "AxisRatio_Turn_Dec");
            VariableSys.dRatio_Axis_R_Dec = Ini_Sys.IniReadNum("VelMode", "AxisRatio_R_Dec");

            VariableSys.dRatio_Axis_X_Acc = Ini_Sys.IniReadNum("VelMode", "AxisRatio_X_Acc");
            VariableSys.dRatio_Axis_Y_Acc = Ini_Sys.IniReadNum("VelMode", "AxisRatio_Y_Acc");
            VariableSys.dRatio_Axis_Turn_Acc = Ini_Sys.IniReadNum("VelMode", "AxisRatio_Turn_Acc");
            VariableSys.dRatio_Axis_R_Acc = Ini_Sys.IniReadNum("VelMode", "AxisRatio_R_Acc");

            for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
            {
                this.R_RunParamMap[i].SetSpeedRatio(VariableSys.dRatio_Axis_R_LowVel, VariableSys.dRatio_Axis_R_HighVel, VariableSys.dRatio_Axis_R_Acc, VariableSys.dRatio_Axis_R_Dec);
                this.Z_RunParamMap[i].SetSpeedRatio(VariableSys.dRatio_Axis_R_LowVel, VariableSys.dRatio_Axis_R_HighVel, VariableSys.dRatio_Axis_R_Acc, VariableSys.dRatio_Axis_R_Dec);
            }

            VariableSys.VelMode_Debug = new Variable.VelMode(Ini_Sys.IniReadNum("VelMode", "DebugMode_LowVel"), Ini_Sys.IniReadNum("VelMode", "DebugMode_HighVel"), Ini_Sys.IniReadNum("VelMode", "DebugMode_Acc"), Ini_Sys.IniReadNum("VelMode", "DebugMode_Dec"));
            VariableSys.VelMode_Slow = new Variable.VelMode(Ini_Sys.IniReadNum("VelMode", "SlowMode_LowVel"), Ini_Sys.IniReadNum("VelMode", "SlowMode_HighVel"), Ini_Sys.IniReadNum("VelMode", "SlowMode_Acc"), Ini_Sys.IniReadNum("VelMode", "SlowMode_Dec"));
            VariableSys.VelMode_Run = new Variable.VelMode(Ini_Sys.IniReadNum("VelMode", "RunMode_LowVel"), Ini_Sys.IniReadNum("VelMode", "RunMode_HighVel"), Ini_Sys.IniReadNum("VelMode", "RunMode_Acc"), Ini_Sys.IniReadNum("VelMode", "RunMode_Dec"));

            if (VariableSys.iVelMode_Current_NO == 1)
            {
                VariableSys.VelMode_Current = new Variable.VelMode(VariableSys.VelMode_Run.LowVel, VariableSys.VelMode_Run.HighVel, VariableSys.VelMode_Run.Acc, VariableSys.VelMode_Run.Dec);
            }
            if (VariableSys.iVelMode_Current_NO == 2)
            {
                VariableSys.VelMode_Current = new Variable.VelMode(VariableSys.VelMode_Slow.LowVel, VariableSys.VelMode_Slow.HighVel, VariableSys.VelMode_Slow.Acc, VariableSys.VelMode_Slow.Dec);
            }
            if (VariableSys.iVelMode_Current_NO == 3)
            {
                VariableSys.VelMode_Current = new Variable.VelMode(VariableSys.VelMode_Debug.LowVel, VariableSys.VelMode_Debug.HighVel, VariableSys.VelMode_Debug.Acc, VariableSys.VelMode_Debug.Dec);
            }
            VariableSys.iVelMode_Current_NO_Manual = (short)Ini_Sys.IniReadNum("VelMode", "CurrentVel_Manual");//速度模式 1-Run 2-Slow 3-Debug
            VariableSys.VelMode_Debug_Manual = new Variable.VelMode(Ini_Sys.IniReadNum("VelMode", "DebugMode_LowVel_Manual"), Ini_Sys.IniReadNum("VelMode", "DebugMode_HighVel_Manual"), Ini_Sys.IniReadNum("VelMode", "DebugMode_Acc_Manual"), Ini_Sys.IniReadNum("VelMode", "DebugMode_Dec_Manual"));
            VariableSys.VelMode_Slow_Manual = new Variable.VelMode(Ini_Sys.IniReadNum("VelMode", "SlowMode_LowVel_Manual"), Ini_Sys.IniReadNum("VelMode", "SlowMode_HighVel_Manual"), Ini_Sys.IniReadNum("VelMode", "SlowMode_Acc_Manual"), Ini_Sys.IniReadNum("VelMode", "SlowMode_Dec_Manual"));
            VariableSys.VelMode_Run_Manual = new Variable.VelMode(Ini_Sys.IniReadNum("VelMode", "RunMode_LowVel_Manual"), Ini_Sys.IniReadNum("VelMode", "RunMode_HighVel_Manual"), Ini_Sys.IniReadNum("VelMode", "RunMode_Acc_Manual"), Ini_Sys.IniReadNum("VelMode", "RunMode_Dec_Manual"));
            VariableSys.VelMode_Test = new Variable.VelMode(Ini_Sys.IniReadNum("VelMode", "TESTMode_LowVel"), Ini_Sys.IniReadNum("VelMode", "TESTMode_HighVel"), Ini_Sys.IniReadNum("VelMode", "TESTMode_Acc"), Ini_Sys.IniReadNum("VelMode", "TESTMode_Dec"));
            VariableSys.VelMode_Wide = new Variable.VelMode(Ini_Sys.IniReadNum("VelMode", "Wide_LowVel"), Ini_Sys.IniReadNum("VelMode", "Wide_HighVel"), Ini_Sys.IniReadNum("VelMode", "Wide_Acc"), Ini_Sys.IniReadNum("VelMode", "Wide_Dec"));
            VariableSys.VelMode_Fly = new Variable.VelMode(Ini_Sys.IniReadNum("VelMode", "FlyMode_LowVel"), Ini_Sys.IniReadNum("VelMode", "FlyMode_HighVel"), Ini_Sys.IniReadNum("VelMode", "FlyMode_Acc"), Ini_Sys.IniReadNum("VelMode", "FlyMode_Dec"));
            VariableSys.VelMode_UpFly = new Variable.VelMode(Ini_Sys.IniReadNum("VelMode", "UpFlyMode_LowVel"), Ini_Sys.IniReadNum("VelMode", "UpFlyMode_HighVel"), Ini_Sys.IniReadNum("VelMode", "UpFlyMode_Acc"), Ini_Sys.IniReadNum("VelMode", "UpFlyMode_Dec"));


            if (VariableSys.iVelMode_Current_NO_Manual == 1)
            {
                VariableSys.VelMode_Current_Manual = new Variable.VelMode(VariableSys.VelMode_Run_Manual.LowVel, VariableSys.VelMode_Run_Manual.HighVel, VariableSys.VelMode_Run_Manual.Acc, VariableSys.VelMode_Run_Manual.Dec);
            }
            if (VariableSys.iVelMode_Current_NO_Manual == 2)
            {
                VariableSys.VelMode_Current_Manual = new Variable.VelMode(VariableSys.VelMode_Slow_Manual.LowVel, VariableSys.VelMode_Slow_Manual.HighVel, VariableSys.VelMode_Slow_Manual.Acc, VariableSys.VelMode_Slow_Manual.Dec);
            }
            if (VariableSys.iVelMode_Current_NO_Manual == 3)
            {
                VariableSys.VelMode_Current_Manual = new Variable.VelMode(VariableSys.VelMode_Debug_Manual.LowVel, VariableSys.VelMode_Debug_Manual.HighVel, VariableSys.VelMode_Debug_Manual.Acc, VariableSys.VelMode_Debug_Manual.Dec);
            }
            VariableSys.VelMode_Home_X = new Variable.VelMode(Ini_Sys.IniReadNum("VelMode", "HomeMode_LowVel_X"), Ini_Sys.IniReadNum("VelMode", "HomeMode_HighVel_X"), Ini_Sys.IniReadNum("VelMode", "HomeMode_Acc_X"), Ini_Sys.IniReadNum("VelMode", "HomeMode_Dec_X"));
            VariableSys.VelMode_Home_Y = new Variable.VelMode(Ini_Sys.IniReadNum("VelMode", "HomeMode_LowVel_Y"), Ini_Sys.IniReadNum("VelMode", "HomeMode_HighVel_Y"), Ini_Sys.IniReadNum("VelMode", "HomeMode_Acc_Y"), Ini_Sys.IniReadNum("VelMode", "HomeMode_Dec_Y"));
            VariableSys.VelMode_Home_R1 = new Variable.VelMode(Ini_Sys.IniReadNum("VelMode", "HomeMode_LowVel_R1"), Ini_Sys.IniReadNum("VelMode", "HomeMode_HighVel_R1"), Ini_Sys.IniReadNum("VelMode", "HomeMode_Acc_R1"), Ini_Sys.IniReadNum("VelMode", "HomeMode_Dec_R1"));
            VariableSys.VelMode_Home_R2 = new Variable.VelMode(Ini_Sys.IniReadNum("VelMode", "HomeMode_LowVel_R2"), Ini_Sys.IniReadNum("VelMode", "HomeMode_HighVel_R2"), Ini_Sys.IniReadNum("VelMode", "HomeMode_Acc_R2"), Ini_Sys.IniReadNum("VelMode", "HomeMode_Dec_R2"));
            VariableSys.VelMode_Home_Wide = new Variable.VelMode(Ini_Sys.IniReadNum("VelMode", "HomeMode_LowVel_Wide"), Ini_Sys.IniReadNum("VelMode", "HomeMode_HighVel_Wide"), Ini_Sys.IniReadNum("VelMode", "HomeMode_Acc_Wide"), Ini_Sys.IniReadNum("VelMode", "HomeMode_Dec_Wide"));
            VariableSys.VelMode_Home_XY = new Variable.VelMode(Ini_Sys.IniReadNum("VelMode", "HomeMode_LowVel_XY"), Ini_Sys.IniReadNum("VelMode", "HomeMode_HighVel_XY"), Ini_Sys.IniReadNum("VelMode", "HomeMode_Acc_XY"), Ini_Sys.IniReadNum("VelMode", "HomeMode_Dec_XY"));
            VariableSys.VelMode_Conveyor = new Variable.VelMode(Ini_Sys.IniReadNum("VelMode", "RunMode_LowVel_Con"), Ini_Sys.IniReadNum("VelMode", "RunMode_HighVel_Con"), Ini_Sys.IniReadNum("VelMode", "RunMode_Acc_Con"), Ini_Sys.IniReadNum("VelMode", "RunMode_Dec_Con"));
            VariableSys.VelMode_Conveyor_SlowDown = new Variable.VelMode(Ini_Sys.IniReadNum("VelMode", "SlowMode_LowVel_Con"), Ini_Sys.IniReadNum("VelMode", "SlowMode_HighVel_Con"), Ini_Sys.IniReadNum("VelMode", "SlowMode_Acc_Con"), Ini_Sys.IniReadNum("VelMode", "SlowMode_Dec_Con"));
            #endregion

            this.ReadZDTConfig();

            #region 显示UI

            pLanguage.Image = Properties.Resources.china;
            cB_Conveyor.Items.Add("中轨道");
            cB_Conveyor.SelectedIndex = 0;
            ChartPane.GraphPane.Title.Text = "机种名称:" + VariableSys.sProgramName;

            VariableSys.iNozzleCount = (short)Variable.NOZZLE_NUM;

            //基础校验页面
            if (VariableSys.iNozzleCount > 0)
            {
                for (int ii = 0; ii < VariableSys.iNozzleCount; ii++)
                {
                    cB_NozzleIndex2.Items.Add("Nozzle" + (ii + 1));
                    cB_NozzleIndex3.Items.Add("Nozzle" + (ii + 1));
                }
                cB_NozzleIndex2.Text = "Nozzle1";
                cB_NozzleIndex3.Text = "Nozzle1";
                tMarkDX.Text = VariableSys.pDownMarkCoord[0].X.ToString();
                tMarkDY.Text = VariableSys.pDownMarkCoord[0].Y.ToString();
                tPasteX.Text = VariableSys.pPasteCoord[0].X.ToString();
                tPasteY.Text = VariableSys.pPasteCoord[0].Y.ToString();
                tMarkUX.Text = VariableSys.pUpMarkCoord[0].X.ToString();
                tMarkUY.Text = VariableSys.pUpMarkCoord[0].Y.ToString();
                tRotateCenterX.Text = VariableSys.pDownRotateCenter[0].X.ToString();
                tRotateCenterY.Text = VariableSys.pDownRotateCenter[0].Y.ToString();
                tRotateCamX.Text = VariableSys.pDownRotateCam[0].X.ToString();
                tRotateCamY.Text = VariableSys.pDownRotateCam[0].Y.ToString();
                tDownCenterX.Text = VariableSys.pNozzle_2_Cam[0].X.ToString();
                tDownCenterY.Text = VariableSys.pNozzle_2_Cam[0].Y.ToString();
            }

            #region UI
            if (VariableSys.dFlowIN_OUT == 1)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bFlowInOut.Text = "L-in-R-out（2）";
                }
                else
                {
                    bFlowInOut.Text = "左进右出（两段式）";
                }
            }
            if (VariableSys.dFlowIN_OUT == 2)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bFlowInOut.Text = "R-in-L-out（2）";
                }
                else
                {
                    bFlowInOut.Text = "右进左出（两段式）";
                }
            }
            if (VariableSys.dFlowIN_OUT == 3)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bFlowInOut.Text = "L-in-L-out（2）";
                }
                else
                {
                    bFlowInOut.Text = "左进左出（两段式）";
                }

            }
            if (VariableSys.dFlowIN_OUT == 4)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bFlowInOut.Text = "R-in-R-out（2）";
                }
                else
                {
                    bFlowInOut.Text = "右进右出（两段式）";
                }
            }
            if (VariableSys.dFlowIN_OUT == 5)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bFlowInOut.Text = "L-in-R-out（3）";
                }
                else
                {
                    bFlowInOut.Text = "左进右出（三段式）";
                }
            }
            if (VariableSys.dFlowIN_OUT == 6)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bFlowInOut.Text = "R-in-L-out（3）";
                }
                else
                {
                    bFlowInOut.Text = "右进左出（三段式）";
                }
            }
            /////////////////////////////////////////////////
            if (VariableSys.iOutSideBadMark == 0)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bBadMark.Text = "BadMark:Out";
                }
                else
                {
                    bBadMark.Text = "BadMark:外部";
                }
            }
            if (VariableSys.iOutSideBadMark == 1)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bBadMark.Text = "BadMark:Scan";
                }
                else
                {
                    bBadMark.Text = "BadMark:扫描";
                }
            }
            if (VariableSys.iOutSideBadMark == 2)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bBadMark.Text = "BadMark:Out Fail2Scan";
                }
                else
                {
                    bBadMark.Text = "BadMark:外部失败自动切换到扫描";
                }
            }
            if (VariableSys.iOutSideBadMark == 3)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bBadMark.Text = "BadMark:None";
                }
                else
                {
                    bBadMark.Text = "BadMark:屏蔽";
                }
            }
            if (VariableSys.bSystemIsOnLine)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bLineStyle.Text = "InLine";
                }
                else
                {
                    bLineStyle.Text = "在线式";
                }
            }
            else
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bLineStyle.Text = "OffLine";
                }
                else
                {
                    bLineStyle.Text = "离线式";
                }
            }

            if (VariableSys.iAxisSource == 0)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bCoordSorce.Text = "Coord:Ecoder";
                }
                else
                {
                    bCoordSorce.Text = "系统坐标:编码器";
                }

            }
            if (VariableSys.iAxisSource == 1)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bCoordSorce.Text = "Coord:Planner";
                }
                else
                {
                    bCoordSorce.Text = "系统坐标:规划器";
                }

            }

            this.cbxEnableAnscXI.Checked = VariableSys.bEnableAsyncXI;
            this.cb_EnableGlassOffset.Checked = VariableSys.bEnableGlassOffset;
            this.cb_EnableCheck.Checked = VariableSys.bEnableVaccumCheck;
            this.cbLineOffset.Checked = VariableSys.bEnableLineOffset;
            this.cbThrowPut.Checked = VariableSys.bEnableThrowPut;

            imageSet.ShowToolbar = true;
            imageSet.ToolsShown = ViewerTools.All;
            imageUp.ToolsShown = ViewerTools.All;


            #endregion
            if (VariableSys.bSystemIsOnLine)
            {
                bLineStyle.BackColor = Color.LightGreen;
            }
            else
            {
                bLineStyle.BackColor = Color.Transparent;
            }
            comboBox_VelMode.SelectedIndex = VariableSys.iVelMode_Current_NO - 1;
            comboBox_Vel.SelectedIndex = VariableSys.iVelMode_Current_NO - 1;
            tVM_Vel_Low.Text = VariableSys.VelMode_Current.LowVel.ToString();
            tVM_Vel_High.Text = VariableSys.VelMode_Current.HighVel.ToString();
            tVM_Acc.Text = VariableSys.VelMode_Current.Acc.ToString();
            tVM_Dec.Text = VariableSys.VelMode_Current.Dec.ToString();

            tLowVelRatio_X.Text = VariableSys.dRatio_Axis_X_LowVel.ToString();
            tLowVelRatio_Y.Text = VariableSys.dRatio_Axis_Y_LowVel.ToString();
            tLowVelRatio_Turn.Text = VariableSys.dRatio_Axis_Turn_LowVel.ToString();
            tLowVelRatio_R.Text = VariableSys.dRatio_Axis_R_LowVel.ToString();

            tHighVelRatio_X.Text = VariableSys.dRatio_Axis_X_HighVel.ToString();
            tHighVelRatio_Y.Text = VariableSys.dRatio_Axis_Y_HighVel.ToString();
            tHighVelRatio_Turn.Text = VariableSys.dRatio_Axis_Turn_HighVel.ToString();
            tHighVelRatio_R.Text = VariableSys.dRatio_Axis_R_HighVel.ToString();

            tACCRatio_X.Text = VariableSys.dRatio_Axis_X_Acc.ToString();
            tACCRatio_Y.Text = VariableSys.dRatio_Axis_Y_Acc.ToString();
            tACCRatio_Turn.Text = VariableSys.dRatio_Axis_Turn_Acc.ToString();
            tACCRatio_R.Text = VariableSys.dRatio_Axis_R_Acc.ToString();

            tDECRatio_X.Text = VariableSys.dRatio_Axis_X_Dec.ToString();
            tDECRatio_Y.Text = VariableSys.dRatio_Axis_Y_Dec.ToString();
            tDECRatio_Turn.Text = VariableSys.dRatio_Axis_Turn_Dec.ToString();
            tDECRatio_R.Text = VariableSys.dRatio_Axis_R_Dec.ToString();

            comboBox_VelMode_Manual.SelectedIndex = VariableSys.iVelMode_Current_NO_Manual - 1;
            comboBox_Vel_Manual.SelectedIndex = VariableSys.iVelMode_Current_NO_Manual - 1;
            tVM_Vel_Low_Manual.Text = VariableSys.VelMode_Current_Manual.LowVel.ToString();
            tVM_Vel_High_Manual.Text = VariableSys.VelMode_Current_Manual.HighVel.ToString();
            tVM_Acc_Manual.Text = VariableSys.VelMode_Current_Manual.Acc.ToString();
            tVM_Dec_Manual.Text = VariableSys.VelMode_Current_Manual.Dec.ToString();

            tVM_Vel_Low_Test.Text = VariableSys.VelMode_Test.LowVel.ToString();
            tVM_Vel_High_Test.Text = VariableSys.VelMode_Test.HighVel.ToString();
            tVM_Acc_Test.Text = VariableSys.VelMode_Test.Acc.ToString();
            tVM_Dec_Test.Text = VariableSys.VelMode_Test.Dec.ToString();

            tVM_Vel_Low_Wide.Text = VariableSys.VelMode_Wide.LowVel.ToString();
            tVM_Vel_High_Wide.Text = VariableSys.VelMode_Wide.HighVel.ToString();
            tVM_Acc_Wide.Text = VariableSys.VelMode_Wide.Acc.ToString();
            tVM_Dec_Wide.Text = VariableSys.VelMode_Wide.Dec.ToString();

            tVM_Vel_Low_Home.Text = VariableSys.VelMode_Home_X.LowVel.ToString();
            tVM_Vel_High_Home.Text = VariableSys.VelMode_Home_X.HighVel.ToString();
            tVM_Acc_Home.Text = VariableSys.VelMode_Home_X.Acc.ToString();
            tVM_Dec_Home.Text = VariableSys.VelMode_Home_X.Dec.ToString();

            tVM_Vel_Low_Con.Text = VariableSys.VelMode_Conveyor.LowVel.ToString();
            tVM_Vel_High_Con.Text = VariableSys.VelMode_Conveyor.HighVel.ToString();
            tVM_Acc_Con.Text = VariableSys.VelMode_Conveyor.Acc.ToString();
            tVM_Dec_Con.Text = VariableSys.VelMode_Conveyor.Dec.ToString();

            dGV_CompareVel.Rows.Add(VariableSys.DistVelCount);
            for (int i = 0; i < VariableSys.DistVelCount; i++)
            {
                dGV_CompareVel.Rows[i].Cells[0].Value = VariableSys.DistVel_MinDist[i].ToString();
                dGV_CompareVel.Rows[i].Cells[1].Value = VariableSys.DistVel_MaxDist[i].ToString();
                dGV_CompareVel.Rows[i].Cells[2].Value = VariableSys.DistVel_Ratio_LowVel[i].ToString("F3");
                dGV_CompareVel.Rows[i].Cells[3].Value = VariableSys.DistVel_Ratio_HighVel[i].ToString("F3");
                dGV_CompareVel.Rows[i].Cells[4].Value = VariableSys.DistVel_Ratio_Acc[i].ToString("F3");
                dGV_CompareVel.Rows[i].Cells[5].Value = VariableSys.DistVel_Ratio_Dec[i].ToString("F3");
            }
            dGV_CompareVel.Rows[0].Selected = true;
            //功能选项
            cbxSelectR.SelectedIndex = 0;
            tR1InitDeg.Text = this.R_RunParamMap[(uint)cbxSelectR.SelectedIndex].InitPos.ToString("f3");
            tZSafeHeight.Text = this.Z_RunParamMap[(uint)cbxSelectR.SelectedIndex].SafeHeigh.ToString("f3");
            tCamZPos.Text = this.Z_RunParamMap[(uint)cbxSelectR.SelectedIndex].CamHeigh.ToString("f3");
            tPasteHeight.Text = this.Z_RunParamMap[(uint)cbxSelectR.SelectedIndex].PasteHeight.ToString("f3");
            tThrowHeight.Text = this.Z_RunParamMap[(uint)cbxSelectR.SelectedIndex].ThrowHeight.ToString("f3");

            tReachDelay.Text = VariableSys.iDelayReach.ToString();
            tXI2OKDelay.Text = VariableSys.iDelay_BeforeXI.ToString();
            tXIOKDelay.Text = VariableSys.iDelay_XIOK.ToString();
            tXIRetryTime.Text = VariableSys.iXIRetry.ToString();

            tThrowAlarmTime.Text = VariableSys.iThrowAlarmTime.ToString();
            tThrowAlarmAddTime.Text = VariableSys.iThrowAlarmAddTime.ToString();
            tSuckAlarmTime.Text = VariableSys.iSuckAlarmTime.ToString();

            tUpCamDelay.Text = VariableSys.iUpCamDelay.ToString();
            tDownCamDelay.Text = VariableSys.iDownCamDelay.ToString();

            tReachedDelay.Text = VariableSys.iDelayReached.ToString();

            if (VariableSys.iOutSideBadMark == 0)
            {
                //bBadMark.Text = "BadMark:外部";
                bBadMark.BackColor = Color.LightGreen;
            }
            if (VariableSys.iOutSideBadMark == 1)
            {
                //bBadMark.Text = "BadMark:扫描";
                bBadMark.BackColor = Color.LightGreen;
            }
            if (VariableSys.iOutSideBadMark == 2)
            {
                //bBadMark.Text = "BadMark:外部失败自动切换到扫描";
                bBadMark.BackColor = Color.LightGreen;
            }
            if (VariableSys.iOutSideBadMark == 3)
            {
                //bBadMark.Text = "BadMark:屏蔽";
                bBadMark.BackColor = Color.Transparent;
            }
            //
            if (VariableSys.bAfterBreakEN)
            {
                //bAfterRequest.Text = "后要板:侦测";
                bAfterRequest.BackColor = Color.LightGreen;
            }
            else
            {
                //bAfterRequest.Text = "后要板:屏蔽";
                bAfterRequest.BackColor = Color.Transparent;
            }
            if (VariableSys.bSystemIsOnLine)
            {
                //bLineStyle.Text = "在线式";
                bLineStyle.BackColor = Color.LightGreen;
            }
            else
            {
                //bLineStyle.Text = "离线式";
                bLineStyle.BackColor = Color.Transparent;
            }

            //机器坐标来源
            //if (VariableSys.iAxisSource == 0)
            //{
            //    bCoordSorce.Text = "系统坐标:编码器";
            //}
            //if (VariableSys.iAxisSource == 1)
            //{
            //    bCoordSorce.Text = "系统坐标:规划器";
            //}
            //加热模组

            tThrowTime.Text = VariableSys.iThrowTime.ToString();
            tTimeOut_Feeder.Text = VariableSys.iTimeOut_Feeder.ToString();
            tTimeOut_Flow.Text = VariableSys.iTimeOut_Normal.ToString();
            tVisionMaxOffsetX.Text = VariableSys.dMaxOffsetX.ToString();
            tVisionMaxOffsetY.Text = VariableSys.dMaxOffsetY.ToString();
            tVisionMaxOffsetR.Text = VariableSys.dMaxOffsetR.ToString();

            tTurnPasteAngle.Text = VariableSys.dTurnPasteAngle.ToString("f3");
            tTurnXIAngle.Text = VariableSys.dTurnXIAngle.ToString("f3");
            tMinXSafe.Text = VariableSys.dXSafeMinX.ToString("f3");
            tMaxXSafe.Text = VariableSys.dXSafeMaxX.ToString("f3");


            tThrowPoint1X.Text = this.Z_RunParamMap[0].ThrowPoint1.X.ToString();
            tThrowPoint1Y.Text = this.Z_RunParamMap[0].ThrowPoint1.Y.ToString();

            //图档保存
            tPath_PicSave.Text = VariableSys.sPath_PicSave;
            switch (VariableSys.iPic_SaveIndex)
            {
                case 0://none
                    rB_None.Checked = true;
                    break;
                case 1://OK
                    rB_OK.Checked = true;
                    break;
                case 2://NG
                    rB_NG.Checked = true;
                    break;
                case 3://all
                    rB_All.Checked = true;
                    break;
            }

            //烧机测试
            tTest1X.Text = VariableSys.pTest1.X.ToString();
            tTest1Y.Text = VariableSys.pTest1.Y.ToString();
            tTest2X.Text = VariableSys.pTest2.X.ToString();
            tTest2Y.Text = VariableSys.pTest2.Y.ToString();
            tTest3X.Text = VariableSys.pTest3.X.ToString();
            tTest3Y.Text = VariableSys.pTest3.Y.ToString();
            tTest4X.Text = VariableSys.pTest4.X.ToString();
            tTest4Y.Text = VariableSys.pTest4.Y.ToString();
            //上料&程式
            if (RTNN_Program == 0)
            {
                gB_JOB.Visible = true;
                gB_Feeder.Visible = true;
                #region 上料&程式
                lProgramName.Text = VariableSys.sProgramName;
                //this.UpdateFlyMode();
                this.cbSelectFeeder.SelectedIndex = 0;

                cB_LocalMode.Checked = JOB.bLocalMode;
                cB_UpFly.Checked = JOB.bUpFly;

                if (JOB.iLocalAlign > 0)
                    cb_LocalAlign.SelectedIndex = JOB.iLocalAlign - 1;

                //tSnapCount1.Text = JOB.SnapCount1.ToString();
                //tSnapCount2.Text = JOB.SnapCount2.ToString();
                //tAlignIndex1.Text = JOB.CamAlignOrigin_Nozzle1.ToString();
                //tAlignIndex2.Text = JOB.CamAlignOrigin_Nozzle2.ToString();

                //PASTE
                if (JOB.PasteCount != 0)
                {
                    dGV_JOB_U.Rows.Add(JOB.PasteCount);
                    for (int i = 0; i < JOB.PasteCount; i++)
                    {
                        dGV_JOB_U.Rows[i].Cells[0].Value = JOB.PasteName[i];
                        dGV_JOB_U.Rows[i].Cells[1].Value = JOB.Cam_Mark1Point[i].X.ToString("F3");
                        dGV_JOB_U.Rows[i].Cells[2].Value = JOB.Cam_Mark1Point[i].Y.ToString("F3");
                        dGV_JOB_U.Rows[i].Cells[3].Value = JOB.Cam_Mark2Point[i].X.ToString("F3");
                        dGV_JOB_U.Rows[i].Cells[4].Value = JOB.Cam_Mark2Point[i].Y.ToString("F3");
                        dGV_JOB_U.Rows[i].Cells[5].Value = JOB.OffsetX[i].ToString();
                        dGV_JOB_U.Rows[i].Cells[6].Value = JOB.OffsetY[i].ToString();
                        dGV_JOB_U.Rows[i].Cells[7].Value = JOB.OffsetR[i].ToString();
                        dGV_JOB_U.Rows[i].Cells[8].Value = JOB.UsedFeeder[i].ToString();
                        dGV_JOB_U.Rows[i].Cells[9].Value = JOB.UsedNz[i].ToString();
                        dGV_JOB_U.Rows[i].Cells[10].Value = JOB.FlyDelay[i].ToString();
                    }
                    dGV_JOB_U.Rows[0].Selected = true;
                }
                #endregion
            }

            #endregion

            #region 初始化相机
            rtn = CamInit();
            if (rtn != 0)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Camera Open Fail!", "Info");
                    PutInLog("Camera Open Fail!");
                }
                else
                {
                    MessageBox.Show("相机初始化失败!", "提示");
                    PutInLog("相机初始化失败!");
                }
                return 1;
            }
            #endregion

            #region 设置轴的脉冲比 和 速度比例

            X.axisDefine = 0;
            Y.axisDefine = 1;
            X.AxisRatio = VariableSys.dRatio_Axis_X;
            X.SetSpeedRatio(VariableSys.dRatio_Axis_X_LowVel, VariableSys.dRatio_Axis_X_HighVel, VariableSys.dRatio_Axis_X_Acc, VariableSys.dRatio_Axis_X_Dec);
            Y.AxisRatio = VariableSys.dRatio_Axis_Y;
            Y.SetSpeedRatio(VariableSys.dRatio_Axis_Y_LowVel, VariableSys.dRatio_Axis_Y_HighVel, VariableSys.dRatio_Axis_Y_Acc, VariableSys.dRatio_Axis_Y_Dec);

            Turn.AxisRatio = VariableSys.dRatio_Axis_Turn;
            Turn.SetSpeedRatio(VariableSys.dRatio_Axis_Turn_LowVel, VariableSys.dRatio_Axis_Turn_HighVel, VariableSys.dRatio_Axis_Turn_Acc, VariableSys.dRatio_Axis_Turn_Dec);

            for (uint nz = 0; nz < Variable.NOZZLE_NUM; ++nz)
            {
                this.R_RunParamMap[nz].AxisRatio = VariableSys.dRatio_Axis_R;
                this.R_RunParamMap[nz].SetSpeedRatio(VariableSys.dRatio_Axis_R_LowVel, VariableSys.dRatio_Axis_R_HighVel, VariableSys.dRatio_Axis_R_Acc, VariableSys.dRatio_Axis_R_Dec);

                this.Z_RunParamMap[nz].AxisRatio = VariableSys.dRatio_Axis_Z;
                this.Z_RunParamMap[nz].SetSpeedRatio(VariableSys.dRatio_Axis_R_LowVel, VariableSys.dRatio_Axis_R_HighVel, VariableSys.dRatio_Axis_R_Acc, VariableSys.dRatio_Axis_R_Dec);
            }

            #endregion
            LightOFF_U();
            LightOFF_D();
            OpenBtnLight(2);
            if (VariableSys.LanguageFlag == 1)
            {
                MessageBox.Show("Pls confirm no product inside the Machine!", "Info");
                MessageBox.Show("Start reseting!", "Info");
            }
            else
            {
                MessageBox.Show("请确认机台轨道内无产品!", "提示");
                MessageBox.Show("机台开始回零!", "提示");
            }

            #region 机台回零
            rtn = AxisGoHome(5 * 60 * 1000);

            if (rtn != 0)
            {
                MessageBox.Show("机台回零失败!", "Info");
                PutInLog("机台回零失败");

                return 1;
            }
            #endregion
            cB_Trim.SelectedIndex = 0;
            fm.Close();
            OpenBtnLight(0);
            return 0;
        }

        //从系统文件夹中读取******************************************
        public short InitJob(string JobName)
        {
            try
            {
                bool OKNG = false;
                bool bFound = false;
                JobFile = new IniFile(Variable.sPath_SYS_JOBFILE + "\\" + JobName + "\\Job" + ".ini");

                JOB.bLocalMode = JobFile.IniReadNum("JOB", "IsLocalMode") == 1 ? true : false;
                JOB.iLocalAlign = (int)JobFile.IniReadNum("JOB", "LocalAlign");

                JOB.bUpFly = JobFile.IniReadNum("JOB", "IsUpFly") == 1 ? true : false;

                if (JOB.iLocalAlign == 1)
                {
                    Common.SerializableHelper<GlobalMarkModule> helper = new Common.SerializableHelper<GlobalMarkModule>(JOB.GlobalConfig);
                    JOB.GlobalConfig = helper.DeXMLSerialize(Variable.sPath_SYS_Program + "\\" + lProgramName.Text + "\\" + "JOBFILE\\Global.xml");
                }

                JOB.PasteCount = (short)JobFile.IniReadNum("JOB", "PASTECount");
                JOB.PasteName = new string[JOB.PasteCount];
                JOB.iUpCCDResult = new short[JOB.PasteCount];
                JOB.OffsetX = new double[JOB.PasteCount];
                JOB.OffsetY = new double[JOB.PasteCount];
                JOB.OffsetR = new double[JOB.PasteCount];
                JOB.UsedFeeder = new int[JOB.PasteCount];
                JOB.UsedNz = new int[JOB.PasteCount];
                JOB.FlyDelay = new double[JOB.PasteCount];

                //JOB.PASTEInfo = new Variable.PASTAE[JOB.PasteCount];
                JOB.PASTEInfo_List = new List<Variable.PASTAE>();
                JOB.Cam_Mark1Point = new PointF[JOB.PasteCount];
                JOB.Cam_Mark2Point = new PointF[JOB.PasteCount];
                for (int i = 0; i < JOB.PasteCount; i++)
                {
                    JOB.PasteName[i] = JobFile.IniReadValue("JOB", "PASTEName" + (i + 1).ToString());
                    JOB.OffsetX[i] = JobFile.IniReadNum("JOB", "OffsetX" + (i + 1).ToString());
                    JOB.OffsetY[i] = JobFile.IniReadNum("JOB", "OffsetY" + (i + 1).ToString());
                    JOB.OffsetR[i] = JobFile.IniReadNum("JOB", "OffsetR" + (i + 1).ToString());
                    JOB.UsedFeeder[i] = (int)JobFile.IniReadNum("JOB", "UsedFeeder" + (i + 1).ToString());
                    JOB.UsedNz[i] = (int)JobFile.IniReadNum("JOB", "UsedNz" + (i + 1).ToString());
                    JOB.FlyDelay[i] = JobFile.IniReadNum("JOB", $"FlyDelay{i + 1}");

                    iTemp0 = JOB.PASTEInfo_List.Count;
                    if (iTemp0 == 0)
                    {
                        JOB.PASTEInfo_List.Add(ReadXls2Paste(Variable.sPath_SYS_PASTE + "\\" + JOB.PasteName[i], ref OKNG));
                    }
                    bFound = false;
                    for (int j = 0; j < JOB.PASTEInfo_List.Count; j++)
                    {
                        if (JOB.PASTEInfo_List[j].PasteName == JOB.PasteName[i])
                        {
                            bFound = true;

                            break;
                        }
                    }
                    if (!bFound)
                    {
                        JOB.PASTEInfo_List.Add(ReadXls2Paste(Variable.sPath_SYS_PASTE + "\\" + JOB.PasteName[i], ref OKNG));
                        if (!OKNG)
                        {
                            return 1;
                        }
                    }
                    JOB.Cam_Mark1Point[i].X = (float)JobFile.IniReadNum("JOB", "CamMark1X" + (i + 1).ToString());
                    JOB.Cam_Mark1Point[i].Y = (float)JobFile.IniReadNum("JOB", "CamMark1Y" + (i + 1).ToString());
                    JOB.Cam_Mark2Point[i].X = (float)JobFile.IniReadNum("JOB", "CamMark2X" + (i + 1).ToString());
                    JOB.Cam_Mark2Point[i].Y = (float)JobFile.IniReadNum("JOB", "CamMark2Y" + (i + 1).ToString());

                    //GC.Collect();
                }
                RUN_PASTEInfo = JOB.PASTEInfo_List.ToArray();
                //PASTEInfo
                JOB.PASTEInfo = new Variable.PASTAE[JOB.PasteCount];
                for (int i = 0; i < JOB.PasteCount; i++)
                {
                    JOB.iUpCCDResult[i] = 0;
                    for (int j = 0; j < RUN_PASTEInfo.Length; j++)
                    {
                        if (JOB.PasteName[i] == RUN_PASTEInfo[j].PasteName)
                        {
                            JOB.PASTEInfo[i].bMark1ED = false;
                            JOB.PASTEInfo[i].bMark2ED = false;
                            JOB.PASTEInfo[i].iPasteED = new int[RUN_PASTEInfo[j].iPasteED.Length];
                            JOB.PASTEInfo[i].iBadMarkED = new int[RUN_PASTEInfo[j].iPasteED.Length];
                            JOB.PASTEInfo[i].TransformedPoints = new PointF[RUN_PASTEInfo[j].iPasteED.Length];
                            JOB.PASTEInfo[i].TransformedBadMarkPoints = new PointF[RUN_PASTEInfo[j].iPasteED.Length];
                            break;
                        }
                    }
                }
                return 0;
            }
            catch
            {
                return 1;
            }

        }

        public short LoadFeeder(string program, int fdIndex)
        {
            bool OKNG = false;
            string FeederName = fdIndex == 0 ? "Feeder_Left" : "Feeder_Right";
            Feeder[fdIndex] = new Variable.FEEDER();
            IniFile feederIni = new IniFile($"{Variable.sPath_SYS_Program}\\{program}\\{FeederName}\\Feeder.ini");

            Feeder[fdIndex].bReachXI = feederIni.IniReadBool("FFEDER", "ReachXI");

            Feeder[fdIndex].Delay = (short)feederIni.IniReadNum("FFEDER", "Delay");
            Feeder[fdIndex].PN = feederIni.IniReadValue("FFEDER", "PN");
            string label = $"{ Variable.sPath_SYS_Program}\\{program}\\{FeederName}\\Label";
            Feeder[fdIndex].Label = ReadXls2Label(label, ref OKNG);
            Feeder[fdIndex].PointCount = (short)feederIni.IniReadNum("FFEDER", "PosCount");
            Feeder[fdIndex].XI_Degree = new double[Feeder[fdIndex].PointCount];
            Feeder[fdIndex].Cam_Degree = feederIni.IniReadNum("FFEDER", "Cam_Degree");
            Feeder[fdIndex].CamPoints = new PointF[Feeder[fdIndex].PointCount];
            Feeder[fdIndex].XIHeight = new List<List<double>>();

            Feeder[fdIndex].ReachSensorIndex = new short[Feeder[fdIndex].PointCount];
            Feeder[fdIndex].StandardSuckPos = feederIni.IniReadPoint("FEEDER", "StandardSuckPos");

            for (int i = 0; i < Feeder[fdIndex].CamPoints.Length; i++)
            {
                Feeder[fdIndex].CamPoints[i].X = (float)feederIni.IniReadNum("FFEDER", "CamX" + (i + 1).ToString());
                Feeder[fdIndex].CamPoints[i].Y = (float)feederIni.IniReadNum("FFEDER", "CamY" + (i + 1).ToString());
                Feeder[fdIndex].XIHeight.Add(new List<double>());

                for (int nz = 0; nz < Variable.NOZZLE_NUM; ++nz)
                {
                    Feeder[fdIndex].XIHeight[i].Add(feederIni.IniReadNum("FFEDER", $"XIHeightZ{nz + 1}_{i + 1}"));
                }

                Feeder[fdIndex].ReachSensorIndex[i] = (short)feederIni.IniReadNum("FFEDER", "ReachSensorIndex" + (i + 1).ToString());
                Feeder[fdIndex].XI_Degree[i] = feederIni.IniReadNum("FFEDER", $"XIDegree{i + 1}");
            }
            if (!OKNG)
            {
                return 1;
            }

            return 0;
        }

        public void SaveFeeder(string program, int fdIndex)
        {
            string FeederName = fdIndex == 0 ? "Feeder_Left" : "Feeder_Right";
            IniFile feederIni = new IniFile($"{Variable.sPath_SYS_Program}\\{program}\\{FeederName}\\Feeder.ini");

            Feeder[fdIndex].Delay = short.Parse(tFeederDelay1.Text);

            Feeder[fdIndex].bReachXI = cB_ReachXI1.Checked;
            Feeder[fdIndex].PN = lLabel_Left.Text;
            Feeder[fdIndex].Cam_Degree = double.Parse(tCamDegree1.Text);
            Feeder[fdIndex].PointCount = (short)(dGV_FeederLeft.Rows.Count - 1);
            Feeder[fdIndex].CamPoints = new PointF[Feeder[fdIndex].PointCount];

            Feeder[fdIndex].XIHeight = new List<List<double>>();

            Feeder[fdIndex].ReachSensorIndex = new short[Feeder[fdIndex].PointCount];
            Feeder[fdIndex].XI_Degree = new double[Feeder[fdIndex].PointCount];

            feederIni.IniWriteNumber("FFEDER", "Delay", Feeder[fdIndex].Delay);
            feederIni.IniWriteNumber("FFEDER", "PosCount", Feeder[fdIndex].PointCount);
            feederIni.IniWritePoint("FEEDER", "StandardSuckPos", Feeder[fdIndex].StandardSuckPos);
            for (int i = 0; i < Feeder[fdIndex].PointCount; i++)
            {
                Feeder[fdIndex].CamPoints[i].X = float.Parse(dGV_FeederLeft.Rows[i].Cells[0].Value.ToString());
                Feeder[fdIndex].CamPoints[i].Y = float.Parse(dGV_FeederLeft.Rows[i].Cells[1].Value.ToString());
                Feeder[fdIndex].XIHeight.Add(new List<double>());

                for (int nz = 0; nz < Variable.NOZZLE_NUM; ++nz)
                {
                    Feeder[fdIndex].XIHeight[i].Add(double.Parse(dGV_FeederLeft.Rows[i].Cells[2 + nz].Value.ToString()));
                    feederIni.IniWriteNumber("FFEDER", $"XIHeightZ{nz + 1}_{i + 1}", Feeder[fdIndex].XIHeight[i][nz]);
                }

                Feeder[fdIndex].ReachSensorIndex[i] = short.Parse(dGV_FeederLeft.Rows[i].Cells[2 + Variable.NOZZLE_NUM].Value.ToString());
                Feeder[fdIndex].XI_Degree[i] = short.Parse(dGV_FeederLeft.Rows[i].Cells[3 + Variable.NOZZLE_NUM].Value.ToString());
                feederIni.IniWriteNumber("FFEDER", "CamX" + (i + 1).ToString(), Feeder[fdIndex].CamPoints[i].X);
                feederIni.IniWriteNumber("FFEDER", "CamY" + (i + 1).ToString(), Feeder[fdIndex].CamPoints[i].Y);
                feederIni.IniWriteNumber("FFEDER", "ReachSensorIndex" + (i + 1).ToString(), Feeder[fdIndex].ReachSensorIndex[i]);
                feederIni.IniWriteNumber("FFEDER", $"XIDegree{i + 1}", Feeder[fdIndex].XI_Degree[i]);
            }

            feederIni.IniWriteNumber("FFEDER", "ReachXI", Feeder[fdIndex].bReachXI == true ? 1 : 0);
            feederIni.IniWriteValue("FFEDER", "PN", Feeder[fdIndex].PN);
        }

        public void ShowFeeder(int feeder)
        {
            DelDGV(dGV_FeederLeft);
            tFeederDelay1.Text = Feeder[feeder].Delay.ToString();
            cB_ReachXI1.Checked = Feeder[feeder].bReachXI;
            lLabel_Left.Text = Feeder[feeder].PN;
            tCamDegree1.Text = Feeder[feeder].Cam_Degree.ToString();
            if (Feeder[feeder].PointCount != 0)
            {
                dGV_FeederLeft.Rows.Add(Feeder[feeder].PointCount);
                for (int j = 0; j < Feeder[feeder].PointCount; j++)
                {
                    dGV_FeederLeft.Rows[j].Cells[0].Value = Feeder[feeder].CamPoints[j].X.ToString("F3");
                    dGV_FeederLeft.Rows[j].Cells[1].Value = Feeder[feeder].CamPoints[j].Y.ToString("F3");

                    for (int nz = 0; nz < Variable.NOZZLE_NUM; nz++)
                    {
                        dGV_FeederLeft.Rows[j].Cells[2 + nz].Value = Feeder[feeder].XIHeight[j][nz].ToString("f3");
                    }

                    dGV_FeederLeft.Rows[j].Cells[2 + Variable.NOZZLE_NUM].Value = Feeder[feeder].ReachSensorIndex[j].ToString();
                    dGV_FeederLeft.Rows[j].Cells[3 + Variable.NOZZLE_NUM].Value = Feeder[feeder].XI_Degree[j].ToString();
                }
                dGV_FeederLeft.Rows[0].Selected = true;
            }
        }
        //从指定路径文件夹中读取******************************************
        public short InitProgram(string ProgramName)//初始化程式 从 程式文件夹
        {
            short rtn = 0;
            string ProgramPath = Variable.sPath_SYS_Program + "\\" + ProgramName;
            if (Directory.Exists(Variable.sPath_SYS_Program + "\\" + ProgramName) && (ProgramName != ""))
            {
                try
                {
                    short sss = InitJob(ProgramPath + "\\JOBFILE", ProgramPath + "\\PASTE");
                    if (sss != 0)
                        return sss;
                }
                catch
                {
                }
                try
                {
                    LoadFeeder(ProgramName, 0);
                }
                catch
                {
                }
                try
                {
                    LoadFeeder(ProgramName, 1);
                }
                catch
                {
                }
                return 0;
            }
            else
            {
                return 1;
            }

        }

        /// <summary>
        /// 初始化JOB 文件
        /// </summary>
        /// <param name="JobNamePath"></param>
        /// <param name="PasteBasePath"></param>
        /// <returns></returns>
        public short InitJob(string JobNamePath, string PasteBasePath)//JobFile Paste
        {
            try
            {
                bool OKNG = false;
                bool bFound = false;
                JobFile = new IniFile(JobNamePath + "\\Job" + ".ini");

                JOB.bLocalMode = JobFile.IniReadNum("JOB", "IsLocalMode") == 1 ? true : false;
                JOB.bUpFly = JobFile.IniReadNum("JOB", "IsUpFly") == 1 ? true : false;
                JOB.iLocalAlign = (int)JobFile.IniReadNum("JOB", "LocalAlign");

                if (JOB.iLocalAlign == 1)
                {
                    Common.SerializableHelper<GlobalMarkModule> helper = new Common.SerializableHelper<GlobalMarkModule>(JOB.GlobalConfig);
                    JOB.GlobalConfig = helper.DeXMLSerialize(JobNamePath + "\\Global.xml");
                }

                JOB.PasteCount = (short)JobFile.IniReadNum("JOB", "PASTECount");
                JOB.PasteName = new string[JOB.PasteCount];
                JOB.iUpCCDResult = new short[JOB.PasteCount];
                JOB.OffsetX = new double[JOB.PasteCount];
                JOB.OffsetY = new double[JOB.PasteCount];
                JOB.OffsetR = new double[JOB.PasteCount];
                JOB.UsedFeeder = new int[JOB.PasteCount];
                JOB.UsedNz = new int[JOB.PasteCount];
                JOB.FlyDelay = new double[JOB.PasteCount];

                //JOB.PASTEInfo = new Variable.PASTAE[JOB.PasteCount];
                JOB.PASTEInfo_List = new List<Variable.PASTAE>();
                JOB.PASTEInfo_List.Clear();
                JOB.Cam_Mark1Point = new PointF[JOB.PasteCount];
                JOB.Cam_Mark2Point = new PointF[JOB.PasteCount];
                for (int i = 0; i < JOB.PasteCount; i++)
                {
                    JOB.PasteName[i] = JobFile.IniReadValue("JOB", "PASTEName" + (i + 1).ToString());
                    JOB.OffsetX[i] = JobFile.IniReadNum("JOB", "OffsetX" + (i + 1).ToString());
                    JOB.OffsetY[i] = JobFile.IniReadNum("JOB", "OffsetY" + (i + 1).ToString());
                    JOB.OffsetR[i] = JobFile.IniReadNum("JOB", "OffsetR" + (i + 1).ToString());
                    JOB.UsedFeeder[i] = (int)JobFile.IniReadNum("JOB", "UsedFeeder" + (i + 1).ToString());
                    JOB.UsedNz[i] = (int)JobFile.IniReadNum("JOB", "UsedNz" + (i + 1).ToString());
                    JOB.FlyDelay[i] = JobFile.IniReadNum("JOB", $"FlyDelay{i + 1}");

                    iTemp0 = JOB.PASTEInfo_List.Count;
                    if (iTemp0 == 0)
                    {
                        JOB.PASTEInfo_List.Add(ReadXls2Paste(PasteBasePath + "\\" + JOB.PasteName[i], ref OKNG));
                    }
                    bFound = false;
                    for (int j = 0; j < JOB.PASTEInfo_List.Count; j++)
                    {
                        if (JOB.PASTEInfo_List[j].PasteName == JOB.PasteName[i])
                        {
                            bFound = true;

                            break;
                        }
                    }
                    if (!bFound)
                    {
                        JOB.PASTEInfo_List.Add(ReadXls2Paste(PasteBasePath + "\\" + JOB.PasteName[i], ref OKNG));
                        if (!OKNG)
                        {
                            return 1;
                        }
                    }
                    JOB.Cam_Mark1Point[i].X = (float)JobFile.IniReadNum("JOB", "CamMark1X" + (i + 1).ToString());
                    JOB.Cam_Mark1Point[i].Y = (float)JobFile.IniReadNum("JOB", "CamMark1Y" + (i + 1).ToString());
                    JOB.Cam_Mark2Point[i].X = (float)JobFile.IniReadNum("JOB", "CamMark2X" + (i + 1).ToString());
                    JOB.Cam_Mark2Point[i].Y = (float)JobFile.IniReadNum("JOB", "CamMark2Y" + (i + 1).ToString());
                }
                RUN_PASTEInfo = JOB.PASTEInfo_List.ToArray();
                //PASTEInfo
                JOB.PASTEInfo = new Variable.PASTAE[JOB.PasteCount];
                for (int i = 0; i < JOB.PasteCount; i++)
                {
                    JOB.iUpCCDResult[i] = 0;
                    for (int j = 0; j < RUN_PASTEInfo.Length; j++)
                    {
                        if (JOB.PasteName[i] == RUN_PASTEInfo[j].PasteName)
                        {
                            JOB.PASTEInfo[i].bMark1ED = false;
                            JOB.PASTEInfo[i].bMark2ED = false;
                            JOB.PASTEInfo[i].iPasteED = new int[RUN_PASTEInfo[j].iPasteED.Length];
                            JOB.PASTEInfo[i].iBadMarkED = new int[RUN_PASTEInfo[j].iPasteED.Length];
                            JOB.PASTEInfo[i].TransformedPoints = new PointF[RUN_PASTEInfo[j].iPasteED.Length];
                            JOB.PASTEInfo[i].TransformedBadMarkPoints = new PointF[RUN_PASTEInfo[j].iPasteED.Length];
                            break;
                        }
                    }
                }
                return 0;
            }
            catch (Exception a)
            {
                return 1;
            }
        }

        public static void InitializeWorkbook(string filepath)
        {
            try
            {
                using (FileStream file = new FileStream(filepath, FileMode.OpenOrCreate, FileAccess.ReadWrite))
                {
                    hssfworkbook = new HSSFWorkbook(file);
                }
                //Create a entry of DocumentSummaryInformation
                DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
                dsi.Company = "Hostar Team";
                hssfworkbook.DocumentSummaryInformation = dsi;
                //Create a entry of SummaryInformation
                SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
                si.Subject = "DataSave";
                hssfworkbook.SummaryInformation = si;
            }
            catch (Exception ex) { Debug.WriteLine(ex.Message); }
        }

        private void CreatXls(string filepath)//创建xls
        {
            hssfworkbook = new HSSFWorkbook();
            FileStream file = new FileStream(filepath, FileMode.Create);
            hssfworkbook.CreateSheet("PASTE");
            hssfworkbook.Write(file);
            file.Close();
        }
        private void AddRowHeader(DataGridView a, bool canAdd = true)
        {
            int rowCount = 0;
            if (canAdd)
                rowCount = a.Rows.Count - 1;
            else
                rowCount = a.Rows.Count;

            //添加行号
            for (int i = 0; i < rowCount; i++)
            {
                int j = i + 1;
                a.Rows[i].HeaderCell.Value = j.ToString();
            }
        }
        public short PutInLog(string li)//记录Log 信息
        {
            string str = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            string logname = DateTime.Now.ToString("yyyy-MM-dd");

            try
            {
                if (!Directory.Exists(VariableSys.sLogPath))
                {
                    Directory.CreateDirectory(VariableSys.sLogPath);
                }
                StreamWriter sw = File.AppendText(VariableSys.sLogPath + logname + ".txt");
                sw.Write(str + " " + li + "\r\n");
                sw.Close();
                if (rT_Log.Lines.Length > 2000)
                {
                    rT_Log.Clear();
                }
                rT_Log.Text = str + " " + li + "\r\n" + rT_Log.Text;
            }
            catch
            {

            }
            return 0;
        }
        public void PutInLog(string strLogPath, string FileName, string Context)
        {
            string str = DateTime.Now.Year.ToString("0000") + "/"
               + DateTime.Now.Month.ToString("00") + "/"
               + DateTime.Now.Day.ToString("00") + " "
               + DateTime.Now.Hour.ToString("00") + ":"
               + DateTime.Now.Minute.ToString("00") + ":"
               + DateTime.Now.Second.ToString("00");
            string directPath = string.Format("{0}{1}{2}{3}\\", strLogPath, DateTime.Now.Year.ToString("0000"),
                DateTime.Now.Month.ToString("00"), DateTime.Now.Day.ToString("00"));
            string fullFileName = string.Format("{0}{1}{2}{3}\\{4}.txt", strLogPath, DateTime.Now.Year.ToString("0000"),
                DateTime.Now.Month.ToString("00"), DateTime.Now.Day.ToString("00"), FileName);
            try
            {
                if (!Directory.Exists(directPath))
                {
                    Directory.CreateDirectory(directPath);
                }
                StreamWriter sw = File.AppendText(fullFileName);
                sw.Write(str + " " + Context + "\r\n");
                sw.Close();
            }
            catch
            {
            }
        }
        public string GetDataTime()
        {
            string DataTime =
            DateTime.Now.Year.ToString("0000") + "/"
                + DateTime.Now.Month.ToString("00") + "/"
                + DateTime.Now.Day.ToString("00") + " "
                + DateTime.Now.Hour.ToString("00") + ":"
                + DateTime.Now.Minute.ToString("00") + ":"
                + DateTime.Now.Second.ToString("00");
            return DataTime;
        }
        private PointF[] ExpandtoAddPoints(PointF[] Points2Expand, PointF Origin, PointF XCoord, PointF YCoord, short XCountIncluded, short YCountIncluded)
        {
            List<PointF> Expand2AddPoints = new List<PointF>();
            PointF[,] ExpandedPoints = new PointF[XCountIncluded, YCountIncluded];
            PointF TempX = new PointF();
            PointF TempY = new PointF();
            for (int j = 0; j < YCountIncluded; j++)
            {
                for (int i = 0; i < XCountIncluded; i++)
                {

                    ExpandedPoints[i, j] = new PointF();
                    if (XCountIncluded == 1)
                    {
                        TempX.X = Origin.X;
                        TempX.Y = Origin.Y;
                    }
                    else
                    {
                        TempX.X = (XCoord.X - Origin.X) * i / (XCountIncluded - 1) + Origin.X;
                        TempX.Y = (XCoord.Y - Origin.Y) * i / (XCountIncluded - 1) + Origin.Y;
                    }

                    if (YCountIncluded == 1)
                    {
                        TempY.X = Origin.X;
                        TempY.Y = Origin.Y;
                    }
                    else
                    {
                        TempY.X = (YCoord.X - Origin.X) * j / (YCountIncluded - 1) + Origin.X;
                        TempY.Y = (YCoord.Y - Origin.Y) * j / (YCountIncluded - 1) + Origin.Y;
                    }
                    ExpandedPoints[i, j].X = TempX.X + TempY.X - Origin.X;
                    ExpandedPoints[i, j].Y = TempX.Y + TempY.Y - Origin.Y;
                    if (i != 0 || j != 0)
                    {
                        for (int k = 0; k < Points2Expand.Length; k++)
                        {
                            Expand2AddPoints.Add(new PointF(Points2Expand[k].X + ExpandedPoints[i, j].X - Origin.X, Points2Expand[k].Y + ExpandedPoints[i, j].Y - Origin.Y));
                        }
                    }
                }
            }
            return Expand2AddPoints.ToArray();
        }

        public short WriteXls2Data_Paste(string PasteNamePath)
        {
            string sPasteName = PasteNamePath.Substring(PasteNamePath.LastIndexOf("\\") + 1);
            //创建程序文件夹
            if (!Directory.Exists(PasteNamePath))
            {
                Directory.CreateDirectory(PasteNamePath);
            }
            string filepath = PasteNamePath + "\\PASTE.xls";

            if (!File.Exists(filepath))
            {
                CreatXls(filepath);
            }

            FileStream file = new FileStream(filepath, FileMode.OpenOrCreate, FileAccess.ReadWrite);
            if (hssfworkbook.Count > 0)
            {
                hssfworkbook.RemoveAt(0);
            }
            #region Init & BadMark
            try
            {
                PasteInfo.Align1.WriteVisionFile(PasteNamePath + "\\1.png");
            }
            catch
            {

            }

            try
            {
                PasteInfo.Align2.WriteVisionFile(PasteNamePath + "\\2.png");
            }
            catch
            {

            }
            try
            {
                PasteInfo.BadMark_Image.WriteVisionFile(PasteNamePath + "\\BadMark.png");
            }
            catch
            {

            }
            #endregion
            #region Corner Init 1
            try
            {
                PasteInfo.Corner_H1_Align1.WriteVisionFile(PasteNamePath + "\\H1_Init_Align1.png");
            }
            catch
            {

            }
            try
            {
                PasteInfo.Corner_H2_Align1.WriteVisionFile(PasteNamePath + "\\H2_Init_Align1.png");
            }
            catch
            {

            }
            try
            {
                PasteInfo.Corner_V1_Align1.WriteVisionFile(PasteNamePath + "\\V1_Init_Align1.png");
            }
            catch
            {

            }
            try
            {
                PasteInfo.Corner_V2_Align1.WriteVisionFile(PasteNamePath + "\\V2_Init_Align1.png");
            }
            catch
            {

            }
            #endregion
            #region Corner Init 2
            try
            {
                PasteInfo.Corner_H1_Align2.WriteVisionFile(PasteNamePath + "\\H1_Init_Align2.png");
            }
            catch
            {
            }
            try
            {
                PasteInfo.Corner_H2_Align2.WriteVisionFile(PasteNamePath + "\\H2_Init_Align2.png");
            }
            catch
            {
            }
            try
            {
                PasteInfo.Corner_V1_Align2.WriteVisionFile(PasteNamePath + "\\V1_Init_Align2.png");
            }
            catch
            {
            }
            try
            {
                PasteInfo.Corner_V2_Align2.WriteVisionFile(PasteNamePath + "\\V2_Init_Align2.png");
            }
            catch
            {
            }
            #endregion
            ISheet sheet = hssfworkbook.CreateSheet("PASTE");
            IRow row;
            try
            {
                #region Mark
                row = sheet.CreateRow(0);
                row.CreateCell(0).SetCellValue("PasteName");
                row.CreateCell(1).SetCellValue(sPasteName);
                row = sheet.CreateRow(1);
                row.CreateCell(0).SetCellValue("MARK");
                row.CreateCell(1).SetCellValue("MARK1");
                row.CreateCell(2).SetCellValue("MARK2");
                row.CreateCell(3).SetCellValue("OffsetX");
                row.CreateCell(4).SetCellValue(PasteInfo.OffsetX.ToString());
                row = sheet.CreateRow(2);
                row.CreateCell(0).SetCellValue("CamPointX");
                row.CreateCell(1).SetCellValue(PasteInfo.CamPoint1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.CamPoint2.X.ToString());
                row.CreateCell(3).SetCellValue("OffsetY");
                row.CreateCell(4).SetCellValue(PasteInfo.OffsetY.ToString());
                row = sheet.CreateRow(3);
                row.CreateCell(0).SetCellValue("CamPointY");
                row.CreateCell(1).SetCellValue(PasteInfo.CamPoint1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.CamPoint2.Y.ToString());
                row.CreateCell(3).SetCellValue("OffsetR");
                row.CreateCell(4).SetCellValue(PasteInfo.OffsetR.ToString());
                row = sheet.CreateRow(4);
                row.CreateCell(0).SetCellValue("Shutter");
                row.CreateCell(1).SetCellValue(PasteInfo.Shutter1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Shutter2.ToString());
                row.CreateCell(3).SetCellValue("BadMarkAlgthrim");
                row.CreateCell(4).SetCellValue(PasteInfo.BadMark_AlgthrimIndex.ToString());

                row = sheet.CreateRow(5);
                row.CreateCell(0).SetCellValue("AlignIndex");
                row.CreateCell(1).SetCellValue(PasteInfo.AlinIndex1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.AlinIndex2.ToString());
                row.CreateCell(3).SetCellValue("BadMarkROI_Top");
                row.CreateCell(4).SetCellValue(PasteInfo.BadMark_ROI_Top.ToString());

                row = sheet.CreateRow(6);
                row.CreateCell(0).SetCellValue("MarkX");
                row.CreateCell(1).SetCellValue(PasteInfo.Mark1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Mark2.X.ToString());
                row.CreateCell(3).SetCellValue("BadMarkROI_Left");
                row.CreateCell(4).SetCellValue(PasteInfo.BadMark_ROI_Left.ToString());

                row = sheet.CreateRow(7);
                row.CreateCell(0).SetCellValue("MarkY");
                row.CreateCell(1).SetCellValue(PasteInfo.Mark1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Mark2.Y.ToString());
                row.CreateCell(3).SetCellValue("BadMarkROI_Width");
                row.CreateCell(4).SetCellValue(PasteInfo.BadMark_ROI_Width.ToString());

                row = sheet.CreateRow(8);
                row.CreateCell(0).SetCellValue("Init_ROI_Top");
                row.CreateCell(1).SetCellValue(PasteInfo.Init_ROI_Top1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Init_ROI_Top2.ToString());
                row.CreateCell(3).SetCellValue("BadMarkROI_Height");
                row.CreateCell(4).SetCellValue(PasteInfo.BadMark_ROI_Height.ToString());

                row = sheet.CreateRow(9);
                row.CreateCell(0).SetCellValue("Init_ROI_Left");
                row.CreateCell(1).SetCellValue(PasteInfo.Init_ROI_Left1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Init_ROI_Left2.ToString());
                row.CreateCell(3).SetCellValue("BadMarkThreshold");
                row.CreateCell(4).SetCellValue(PasteInfo.BadMark_Threshold.ToString());

                row = sheet.CreateRow(10);
                row.CreateCell(0).SetCellValue("Init_ROI_Width");
                row.CreateCell(1).SetCellValue(PasteInfo.Init_ROI_Width1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Init_ROI_Width2.ToString());
                row.CreateCell(3).SetCellValue("BadMarkISWhite");
                row.CreateCell(4).SetCellValue(PasteInfo.ISBadMarkWhite.ToString());

                row = sheet.CreateRow(11);
                row.CreateCell(0).SetCellValue("Init_ROI_Height");
                row.CreateCell(1).SetCellValue(PasteInfo.Init_ROI_Height1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Init_ROI_Height2.ToString());
                row.CreateCell(3).SetCellValue("BadMarkLimitArea");
                row.CreateCell(4).SetCellValue(PasteInfo.BadMark_LimtArea.ToString());


                row = sheet.CreateRow(12);
                row.CreateCell(0).SetCellValue("Init_OffsetX");
                row.CreateCell(1).SetCellValue(PasteInfo.Init_OffsetX1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Init_OffsetX2.ToString());
                row.CreateCell(3).SetCellValue("BadMarkScore");
                row.CreateCell(4).SetCellValue(PasteInfo.BadMark_Score.ToString());

                row = sheet.CreateRow(13);
                row.CreateCell(0).SetCellValue("Init_OffsetY");
                row.CreateCell(1).SetCellValue(PasteInfo.Init_OffsetY1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Init_OffsetY2.ToString());
                row.CreateCell(3).SetCellValue("BadMarkMinAngle");
                row.CreateCell(4).SetCellValue(PasteInfo.BadMark_MinAngle.ToString());


                row = sheet.CreateRow(14);
                row.CreateCell(0).SetCellValue("Init_PointX");
                row.CreateCell(1).SetCellValue(PasteInfo.Init_Point1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Init_Point2.X.ToString());
                row.CreateCell(3).SetCellValue("BadMarkMaxAngle");
                row.CreateCell(4).SetCellValue(PasteInfo.BadMark_MaxAngle.ToString());

                row = sheet.CreateRow(15);
                row.CreateCell(0).SetCellValue("Init_PointY");
                row.CreateCell(1).SetCellValue(PasteInfo.Init_Point1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Init_Point2.Y.ToString());
                row.CreateCell(3).SetCellValue("BadMarkShutter");
                row.CreateCell(4).SetCellValue(PasteInfo.BadMark_Shutter.ToString());
                row = sheet.CreateRow(16);
                row.CreateCell(0).SetCellValue("Init_Angle");
                row.CreateCell(1).SetCellValue(PasteInfo.Init_Angle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Init_Angle2.ToString());
                row.CreateCell(3).SetCellValue("BaseAngle");
                row.CreateCell(4).SetCellValue(PasteInfo.BaseAngle.ToString());
                row = sheet.CreateRow(17);
                row.CreateCell(0).SetCellValue("Score");
                row.CreateCell(1).SetCellValue(PasteInfo.Score1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Score2.ToString());
                row = sheet.CreateRow(18);
                row.CreateCell(0).SetCellValue("MinAngle");
                row.CreateCell(1).SetCellValue(PasteInfo.MinAngle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.MinAngle2.ToString());
                row = sheet.CreateRow(19);
                row.CreateCell(0).SetCellValue("MaxAngle");
                row.CreateCell(1).SetCellValue(PasteInfo.MaxAngle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.MaxAngle2.ToString());
                row = sheet.CreateRow(20);
                row.CreateCell(0).SetCellValue("S_ROI_Top");
                row.CreateCell(1).SetCellValue(PasteInfo.S_ROI_Top1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.S_ROI_Top2.ToString());
                row = sheet.CreateRow(21);
                row.CreateCell(0).SetCellValue("S_ROI_Left");
                row.CreateCell(1).SetCellValue(PasteInfo.S_ROI_Left1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.S_ROI_Left2.ToString());
                row = sheet.CreateRow(22);
                row.CreateCell(0).SetCellValue("S_ROI_Width");
                row.CreateCell(1).SetCellValue(PasteInfo.S_ROI_Width1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.S_ROI_Width2.ToString());
                row = sheet.CreateRow(23);
                row.CreateCell(0).SetCellValue("S_ROI_Height");
                row.CreateCell(1).SetCellValue(PasteInfo.S_ROI_Height1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.S_ROI_Height2.ToString());
                row = sheet.CreateRow(24);
                row.CreateCell(0).SetCellValue("S_MinR");
                row.CreateCell(1).SetCellValue(PasteInfo.S_MinR1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.S_MinR2.ToString());
                row = sheet.CreateRow(25);
                row.CreateCell(0).SetCellValue("S_MaxR");
                row.CreateCell(1).SetCellValue(PasteInfo.S_MaxR1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.S_MaxR2.ToString());
                row = sheet.CreateRow(26);
                row.CreateCell(0).SetCellValue("S_CenterX");
                row.CreateCell(1).SetCellValue(PasteInfo.S_Center1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.S_Center2.X.ToString());
                row = sheet.CreateRow(27);
                row.CreateCell(0).SetCellValue("S_CenterY");
                row.CreateCell(1).SetCellValue(PasteInfo.S_Center1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.S_Center2.Y.ToString());
                //Corner-H1
                row = sheet.CreateRow(28);
                row.CreateCell(0).SetCellValue("Corner-H1-X");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Point1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Point2.X.ToString());
                row = sheet.CreateRow(29);
                row.CreateCell(0).SetCellValue("Corner-H1-Y");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Point1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Point2.Y.ToString());

                #region Corner-H1-Init
                row = sheet.CreateRow(30);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-CampointX");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_CamPoint1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_CamPoint2.X.ToString());
                row = sheet.CreateRow(31);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-CampointY");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_CamPoint1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_CamPoint2.Y.ToString());
                row = sheet.CreateRow(32);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-Shutter");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Shutter1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Shutter2.ToString());
                row = sheet.CreateRow(33);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-RedUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_H1_Red1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_H1_Red2 == true ? "1" : "0");
                row = sheet.CreateRow(34);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-GreenUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_H1_Green1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_H1_Green2 == true ? "1" : "0");
                row = sheet.CreateRow(35);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-BlueUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_H1_Blue1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_H1_Blue2 == true ? "1" : "0");
                row = sheet.CreateRow(36);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-RedValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_H1_RedValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_H1_RedValue2.ToString());
                row = sheet.CreateRow(37);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-GreenValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_H1_GreenValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_H1_GreenValue2.ToString());
                row = sheet.CreateRow(38);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-BlueValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_H1_BlueValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_H1_BlueValue2.ToString());
                row = sheet.CreateRow(39);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-Top");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Init_Top1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Init_Top2.ToString());
                row = sheet.CreateRow(40);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-Left");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Init_Left1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Init_Left2.ToString());
                row = sheet.CreateRow(41);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-Width");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Init_Width1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Init_Width2.ToString());
                row = sheet.CreateRow(42);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-Height");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Init_Height1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Init_Height2.ToString());
                row = sheet.CreateRow(43);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-X");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Init_Point1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Init_Point2.X.ToString());
                row = sheet.CreateRow(44);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-Y");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Init_Point1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Init_Point2.Y.ToString());
                row = sheet.CreateRow(45);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-R");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Init_Angle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Init_Angle2.ToString());
                row = sheet.CreateRow(46);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-Score");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Init_Score1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Init_Score2.ToString());
                row = sheet.CreateRow(47);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-MinAngle");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Init_MinAngle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Init_MinAngle2.ToString());
                row = sheet.CreateRow(48);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-MaxAngle");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Init_MaxAngle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Init_MaxAngle2.ToString());
                #endregion

                row = sheet.CreateRow(49);
                row.CreateCell(0).SetCellValue("Corner-H1-Top");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Top1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Top2.ToString());
                row = sheet.CreateRow(50);
                row.CreateCell(0).SetCellValue("Corner-H1-Left");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Left1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Left2.ToString());
                row = sheet.CreateRow(51);
                row.CreateCell(0).SetCellValue("Corner-H1-Width");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Width1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Width2.ToString());
                row = sheet.CreateRow(52);
                row.CreateCell(0).SetCellValue("Corner-H1-Height");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Height1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Height2.ToString());
                row = sheet.CreateRow(53);
                row.CreateCell(0).SetCellValue("Corner-H1-Strength");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_EdgeStrength1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_EdgeStrength2.ToString());
                row = sheet.CreateRow(54);
                row.CreateCell(0).SetCellValue("Corner-H1-PicDir");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_PicDir1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_PicDir2.ToString());
                row = sheet.CreateRow(55);
                row.CreateCell(0).SetCellValue("Corner-H1-BrightDir");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_GrayValueDir1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_GrayValueDir2.ToString());
                //Corner-H2
                row = sheet.CreateRow(56);
                row.CreateCell(0).SetCellValue("Corner-H2-X");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Point1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Point2.X.ToString());
                row = sheet.CreateRow(57);
                row.CreateCell(0).SetCellValue("Corner-H2-Y");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Point1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Point2.Y.ToString());

                #region Corner-H2-Init
                row = sheet.CreateRow(58);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-CampointX");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_CamPoint1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_CamPoint2.X.ToString());
                row = sheet.CreateRow(59);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-CampointY");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_CamPoint1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_CamPoint2.Y.ToString());
                row = sheet.CreateRow(60);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-Shutter");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Shutter1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Shutter2.ToString());
                row = sheet.CreateRow(61);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-RedUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_H2_Red1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_H2_Red2 == true ? "1" : "0");
                row = sheet.CreateRow(62);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-GreenUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_H2_Green1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_H2_Green2 == true ? "1" : "0");
                row = sheet.CreateRow(63);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-BlueUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_H2_Blue1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_H2_Blue2 == true ? "1" : "0");
                row = sheet.CreateRow(64);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-RedValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_H2_RedValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_H2_RedValue2.ToString());
                row = sheet.CreateRow(65);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-GreenValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_H2_GreenValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_H2_GreenValue2.ToString());
                row = sheet.CreateRow(66);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-BlueValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_H2_BlueValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_H2_BlueValue2.ToString());
                row = sheet.CreateRow(67);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-Top");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Init_Top1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Init_Top2.ToString());
                row = sheet.CreateRow(68);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-Left");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Init_Left1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Init_Left2.ToString());
                row = sheet.CreateRow(69);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-Width");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Init_Width1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Init_Width2.ToString());
                row = sheet.CreateRow(70);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-Height");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Init_Height1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Init_Height2.ToString());
                row = sheet.CreateRow(71);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-X");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Init_Point1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Init_Point2.X.ToString());
                row = sheet.CreateRow(72);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-Y");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Init_Point1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Init_Point2.Y.ToString());
                row = sheet.CreateRow(73);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-R");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Init_Angle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Init_Angle2.ToString());
                row = sheet.CreateRow(74);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-Score");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Init_Score1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Init_Score2.ToString());
                row = sheet.CreateRow(75);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-MinAngle");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Init_MinAngle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Init_MinAngle2.ToString());
                row = sheet.CreateRow(76);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-MaxAngle");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Init_MaxAngle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Init_MaxAngle2.ToString());
                #endregion

                row = sheet.CreateRow(77);
                row.CreateCell(0).SetCellValue("Corner-H2-Top");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Top1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Top2.ToString());
                row = sheet.CreateRow(78);
                row.CreateCell(0).SetCellValue("Corner-H2-Left");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Left1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Left2.ToString());
                row = sheet.CreateRow(79);
                row.CreateCell(0).SetCellValue("Corner-H2-Width");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Width1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Width2.ToString());
                row = sheet.CreateRow(80);
                row.CreateCell(0).SetCellValue("Corner-H2-Height");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Height1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Height2.ToString());
                row = sheet.CreateRow(81);
                row.CreateCell(0).SetCellValue("Corner-H2-Strength");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_EdgeStrength1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_EdgeStrength2.ToString());
                row = sheet.CreateRow(82);
                row.CreateCell(0).SetCellValue("Corner-H2-PicDir");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_PicDir1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_PicDir2.ToString());
                row = sheet.CreateRow(83);
                row.CreateCell(0).SetCellValue("Corner-H2-BrightDir");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_GrayValueDir1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_GrayValueDir2.ToString());
                //Corner-V1
                row = sheet.CreateRow(84);
                row.CreateCell(0).SetCellValue("Corner-V1-X");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Point1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Point2.X.ToString());
                row = sheet.CreateRow(85);
                row.CreateCell(0).SetCellValue("Corner-V1-Y");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Point1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Point2.Y.ToString());

                #region Corner-V1-Init
                row = sheet.CreateRow(86);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-CampointX");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_CamPoint1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_CamPoint2.X.ToString());
                row = sheet.CreateRow(87);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-CampointY");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_CamPoint1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_CamPoint2.Y.ToString());
                row = sheet.CreateRow(88);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-Shutter");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Shutter1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Shutter2.ToString());
                row = sheet.CreateRow(89);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-RedUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_V1_Red1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_V1_Red2 == true ? "1" : "0");
                row = sheet.CreateRow(90);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-GreenUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_V1_Green1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_V1_Green2 == true ? "1" : "0");
                row = sheet.CreateRow(91);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-BlueUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_V1_Blue1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_V1_Blue2 == true ? "1" : "0");
                row = sheet.CreateRow(92);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-RedValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_V1_RedValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_V1_RedValue2.ToString());
                row = sheet.CreateRow(93);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-GreenValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_V1_GreenValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_V1_GreenValue2.ToString());
                row = sheet.CreateRow(94);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-BlueValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_V1_BlueValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_V1_BlueValue2.ToString());
                row = sheet.CreateRow(95);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-Top");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Init_Top1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Init_Top2.ToString());
                row = sheet.CreateRow(96);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-Left");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Init_Left1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Init_Left2.ToString());
                row = sheet.CreateRow(97);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-Width");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Init_Width1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Init_Width2.ToString());
                row = sheet.CreateRow(98);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-Height");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Init_Height1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Init_Height2.ToString());
                row = sheet.CreateRow(99);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-X");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Init_Point1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Init_Point2.X.ToString());
                row = sheet.CreateRow(100);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-Y");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Init_Point1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Init_Point2.Y.ToString());
                row = sheet.CreateRow(101);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-R");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Init_Angle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Init_Angle2.ToString());
                row = sheet.CreateRow(102);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-Score");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Init_Score1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Init_Score2.ToString());
                row = sheet.CreateRow(103);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-MinAngle");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Init_MinAngle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Init_MinAngle2.ToString());
                row = sheet.CreateRow(104);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-MaxAngle");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Init_MaxAngle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Init_MaxAngle2.ToString());
                #endregion

                row = sheet.CreateRow(105);
                row.CreateCell(0).SetCellValue("Corner-V1-Top");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Top1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Top2.ToString());
                row = sheet.CreateRow(106);
                row.CreateCell(0).SetCellValue("Corner-V1-Left");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Left1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Left2.ToString());
                row = sheet.CreateRow(107);
                row.CreateCell(0).SetCellValue("Corner-V1-Width");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Width1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Width2.ToString());
                row = sheet.CreateRow(108);
                row.CreateCell(0).SetCellValue("Corner-V1-Height");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Height1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Height2.ToString());
                row = sheet.CreateRow(109);
                row.CreateCell(0).SetCellValue("Corner-V1-Strength");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_EdgeStrength1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_EdgeStrength2.ToString());
                row = sheet.CreateRow(110);
                row.CreateCell(0).SetCellValue("Corner-V1-PicDir");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_PicDir1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_PicDir2.ToString());
                row = sheet.CreateRow(111);
                row.CreateCell(0).SetCellValue("Corner-V1-BrightDir");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_GrayValueDir1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_GrayValueDir2.ToString());
                //Corner-V2
                row = sheet.CreateRow(112);
                row.CreateCell(0).SetCellValue("Corner-V2-X");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Point1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Point2.X.ToString());
                row = sheet.CreateRow(113);
                row.CreateCell(0).SetCellValue("Corner-V2-Y");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Point1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Point2.Y.ToString());

                #region Corner-V2-Init
                row = sheet.CreateRow(114);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-CampointX");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_CamPoint1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_CamPoint2.X.ToString());
                row = sheet.CreateRow(115);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-CampointY");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_CamPoint1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_CamPoint2.Y.ToString());
                row = sheet.CreateRow(116);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-Shutter");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Shutter1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Shutter2.ToString());
                row = sheet.CreateRow(117);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-RedUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_V2_Red1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_V2_Red2 == true ? "1" : "0");
                row = sheet.CreateRow(118);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-GreenUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_V2_Green1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_V2_Green2 == true ? "1" : "0");
                row = sheet.CreateRow(119);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-BlueUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_V2_Blue1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_V2_Blue2 == true ? "1" : "0");
                row = sheet.CreateRow(120);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-RedValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_V2_RedValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_V2_RedValue2.ToString());
                row = sheet.CreateRow(121);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-GreenValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_V2_GreenValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_V2_GreenValue2.ToString());
                row = sheet.CreateRow(122);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-BlueValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_V2_BlueValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_V2_BlueValue2.ToString());
                row = sheet.CreateRow(123);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-Top");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Init_Top1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Init_Top2.ToString());
                row = sheet.CreateRow(124);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-Left");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Init_Left1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Init_Left2.ToString());
                row = sheet.CreateRow(125);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-Width");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Init_Width1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Init_Width2.ToString());
                row = sheet.CreateRow(126);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-Height");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Init_Height1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Init_Height2.ToString());
                row = sheet.CreateRow(127);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-X");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Init_Point1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Init_Point2.X.ToString());
                row = sheet.CreateRow(128);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-Y");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Init_Point1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Init_Point2.Y.ToString());
                row = sheet.CreateRow(129);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-R");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Init_Angle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Init_Angle2.ToString());
                row = sheet.CreateRow(130);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-Score");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Init_Score1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Init_Score2.ToString());
                row = sheet.CreateRow(131);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-MinAngle");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Init_MinAngle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Init_MinAngle2.ToString());
                row = sheet.CreateRow(132);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-MaxAngle");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Init_MaxAngle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Init_MaxAngle2.ToString());
                #endregion

                row = sheet.CreateRow(133);
                row.CreateCell(0).SetCellValue("Corner-V2-Top");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Top1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Top2.ToString());
                row.CreateCell(3).SetCellValue("Init-AreaEN");
                row.CreateCell(4).SetCellValue(PasteInfo.bAreaEN1 == true ? "1" : "0");
                row.CreateCell(5).SetCellValue(PasteInfo.bAreaEN2 == true ? "1" : "0");
                row = sheet.CreateRow(134);
                row.CreateCell(0).SetCellValue("Corner-V2-Left");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Left1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Left2.ToString());
                row.CreateCell(3).SetCellValue("Init-AreaValue");
                row.CreateCell(4).SetCellValue(PasteInfo.iAreaMin1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.iAreaMin2.ToString());
                row = sheet.CreateRow(135);
                row.CreateCell(0).SetCellValue("Corner-V2-Width");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Width1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Width2.ToString());
                row.CreateCell(3).SetCellValue("Init-ThresholdValue");
                row.CreateCell(4).SetCellValue(PasteInfo.iAreaMax1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.iAreaMax2.ToString());
                row = sheet.CreateRow(136);
                row.CreateCell(0).SetCellValue("Corner-V2-Height");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Height1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Height2.ToString());
                row.CreateCell(3).SetCellValue("Init-OKStyle");
                row.CreateCell(4).SetCellValue(PasteInfo.iAreaOKStyle1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.iAreaOKStyle2.ToString());
                row = sheet.CreateRow(137);
                row.CreateCell(0).SetCellValue("Corner-V2-Strength");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_EdgeStrength1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_EdgeStrength2.ToString());
                row.CreateCell(3).SetCellValue("Init-Gain");
                row.CreateCell(4).SetCellValue(PasteInfo.GainInit1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.GainInit2.ToString());

                row = sheet.CreateRow(138);
                row.CreateCell(0).SetCellValue("Corner-V2-PicDir");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_PicDir1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_PicDir2.ToString());
                row.CreateCell(3).SetCellValue("Init-Offset");
                row.CreateCell(4).SetCellValue(PasteInfo.OffsetInit1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.OffsetInit2.ToString());
                row = sheet.CreateRow(139);
                row.CreateCell(0).SetCellValue("Corner-V2-BrightDir");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_GrayValueDir1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_GrayValueDir2.ToString());
                row.CreateCell(3).SetCellValue("Circle-Gain");
                row.CreateCell(4).SetCellValue(PasteInfo.GainCircle1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.GainCircle2.ToString());
                //角落点
                row = sheet.CreateRow(140);
                row.CreateCell(0).SetCellValue("Corner-PointX");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_Point1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_Point2.X.ToString());
                row.CreateCell(3).SetCellValue("Circle-Offset");
                row.CreateCell(4).SetCellValue(PasteInfo.OffsetCircle1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.OffsetCircle2.ToString());
                row = sheet.CreateRow(141);
                row.CreateCell(0).SetCellValue("Corner-PointY");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_Point1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_Point2.Y.ToString());
                row.CreateCell(3).SetCellValue("H1-Gain");
                row.CreateCell(4).SetCellValue(PasteInfo.GainH1_1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.GainH1_2.ToString());
                row = sheet.CreateRow(142);
                row.CreateCell(0).SetCellValue("Corner-AngleIndex");
                row.CreateCell(1).SetCellValue(PasteInfo.CornerAngleIndex1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.CornerAngleIndex2.ToString());
                row.CreateCell(3).SetCellValue("H1-Offset");
                row.CreateCell(4).SetCellValue(PasteInfo.OffsetH1_1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.OffsetH1_2.ToString());
                //光源
                row = sheet.CreateRow(143);
                row.CreateCell(0).SetCellValue("RedUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bRed1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bRed2 == true ? "1" : "0");
                row.CreateCell(3).SetCellValue("H2-Gain");
                row.CreateCell(4).SetCellValue(PasteInfo.GainH2_1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.GainH2_2.ToString());
                row = sheet.CreateRow(144);
                row.CreateCell(0).SetCellValue("GreenUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bGreen1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bGreen2 == true ? "1" : "0");
                row.CreateCell(3).SetCellValue("H2-Offset");
                row.CreateCell(4).SetCellValue(PasteInfo.OffsetH2_1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.OffsetH2_2.ToString());
                row.CreateCell(6).SetCellValue("GrabLine-ROI");
                row.CreateCell(7).SetCellValue(PasteInfo.GrabLine_ROI1);
                row.CreateCell(8).SetCellValue(PasteInfo.GrabLine_ROI2);

                row = sheet.CreateRow(145);
                row.CreateCell(0).SetCellValue("BlueUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bBlue1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bBlue2 == true ? "1" : "0");
                row.CreateCell(3).SetCellValue("V1-Gain");
                row.CreateCell(4).SetCellValue(PasteInfo.GainV1_1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.GainV1_2.ToString());
                row.CreateCell(6).SetCellValue("GrabLine-EdgeStrength");
                row.CreateCell(7).SetCellValue(PasteInfo.GrabLine_EdgeStrength1.ToString());
                row.CreateCell(8).SetCellValue(PasteInfo.GrabLine_EdgeStrength2.ToString());

                row = sheet.CreateRow(146);
                row.CreateCell(0).SetCellValue("RedValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dRedValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dRedValue2.ToString());
                row.CreateCell(3).SetCellValue("V1-Offset");
                row.CreateCell(4).SetCellValue(PasteInfo.OffsetV1_1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.OffsetV1_2.ToString());
                row.CreateCell(6).SetCellValue("GrabLine-PicDir");
                row.CreateCell(7).SetCellValue(PasteInfo.GrabLine_PicDir1.ToString());
                row.CreateCell(8).SetCellValue(PasteInfo.GrabLine_PicDir2.ToString());

                row = sheet.CreateRow(147);
                row.CreateCell(0).SetCellValue("GreenValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dGreenValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dGreenValue2.ToString());
                row.CreateCell(3).SetCellValue("V2-Gain");
                row.CreateCell(4).SetCellValue(PasteInfo.GainV2_1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.GainV2_2.ToString());
                row.CreateCell(6).SetCellValue("GrabLine-GrayValueDir");
                row.CreateCell(7).SetCellValue(PasteInfo.GrabLine_GrayValueDir1.ToString());
                row.CreateCell(8).SetCellValue(PasteInfo.GrabLine_GrayValueDir2.ToString());

                row = sheet.CreateRow(148);
                row.CreateCell(0).SetCellValue("BlueValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dBlueValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dBlueValue2.ToString());
                row.CreateCell(3).SetCellValue("V2-Offset");
                row.CreateCell(4).SetCellValue(PasteInfo.OffsetV2_1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.OffsetV2_2.ToString());
                row.CreateCell(6).SetCellValue("GrabLine-Enable");
                row.CreateCell(7).SetCellValue(PasteInfo.GrabLine_Enable1.ToString());
                row.CreateCell(8).SetCellValue(PasteInfo.GrabLine_Enable2.ToString());

                #endregion
                //贴附点
                #region 贴附点
                row = sheet.CreateRow(149);//73
                row.CreateCell(0).SetCellValue("");
                row.CreateCell(1).SetCellValue("X");
                row.CreateCell(2).SetCellValue("Y");
                row.CreateCell(3).SetCellValue("R");

                for (int i = 0; i < Variable.NOZZLE_NUM; ++i)
                {
                    row.CreateCell(4 + i).SetCellValue($"Z{i + 1}");
                }

                row.CreateCell(4 + Variable.NOZZLE_NUM).SetCellValue("NO");
                row.CreateCell(5 + Variable.NOZZLE_NUM).SetCellValue("EN");
                row.CreateCell(6 + Variable.NOZZLE_NUM).SetCellValue("FEEDER");
                row.CreateCell(7 + Variable.NOZZLE_NUM).SetCellValue("NOZZLE");
                row.CreateCell(8 + Variable.NOZZLE_NUM).SetCellValue("DELAY");
                row.CreateCell(9 + Variable.NOZZLE_NUM).SetCellValue("BadMarkEN");
                row.CreateCell(10 + Variable.NOZZLE_NUM).SetCellValue("BadMarkX");
                row.CreateCell(11 + Variable.NOZZLE_NUM).SetCellValue("BadMarkY");
                row.CreateCell(12 + Variable.NOZZLE_NUM).SetCellValue("IsPastPointAbs");
                row.CreateCell(13 + Variable.NOZZLE_NUM).SetCellValue("XOffsetSingle");
                row.CreateCell(14 + Variable.NOZZLE_NUM).SetCellValue("YOffsetSingle");
                row = sheet.CreateRow(150);
                row.CreateCell(0).SetCellValue("MARK1");
                row.CreateCell(1).SetCellValue(PasteInfo.Mark1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Mark1.Y.ToString());
                row = sheet.CreateRow(151);//75
                row.CreateCell(0).SetCellValue("MARK2");
                row.CreateCell(1).SetCellValue(PasteInfo.Mark2.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Mark2.Y.ToString());

                for (int rowIndex = 0; rowIndex < PasteInfo.PastePoints.Length; rowIndex++)
                {
                    row = sheet.CreateRow(152 + rowIndex);//152
                    row.CreateCell(0).SetCellValue("PastePoint");
                    row.CreateCell(1).SetCellValue(PasteInfo.PastePoints[rowIndex].X.ToString());//
                    row.CreateCell(2).SetCellValue(PasteInfo.PastePoints[rowIndex].Y.ToString());//
                    row.CreateCell(3).SetCellValue(PasteInfo.PasteAngle[rowIndex].ToString());//

                    for (int i = 0; i < Variable.NOZZLE_NUM; ++i)
                    {
                        row.CreateCell(4 + i).SetCellValue(PasteInfo.PasteHeight[rowIndex][i].ToString());//
                    }

                    row.CreateCell(4 + Variable.NOZZLE_NUM).SetCellValue(PasteInfo.PastePN[rowIndex]);//PasteEN
                    row.CreateCell(5 + Variable.NOZZLE_NUM).SetCellValue(PasteInfo.PasteEN[rowIndex] == true ? "1" : "0");
                    row.CreateCell(6 + Variable.NOZZLE_NUM).SetCellValue(PasteInfo.FeederIndex[rowIndex].ToString());//
                    row.CreateCell(7 + Variable.NOZZLE_NUM).SetCellValue(PasteInfo.NozzleIndex[rowIndex].ToString());//
                    row.CreateCell(8 + Variable.NOZZLE_NUM).SetCellValue(PasteInfo.Delay[rowIndex].ToString());//

                    row.CreateCell(9 + Variable.NOZZLE_NUM).SetCellValue(PasteInfo.BadMarkEN[rowIndex] == true ? "1" : "0");//
                    row.CreateCell(10 + Variable.NOZZLE_NUM).SetCellValue(PasteInfo.BadMarkPoints[rowIndex].X.ToString());//
                    row.CreateCell(11 + Variable.NOZZLE_NUM).SetCellValue(PasteInfo.BadMarkPoints[rowIndex].Y.ToString());//
                    row.CreateCell(12 + Variable.NOZZLE_NUM).SetCellValue(PasteInfo.IsPastePointsAbs[rowIndex] == true ? "1" : "0");//
                    row.CreateCell(13 + Variable.NOZZLE_NUM).SetCellValue(PasteInfo.OffsetX_Single[rowIndex].ToString());//
                    row.CreateCell(14 + Variable.NOZZLE_NUM).SetCellValue(PasteInfo.OffsetY_Single[rowIndex].ToString());//
                    if (PasteInfo.Region[rowIndex] == null)
                        PasteInfo.Region[rowIndex] = "A";
                    row.CreateCell(15 + Variable.NOZZLE_NUM).SetCellValue(PasteInfo.Region[rowIndex].ToString());//
                }
                #endregion
            }
            catch
            {
                return 1;
            }
            hssfworkbook.Write(file);
            file.Close();
            return 0;
        }
        public short WriteXls2Data_Label(string PasteNamePath)
        {
            string sPasteName = PasteNamePath.Substring(PasteNamePath.LastIndexOf("\\") + 1);
            //创建程序文件夹
            if (!Directory.Exists(PasteNamePath))
            {
                Directory.CreateDirectory(PasteNamePath);
            }

            string filepath = PasteNamePath + "\\PASTE.xls";

            if (!File.Exists(filepath))
            {
                CreatXls(filepath);
            }

            FileStream file = new FileStream(filepath, FileMode.OpenOrCreate, FileAccess.ReadWrite);
            try
            {
                hssfworkbook.RemoveAt(0);
            }
            catch
            {

            }
            #region Init & BadMark
            try
            {
                PasteInfo.Align1.WriteVisionFile(PasteNamePath + "\\1.png");
            }
            catch
            {

            }

            try
            {
                PasteInfo.Align2.WriteVisionFile(PasteNamePath + "\\2.png");
            }
            catch
            {

            }
            try
            {
                PasteInfo.BadMark_Image.WriteVisionFile(PasteNamePath + "\\BadMark.png");
            }
            catch
            {

            }
            #endregion
            #region Corner Init 1
            try
            {
                PasteInfo.Corner_H1_Align1.WriteVisionFile(PasteNamePath + "\\H1_Init_Align1.png");
            }
            catch
            {

            }
            try
            {
                PasteInfo.Corner_H2_Align1.WriteVisionFile(PasteNamePath + "\\H2_Init_Align1.png");
            }
            catch
            {

            }
            try
            {
                PasteInfo.Corner_V1_Align1.WriteVisionFile(PasteNamePath + "\\V1_Init_Align1.png");
            }
            catch
            {

            }
            try
            {
                PasteInfo.Corner_V2_Align1.WriteVisionFile(PasteNamePath + "\\V2_Init_Align1.png");
            }
            catch
            {

            }
            #endregion
            #region Corner Init 2
            try
            {
                PasteInfo.Corner_H1_Align2.WriteVisionFile(PasteNamePath + "\\H1_Init_Align2.png");
            }
            catch
            {
            }
            try
            {
                PasteInfo.Corner_H2_Align2.WriteVisionFile(PasteNamePath + "\\H2_Init_Align2.png");
            }
            catch
            {
            }
            try
            {
                PasteInfo.Corner_V1_Align2.WriteVisionFile(PasteNamePath + "\\V1_Init_Align2.png");
            }
            catch
            {
            }
            try
            {
                PasteInfo.Corner_V2_Align2.WriteVisionFile(PasteNamePath + "\\V2_Init_Align2.png");
            }
            catch
            {
            }
            #endregion

            ISheet sheet = hssfworkbook.CreateSheet("PASTE");
            IRow row;
            try
            {
                #region Mark
                row = sheet.CreateRow(0);
                row.CreateCell(0).SetCellValue("PasteName");
                row.CreateCell(1).SetCellValue(sPasteName);
                row = sheet.CreateRow(1);
                row.CreateCell(0).SetCellValue("MARK");
                row.CreateCell(1).SetCellValue("MARK1");
                row.CreateCell(2).SetCellValue("MARK2");
                row = sheet.CreateRow(2);
                row.CreateCell(0).SetCellValue("CamPointX");
                row.CreateCell(1).SetCellValue(PasteInfo.CamPoint1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.CamPoint2.X.ToString());
                row = sheet.CreateRow(3);
                row.CreateCell(0).SetCellValue("CamPointY");
                row.CreateCell(1).SetCellValue(PasteInfo.CamPoint1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.CamPoint2.Y.ToString());
                row = sheet.CreateRow(4);
                row.CreateCell(0).SetCellValue("Shutter");
                row.CreateCell(1).SetCellValue(PasteInfo.Shutter1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Shutter2.ToString());
                row = sheet.CreateRow(5);
                row.CreateCell(0).SetCellValue("AlignIndex");
                row.CreateCell(1).SetCellValue(PasteInfo.AlinIndex1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.AlinIndex2.ToString());

                row = sheet.CreateRow(6);
                row.CreateCell(0).SetCellValue("MarkX");
                row.CreateCell(1).SetCellValue(PasteInfo.Mark1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Mark2.X.ToString());

                row = sheet.CreateRow(7);
                row.CreateCell(0).SetCellValue("MarkY");
                row.CreateCell(1).SetCellValue(PasteInfo.Mark1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Mark2.Y.ToString());

                row = sheet.CreateRow(8);
                row.CreateCell(0).SetCellValue("Init_ROI_Top");
                row.CreateCell(1).SetCellValue(PasteInfo.Init_ROI_Top1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Init_ROI_Top2.ToString());

                row = sheet.CreateRow(9);
                row.CreateCell(0).SetCellValue("Init_ROI_Left");
                row.CreateCell(1).SetCellValue(PasteInfo.Init_ROI_Left1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Init_ROI_Left2.ToString());

                row = sheet.CreateRow(10);
                row.CreateCell(0).SetCellValue("Init_ROI_Width");
                row.CreateCell(1).SetCellValue(PasteInfo.Init_ROI_Width1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Init_ROI_Width2.ToString());

                row = sheet.CreateRow(11);
                row.CreateCell(0).SetCellValue("Init_ROI_Height");
                row.CreateCell(1).SetCellValue(PasteInfo.Init_ROI_Height1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Init_ROI_Height2.ToString());

                row = sheet.CreateRow(12);
                row.CreateCell(0).SetCellValue("Init_OffsetX");
                row.CreateCell(1).SetCellValue(PasteInfo.Init_OffsetX1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Init_OffsetX2.ToString());

                row = sheet.CreateRow(13);
                row.CreateCell(0).SetCellValue("Init_OffsetY");
                row.CreateCell(1).SetCellValue(PasteInfo.Init_OffsetY1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Init_OffsetY2.ToString());

                row = sheet.CreateRow(14);
                row.CreateCell(0).SetCellValue("Init_PointX");
                row.CreateCell(1).SetCellValue(PasteInfo.Init_Point1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Init_Point2.X.ToString());

                row = sheet.CreateRow(15);
                row.CreateCell(0).SetCellValue("Init_PointY");
                row.CreateCell(1).SetCellValue(PasteInfo.Init_Point1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Init_Point2.Y.ToString());

                row = sheet.CreateRow(16);
                row.CreateCell(0).SetCellValue("Init_Angle");
                row.CreateCell(1).SetCellValue(PasteInfo.Init_Angle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Init_Angle2.ToString());
                row = sheet.CreateRow(17);
                row.CreateCell(0).SetCellValue("Score");
                row.CreateCell(1).SetCellValue(PasteInfo.Score1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Score2.ToString());
                row = sheet.CreateRow(18);
                row.CreateCell(0).SetCellValue("MinAngle");
                row.CreateCell(1).SetCellValue(PasteInfo.MinAngle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.MinAngle2.ToString());
                row = sheet.CreateRow(19);
                row.CreateCell(0).SetCellValue("MaxAngle");
                row.CreateCell(1).SetCellValue(PasteInfo.MaxAngle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.MaxAngle2.ToString());
                row = sheet.CreateRow(20);
                row.CreateCell(0).SetCellValue("S_ROI_Top");
                row.CreateCell(1).SetCellValue(PasteInfo.S_ROI_Top1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.S_ROI_Top2.ToString());
                row = sheet.CreateRow(21);
                row.CreateCell(0).SetCellValue("S_ROI_Left");
                row.CreateCell(1).SetCellValue(PasteInfo.S_ROI_Left1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.S_ROI_Left2.ToString());
                row = sheet.CreateRow(22);
                row.CreateCell(0).SetCellValue("S_ROI_Width");
                row.CreateCell(1).SetCellValue(PasteInfo.S_ROI_Width1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.S_ROI_Width2.ToString());
                row = sheet.CreateRow(23);
                row.CreateCell(0).SetCellValue("S_ROI_Height");
                row.CreateCell(1).SetCellValue(PasteInfo.S_ROI_Height1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.S_ROI_Height2.ToString());
                row = sheet.CreateRow(24);
                row.CreateCell(0).SetCellValue("S_MinR");
                row.CreateCell(1).SetCellValue(PasteInfo.S_MinR1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.S_MinR2.ToString());
                row = sheet.CreateRow(25);
                row.CreateCell(0).SetCellValue("S_MaxR");
                row.CreateCell(1).SetCellValue(PasteInfo.S_MaxR1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.S_MaxR2.ToString());
                row = sheet.CreateRow(26);
                row.CreateCell(0).SetCellValue("S_CenterX");
                row.CreateCell(1).SetCellValue(PasteInfo.S_Center1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.S_Center2.X.ToString());
                row = sheet.CreateRow(27);
                row.CreateCell(0).SetCellValue("S_CenterY");
                row.CreateCell(1).SetCellValue(PasteInfo.S_Center1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.S_Center2.Y.ToString());
                //Corner-H1
                row = sheet.CreateRow(28);
                row.CreateCell(0).SetCellValue("Corner-H1-X");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Point1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Point2.X.ToString());
                row = sheet.CreateRow(29);
                row.CreateCell(0).SetCellValue("Corner-H1-Y");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Point1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Point2.Y.ToString());

                #region Corner-H1-Init
                row = sheet.CreateRow(30);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-CampointX");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_CamPoint1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_CamPoint2.X.ToString());
                row = sheet.CreateRow(31);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-CampointY");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_CamPoint1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_CamPoint2.Y.ToString());
                row = sheet.CreateRow(32);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-Shutter");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Shutter1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Shutter2.ToString());
                row = sheet.CreateRow(33);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-RedUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_H1_Red1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_H1_Red2 == true ? "1" : "0");
                row = sheet.CreateRow(34);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-GreenUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_H1_Green1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_H1_Green2 == true ? "1" : "0");
                row = sheet.CreateRow(35);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-BlueUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_H1_Blue1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_H1_Blue2 == true ? "1" : "0");
                row = sheet.CreateRow(36);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-RedValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_H1_RedValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_H1_RedValue2.ToString());
                row = sheet.CreateRow(37);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-GreenValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_H1_GreenValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_H1_GreenValue2.ToString());
                row = sheet.CreateRow(38);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-BlueValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_H1_BlueValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_H1_BlueValue2.ToString());
                row = sheet.CreateRow(39);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-Top");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Init_Top1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Init_Top2.ToString());
                row = sheet.CreateRow(40);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-Left");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Init_Left1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Init_Left2.ToString());
                row = sheet.CreateRow(41);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-Width");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Init_Width1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Init_Width2.ToString());
                row = sheet.CreateRow(42);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-Height");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Init_Height1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Init_Height2.ToString());
                row = sheet.CreateRow(43);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-X");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Init_Point1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Init_Point2.X.ToString());
                row = sheet.CreateRow(44);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-Y");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Init_Point1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Init_Point2.Y.ToString());
                row = sheet.CreateRow(45);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-R");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Init_Angle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Init_Angle2.ToString());
                row = sheet.CreateRow(46);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-Score");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Init_Score1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Init_Score2.ToString());
                row = sheet.CreateRow(47);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-MinAngle");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Init_MinAngle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Init_MinAngle2.ToString());
                row = sheet.CreateRow(48);
                row.CreateCell(0).SetCellValue("Corner-H1-Init-MaxAngle");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Init_MaxAngle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Init_MaxAngle2.ToString());
                #endregion

                row = sheet.CreateRow(49);
                row.CreateCell(0).SetCellValue("Corner-H1-Top");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Top1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Top2.ToString());
                row = sheet.CreateRow(50);
                row.CreateCell(0).SetCellValue("Corner-H1-Left");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Left1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Left2.ToString());
                row = sheet.CreateRow(51);
                row.CreateCell(0).SetCellValue("Corner-H1-Width");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Width1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Width2.ToString());
                row = sheet.CreateRow(52);
                row.CreateCell(0).SetCellValue("Corner-H1-Height");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_Height1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_Height2.ToString());
                row = sheet.CreateRow(53);
                row.CreateCell(0).SetCellValue("Corner-H1-Strength");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_EdgeStrength1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_EdgeStrength2.ToString());
                row = sheet.CreateRow(54);
                row.CreateCell(0).SetCellValue("Corner-H1-PicDir");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_PicDir1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_PicDir2.ToString());
                row = sheet.CreateRow(55);
                row.CreateCell(0).SetCellValue("Corner-H1-BrightDir");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H1_GrayValueDir1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H1_GrayValueDir2.ToString());
                //Corner-H2
                row = sheet.CreateRow(56);
                row.CreateCell(0).SetCellValue("Corner-H2-X");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Point1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Point2.X.ToString());
                row = sheet.CreateRow(57);
                row.CreateCell(0).SetCellValue("Corner-H2-Y");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Point1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Point2.Y.ToString());

                #region Corner-H2-Init
                row = sheet.CreateRow(58);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-CampointX");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_CamPoint1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_CamPoint2.X.ToString());
                row = sheet.CreateRow(59);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-CampointY");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_CamPoint1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_CamPoint2.Y.ToString());
                row = sheet.CreateRow(60);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-Shutter");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Shutter1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Shutter2.ToString());
                row = sheet.CreateRow(61);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-RedUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_H2_Red1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_H2_Red2 == true ? "1" : "0");
                row = sheet.CreateRow(62);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-GreenUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_H2_Green1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_H2_Green2 == true ? "1" : "0");
                row = sheet.CreateRow(63);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-BlueUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_H2_Blue1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_H2_Blue2 == true ? "1" : "0");
                row = sheet.CreateRow(64);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-RedValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_H2_RedValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_H2_RedValue2.ToString());
                row = sheet.CreateRow(65);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-GreenValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_H2_GreenValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_H2_GreenValue2.ToString());
                row = sheet.CreateRow(66);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-BlueValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_H2_BlueValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_H2_BlueValue2.ToString());
                row = sheet.CreateRow(67);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-Top");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Init_Top1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Init_Top2.ToString());
                row = sheet.CreateRow(68);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-Left");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Init_Left1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Init_Left2.ToString());
                row = sheet.CreateRow(69);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-Width");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Init_Width1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Init_Width2.ToString());
                row = sheet.CreateRow(70);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-Height");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Init_Height1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Init_Height2.ToString());
                row = sheet.CreateRow(71);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-X");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Init_Point1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Init_Point2.X.ToString());
                row = sheet.CreateRow(72);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-Y");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Init_Point1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Init_Point2.Y.ToString());
                row = sheet.CreateRow(73);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-R");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Init_Angle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Init_Angle2.ToString());
                row = sheet.CreateRow(74);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-Score");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Init_Score1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Init_Score2.ToString());
                row = sheet.CreateRow(75);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-MinAngle");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Init_MinAngle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Init_MinAngle2.ToString());
                row = sheet.CreateRow(76);
                row.CreateCell(0).SetCellValue("Corner-H2-Init-MaxAngle");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Init_MaxAngle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Init_MaxAngle2.ToString());
                #endregion

                row = sheet.CreateRow(77);
                row.CreateCell(0).SetCellValue("Corner-H2-Top");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Top1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Top2.ToString());
                row = sheet.CreateRow(78);
                row.CreateCell(0).SetCellValue("Corner-H2-Left");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Left1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Left2.ToString());
                row = sheet.CreateRow(79);
                row.CreateCell(0).SetCellValue("Corner-H2-Width");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Width1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Width2.ToString());
                row = sheet.CreateRow(80);
                row.CreateCell(0).SetCellValue("Corner-H2-Height");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_Height1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_Height2.ToString());
                row = sheet.CreateRow(81);
                row.CreateCell(0).SetCellValue("Corner-H2-Strength");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_EdgeStrength1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_EdgeStrength2.ToString());
                row = sheet.CreateRow(82);
                row.CreateCell(0).SetCellValue("Corner-H2-PicDir");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_PicDir1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_PicDir2.ToString());
                row = sheet.CreateRow(83);
                row.CreateCell(0).SetCellValue("Corner-H2-BrightDir");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_H2_GrayValueDir1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_H2_GrayValueDir2.ToString());
                //Corner-V1
                row = sheet.CreateRow(84);
                row.CreateCell(0).SetCellValue("Corner-V1-X");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Point1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Point2.X.ToString());
                row = sheet.CreateRow(85);
                row.CreateCell(0).SetCellValue("Corner-V1-Y");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Point1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Point2.Y.ToString());

                #region Corner-V1-Init
                row = sheet.CreateRow(86);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-CampointX");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_CamPoint1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_CamPoint2.X.ToString());
                row = sheet.CreateRow(87);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-CampointY");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_CamPoint1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_CamPoint2.Y.ToString());
                row = sheet.CreateRow(88);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-Shutter");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Shutter1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Shutter2.ToString());
                row = sheet.CreateRow(89);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-RedUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_V1_Red1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_V1_Red2 == true ? "1" : "0");
                row = sheet.CreateRow(90);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-GreenUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_V1_Green1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_V1_Green2 == true ? "1" : "0");
                row = sheet.CreateRow(91);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-BlueUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_V1_Blue1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_V1_Blue2 == true ? "1" : "0");
                row = sheet.CreateRow(92);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-RedValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_V1_RedValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_V1_RedValue2.ToString());
                row = sheet.CreateRow(93);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-GreenValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_V1_GreenValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_V1_GreenValue2.ToString());
                row = sheet.CreateRow(94);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-BlueValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_V1_BlueValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_V1_BlueValue2.ToString());
                row = sheet.CreateRow(95);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-Top");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Init_Top1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Init_Top2.ToString());
                row = sheet.CreateRow(96);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-Left");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Init_Left1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Init_Left2.ToString());
                row = sheet.CreateRow(97);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-Width");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Init_Width1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Init_Width2.ToString());
                row = sheet.CreateRow(98);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-Height");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Init_Height1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Init_Height2.ToString());
                row = sheet.CreateRow(99);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-X");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Init_Point1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Init_Point2.X.ToString());
                row = sheet.CreateRow(100);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-Y");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Init_Point1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Init_Point2.Y.ToString());
                row = sheet.CreateRow(101);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-R");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Init_Angle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Init_Angle2.ToString());
                row = sheet.CreateRow(102);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-Score");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Init_Score1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Init_Score2.ToString());
                row = sheet.CreateRow(103);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-MinAngle");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Init_MinAngle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Init_MinAngle2.ToString());
                row = sheet.CreateRow(104);
                row.CreateCell(0).SetCellValue("Corner-V1-Init-MaxAngle");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Init_MaxAngle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Init_MaxAngle2.ToString());
                #endregion

                row = sheet.CreateRow(105);
                row.CreateCell(0).SetCellValue("Corner-V1-Top");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Top1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Top2.ToString());
                row = sheet.CreateRow(106);
                row.CreateCell(0).SetCellValue("Corner-V1-Left");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Left1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Left2.ToString());
                row = sheet.CreateRow(107);
                row.CreateCell(0).SetCellValue("Corner-V1-Width");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Width1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Width2.ToString());
                row = sheet.CreateRow(108);
                row.CreateCell(0).SetCellValue("Corner-V1-Height");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_Height1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_Height2.ToString());
                row = sheet.CreateRow(109);
                row.CreateCell(0).SetCellValue("Corner-V1-Strength");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_EdgeStrength1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_EdgeStrength2.ToString());
                row = sheet.CreateRow(110);
                row.CreateCell(0).SetCellValue("Corner-V1-PicDir");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_PicDir1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_PicDir2.ToString());
                row = sheet.CreateRow(111);
                row.CreateCell(0).SetCellValue("Corner-V1-BrightDir");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V1_GrayValueDir1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V1_GrayValueDir2.ToString());
                //Corner-V2
                row = sheet.CreateRow(112);
                row.CreateCell(0).SetCellValue("Corner-V2-X");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Point1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Point2.X.ToString());
                row = sheet.CreateRow(113);
                row.CreateCell(0).SetCellValue("Corner-V2-Y");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Point1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Point2.Y.ToString());

                #region Corner-V2-Init
                row = sheet.CreateRow(114);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-CampointX");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_CamPoint1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_CamPoint2.X.ToString());
                row = sheet.CreateRow(115);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-CampointY");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_CamPoint1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_CamPoint2.Y.ToString());
                row = sheet.CreateRow(116);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-Shutter");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Shutter1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Shutter2.ToString());
                row = sheet.CreateRow(117);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-RedUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_V2_Red1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_V2_Red2 == true ? "1" : "0");
                row = sheet.CreateRow(118);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-GreenUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_V2_Green1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_V2_Green2 == true ? "1" : "0");
                row = sheet.CreateRow(119);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-BlueUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bCorner_V2_Blue1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bCorner_V2_Blue2 == true ? "1" : "0");
                row = sheet.CreateRow(120);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-RedValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_V2_RedValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_V2_RedValue2.ToString());
                row = sheet.CreateRow(121);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-GreenValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_V2_GreenValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_V2_GreenValue2.ToString());
                row = sheet.CreateRow(122);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-BlueValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dCorner_V2_BlueValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dCorner_V2_BlueValue2.ToString());
                row = sheet.CreateRow(123);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-Top");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Init_Top1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Init_Top2.ToString());
                row = sheet.CreateRow(124);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-Left");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Init_Left1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Init_Left2.ToString());
                row = sheet.CreateRow(125);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-Width");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Init_Width1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Init_Width2.ToString());
                row = sheet.CreateRow(126);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-Height");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Init_Height1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Init_Height2.ToString());
                row = sheet.CreateRow(127);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-X");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Init_Point1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Init_Point2.X.ToString());
                row = sheet.CreateRow(128);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-Y");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Init_Point1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Init_Point2.Y.ToString());
                row = sheet.CreateRow(129);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-R");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Init_Angle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Init_Angle2.ToString());
                row = sheet.CreateRow(130);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-Score");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Init_Score1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Init_Score2.ToString());
                row = sheet.CreateRow(131);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-MinAngle");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Init_MinAngle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Init_MinAngle2.ToString());
                row = sheet.CreateRow(132);
                row.CreateCell(0).SetCellValue("Corner-V2-Init-MaxAngle");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Init_MaxAngle1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Init_MaxAngle2.ToString());
                #endregion

                row = sheet.CreateRow(133);
                row.CreateCell(0).SetCellValue("Corner-V2-Top");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Top1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Top2.ToString());
                row.CreateCell(3).SetCellValue("Init-AreaEN");
                row.CreateCell(4).SetCellValue(PasteInfo.bAreaEN1 == true ? "1" : "0");
                row.CreateCell(5).SetCellValue(PasteInfo.bAreaEN2 == true ? "1" : "0");

                row = sheet.CreateRow(134);
                row.CreateCell(0).SetCellValue("Corner-V2-Left");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Left1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Left2.ToString());
                row.CreateCell(3).SetCellValue("Init-AreaValue");
                row.CreateCell(4).SetCellValue(PasteInfo.iAreaMin1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.iAreaMin2.ToString());
                row = sheet.CreateRow(135);
                row.CreateCell(0).SetCellValue("Corner-V2-Width");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Width1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Width2.ToString());
                row.CreateCell(3).SetCellValue("Init-ThresholdValue");
                row.CreateCell(4).SetCellValue(PasteInfo.iAreaMax1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.iAreaMax2.ToString());
                row = sheet.CreateRow(136);
                row.CreateCell(0).SetCellValue("Corner-V2-Height");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_Height1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_Height2.ToString());
                row.CreateCell(3).SetCellValue("Init-OKStyle");
                row.CreateCell(4).SetCellValue(PasteInfo.iAreaOKStyle1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.iAreaOKStyle2.ToString());
                row = sheet.CreateRow(137);
                row.CreateCell(0).SetCellValue("Corner-V2-Strength");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_EdgeStrength1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_EdgeStrength2.ToString());
                row.CreateCell(3).SetCellValue("Init-Gain");
                row.CreateCell(4).SetCellValue(PasteInfo.GainInit1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.GainInit2.ToString());

                row = sheet.CreateRow(138);
                row.CreateCell(0).SetCellValue("Corner-V2-PicDir");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_PicDir1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_PicDir2.ToString());
                row.CreateCell(3).SetCellValue("Init-Offset");
                row.CreateCell(4).SetCellValue(PasteInfo.OffsetInit1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.OffsetInit2.ToString());

                row = sheet.CreateRow(139);
                row.CreateCell(0).SetCellValue("Corner-V2-BrightDir");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_V2_GrayValueDir1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_V2_GrayValueDir2.ToString());
                row.CreateCell(3).SetCellValue("Circle-Gain");
                row.CreateCell(4).SetCellValue(PasteInfo.GainCircle1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.GainCircle2.ToString());
                //角落点
                row = sheet.CreateRow(140);
                row.CreateCell(0).SetCellValue("Corner-PointX");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_Point1.X.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_Point2.X.ToString());
                row.CreateCell(3).SetCellValue("Circle-Offset");
                row.CreateCell(4).SetCellValue(PasteInfo.OffsetCircle1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.OffsetCircle2.ToString());
                row = sheet.CreateRow(141);
                row.CreateCell(0).SetCellValue("Corner-PointY");
                row.CreateCell(1).SetCellValue(PasteInfo.Corner_Point1.Y.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.Corner_Point2.Y.ToString());
                row.CreateCell(3).SetCellValue("H1-Gain");
                row.CreateCell(4).SetCellValue(PasteInfo.GainH1_1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.GainH1_2.ToString());

                row = sheet.CreateRow(142);
                row.CreateCell(0).SetCellValue("Corner-AngleIndex");
                row.CreateCell(1).SetCellValue(PasteInfo.CornerAngleIndex1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.CornerAngleIndex2.ToString());
                row.CreateCell(3).SetCellValue("H1-Offset");
                row.CreateCell(4).SetCellValue(PasteInfo.OffsetH1_1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.OffsetH1_2.ToString());
                //光源
                row = sheet.CreateRow(143);
                row.CreateCell(0).SetCellValue("RedUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bRed1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bRed2 == true ? "1" : "0");
                row.CreateCell(3).SetCellValue("H2-Gain");
                row.CreateCell(4).SetCellValue(PasteInfo.GainH2_1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.GainH2_2.ToString());
                row = sheet.CreateRow(144);
                row.CreateCell(0).SetCellValue("GreenUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bGreen1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bGreen2 == true ? "1" : "0");
                row.CreateCell(3).SetCellValue("H2-Offset");
                row.CreateCell(4).SetCellValue(PasteInfo.OffsetH2_1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.OffsetH2_2.ToString());
                row.CreateCell(6).SetCellValue("GrabLine-ROI");
                row.CreateCell(7).SetCellValue(PasteInfo.GrabLine_ROI1);
                row.CreateCell(8).SetCellValue(PasteInfo.GrabLine_ROI2);

                row = sheet.CreateRow(145);
                row.CreateCell(0).SetCellValue("BlueUse");
                row.CreateCell(1).SetCellValue(PasteInfo.bBlue1 == true ? "1" : "0");
                row.CreateCell(2).SetCellValue(PasteInfo.bBlue2 == true ? "1" : "0");
                row.CreateCell(3).SetCellValue("V1-Gain");
                row.CreateCell(4).SetCellValue(PasteInfo.GainV1_1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.GainV1_2.ToString());
                row.CreateCell(6).SetCellValue("GrabLine-EdgeStrength");
                row.CreateCell(7).SetCellValue(PasteInfo.GrabLine_EdgeStrength1.ToString());
                row.CreateCell(8).SetCellValue(PasteInfo.GrabLine_EdgeStrength2.ToString());

                row = sheet.CreateRow(146);
                row.CreateCell(0).SetCellValue("RedValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dRedValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dRedValue2.ToString());
                row.CreateCell(3).SetCellValue("V1-Offset");
                row.CreateCell(4).SetCellValue(PasteInfo.OffsetV1_1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.OffsetV1_2.ToString());
                row.CreateCell(6).SetCellValue("GrabLine-PicDir");
                row.CreateCell(7).SetCellValue(PasteInfo.GrabLine_PicDir1.ToString());
                row.CreateCell(8).SetCellValue(PasteInfo.GrabLine_PicDir2.ToString());

                row = sheet.CreateRow(147);
                row.CreateCell(0).SetCellValue("GreenValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dGreenValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dGreenValue2.ToString());
                row.CreateCell(3).SetCellValue("V2-Gain");
                row.CreateCell(4).SetCellValue(PasteInfo.GainV2_1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.GainV2_2.ToString());
                row.CreateCell(6).SetCellValue("GrabLine-GrayValueDir");
                row.CreateCell(7).SetCellValue(PasteInfo.GrabLine_GrayValueDir1.ToString());
                row.CreateCell(8).SetCellValue(PasteInfo.GrabLine_GrayValueDir2.ToString());

                row = sheet.CreateRow(148);
                row.CreateCell(0).SetCellValue("BlueValue");
                row.CreateCell(1).SetCellValue(PasteInfo.dBlueValue1.ToString());
                row.CreateCell(2).SetCellValue(PasteInfo.dBlueValue2.ToString());
                row.CreateCell(3).SetCellValue("V2-Offset");
                row.CreateCell(4).SetCellValue(PasteInfo.OffsetV2_1.ToString());
                row.CreateCell(5).SetCellValue(PasteInfo.OffsetV2_2.ToString());
                row.CreateCell(6).SetCellValue("GrabLine-Enable");
                row.CreateCell(7).SetCellValue(PasteInfo.GrabLine_Enable1.ToString());
                row.CreateCell(8).SetCellValue(PasteInfo.GrabLine_Enable2.ToString());
                #endregion

                if (PasteInfo.AlinIndex1 == 13)
                    HalconHelper.SaveModel(PasteNamePath, PasteInfo.Model1ID);
            }
            catch
            {
                return 1;
            }
            hssfworkbook.Write(file);
            file.Close();
            return 0;
        }
        public Variable.PASTAE ReadXls2Paste(string PasteNamePath, ref bool bOK)//Paste 文件夹
        {
            Variable.PASTAE PasteInfo = new Variable.PASTAE();
            InitializeWorkbook(PasteNamePath + "\\PASTE.xls");//程式参数XLS
            ISheet sheet = hssfworkbook.GetSheetAt(0);
            IRow row;
            try
            {
                #region Picture
                if (!File.Exists(PasteNamePath + "\\PASTE.xls"))
                {
                    bOK = false;
                    return PasteInfo;
                }
                if (File.Exists(PasteNamePath + "\\1.PNG"))
                {
                    PasteInfo.Align1 = new VisionImage();
                    PasteInfo.Align1.ReadVisionFile(PasteNamePath + "\\1.PNG");
                }
                if (File.Exists(PasteNamePath + "\\2.PNG"))
                {
                    PasteInfo.Align2 = new VisionImage();
                    PasteInfo.Align2.ReadVisionFile(PasteNamePath + "\\2.PNG");
                }
                if (File.Exists(PasteNamePath + "\\BadMark.PNG"))
                {
                    PasteInfo.BadMark_Image = new VisionImage();
                    PasteInfo.BadMark_Image.ReadVisionFile(PasteNamePath + "\\BadMark.PNG");
                }

                if (File.Exists(PasteNamePath + "\\H1_Init_Align1.PNG"))
                {
                    PasteInfo.Corner_H1_Align1 = new VisionImage();
                    PasteInfo.Corner_H1_Align1.ReadVisionFile(PasteNamePath + "\\H1_Init_Align1.PNG");
                }
                if (File.Exists(PasteNamePath + "\\H2_Init_Align1.PNG"))
                {
                    PasteInfo.Corner_H2_Align1 = new VisionImage();
                    PasteInfo.Corner_H2_Align1.ReadVisionFile(PasteNamePath + "\\H2_Init_Align1.PNG");
                }
                if (File.Exists(PasteNamePath + "\\V1_Init_Align1.PNG"))
                {
                    PasteInfo.Corner_V1_Align1 = new VisionImage();
                    PasteInfo.Corner_V1_Align1.ReadVisionFile(PasteNamePath + "\\V1_Init_Align1.PNG");
                }
                if (File.Exists(PasteNamePath + "\\V2_Init_Align1.PNG"))
                {
                    PasteInfo.Corner_V2_Align1 = new VisionImage();
                    PasteInfo.Corner_V2_Align1.ReadVisionFile(PasteNamePath + "\\V2_Init_Align1.PNG");
                }
                //
                if (File.Exists(PasteNamePath + "\\H1_Init_Align2.PNG"))
                {
                    PasteInfo.Corner_H1_Align2 = new VisionImage();
                    PasteInfo.Corner_H1_Align2.ReadVisionFile(PasteNamePath + "\\H1_Init_Align2.PNG");
                }
                if (File.Exists(PasteNamePath + "\\H2_Init_Align2.PNG"))
                {
                    PasteInfo.Corner_H2_Align2 = new VisionImage();
                    PasteInfo.Corner_H2_Align2.ReadVisionFile(PasteNamePath + "\\H2_Init_Align2.PNG");
                }
                if (File.Exists(PasteNamePath + "\\V1_Init_Align2.PNG"))
                {
                    PasteInfo.Corner_V1_Align2 = new VisionImage();
                    PasteInfo.Corner_V1_Align2.ReadVisionFile(PasteNamePath + "\\V1_Init_Align2.PNG");
                }
                if (File.Exists(PasteNamePath + "\\V2_Init_Align2.PNG"))
                {
                    PasteInfo.Corner_V2_Align2 = new VisionImage();
                    PasteInfo.Corner_V2_Align2.ReadVisionFile(PasteNamePath + "\\V2_Init_Align2.PNG");
                }
                #endregion
                row = sheet.GetRow(0);
                PasteInfo.PasteName = row.Cells[1].StringCellValue;
                row = sheet.GetRow(1);
                PasteInfo.OffsetX = double.Parse(row.Cells[4].StringCellValue);
                row = sheet.GetRow(2);
                PasteInfo.CamPoint1 = new PointF();
                PasteInfo.CamPoint2 = new PointF();
                PasteInfo.CamPoint1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.CamPoint2.X = float.Parse(row.Cells[2].StringCellValue);
                PasteInfo.OffsetY = double.Parse(row.Cells[4].StringCellValue);
                row = sheet.GetRow(3);
                PasteInfo.CamPoint1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.CamPoint2.Y = float.Parse(row.Cells[2].StringCellValue);
                PasteInfo.OffsetR = double.Parse(row.Cells[4].StringCellValue);
                row = sheet.GetRow(4);
                PasteInfo.Shutter1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Shutter2 = double.Parse(row.Cells[2].StringCellValue);
                PasteInfo.BadMark_AlgthrimIndex = short.Parse(row.Cells[4].StringCellValue);

                row = sheet.GetRow(5);
                PasteInfo.AlinIndex1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.AlinIndex2 = short.Parse(row.Cells[2].StringCellValue);
                PasteInfo.BadMark_ROI_Top = short.Parse(row.Cells[4].StringCellValue);

                row = sheet.GetRow(6);
                PasteInfo.Mark1 = new PointF();
                PasteInfo.Mark2 = new PointF();
                PasteInfo.Mark1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Mark2.X = float.Parse(row.Cells[2].StringCellValue);
                PasteInfo.BadMark_ROI_Left = short.Parse(row.Cells[4].StringCellValue);

                row = sheet.GetRow(7);
                PasteInfo.Mark1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Mark2.Y = float.Parse(row.Cells[2].StringCellValue);
                PasteInfo.BadMark_ROI_Width = short.Parse(row.Cells[4].StringCellValue);

                row = sheet.GetRow(8);
                PasteInfo.Init_ROI_Top1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Init_ROI_Top2 = short.Parse(row.Cells[2].StringCellValue);
                PasteInfo.BadMark_ROI_Height = short.Parse(row.Cells[4].StringCellValue);

                row = sheet.GetRow(9);
                PasteInfo.Init_ROI_Left1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Init_ROI_Left2 = short.Parse(row.Cells[2].StringCellValue);
                PasteInfo.BadMark_Threshold = short.Parse(row.Cells[4].StringCellValue);

                row = sheet.GetRow(10);
                PasteInfo.Init_ROI_Width1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Init_ROI_Width2 = short.Parse(row.Cells[2].StringCellValue);
                PasteInfo.ISBadMarkWhite = short.Parse(row.Cells[4].StringCellValue);

                row = sheet.GetRow(11);
                PasteInfo.Init_ROI_Height1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Init_ROI_Height2 = short.Parse(row.Cells[2].StringCellValue);
                PasteInfo.BadMark_LimtArea = int.Parse(row.Cells[4].StringCellValue);


                row = sheet.GetRow(12);
                PasteInfo.Init_OffsetX1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Init_OffsetX2 = short.Parse(row.Cells[2].StringCellValue);
                PasteInfo.BadMark_Score = short.Parse(row.Cells[4].StringCellValue);


                row = sheet.GetRow(13);
                PasteInfo.Init_OffsetY1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Init_OffsetY2 = short.Parse(row.Cells[2].StringCellValue);
                PasteInfo.BadMark_MinAngle = double.Parse(row.Cells[4].StringCellValue);


                row = sheet.GetRow(14);
                PasteInfo.Init_Point1 = new PointF();
                PasteInfo.Init_Point2 = new PointF();
                PasteInfo.Init_Point1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Init_Point2.X = float.Parse(row.Cells[2].StringCellValue);
                PasteInfo.BadMark_MaxAngle = double.Parse(row.Cells[4].StringCellValue);


                row = sheet.GetRow(15);
                PasteInfo.Init_Point1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Init_Point2.Y = float.Parse(row.Cells[2].StringCellValue);
                PasteInfo.BadMark_Shutter = double.Parse(row.Cells[4].StringCellValue);
                row = sheet.GetRow(16);
                PasteInfo.Init_Angle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Init_Angle2 = double.Parse(row.Cells[2].StringCellValue);
                try
                {
                    PasteInfo.BaseAngle = double.Parse(row.Cells[4].StringCellValue);
                }
                catch { }
                row = sheet.GetRow(17);
                PasteInfo.Score1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Score2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(18);
                PasteInfo.MinAngle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.MinAngle2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(19);
                PasteInfo.MaxAngle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.MaxAngle2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(20);
                PasteInfo.S_ROI_Top1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.S_ROI_Top2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(21);
                PasteInfo.S_ROI_Left1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.S_ROI_Left2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(22);
                PasteInfo.S_ROI_Width1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.S_ROI_Width2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(23);
                PasteInfo.S_ROI_Height1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.S_ROI_Height2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(24);
                PasteInfo.S_MinR1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.S_MinR2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(25);
                PasteInfo.S_MaxR1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.S_MaxR2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(26);
                PasteInfo.S_Center1 = new PointF();
                PasteInfo.S_Center2 = new PointF();
                PasteInfo.S_Center1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.S_Center2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(27);
                PasteInfo.S_Center1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.S_Center2.Y = float.Parse(row.Cells[2].StringCellValue);
                //Corner-H1
                PasteInfo.Corner_H1_Point1 = new PointF();
                PasteInfo.Corner_H1_CamPoint1 = new PointF();
                PasteInfo.Corner_H1_Init_Point1 = new PointF();
                PasteInfo.Corner_H1_Point2 = new PointF();
                PasteInfo.Corner_H1_CamPoint2 = new PointF();
                PasteInfo.Corner_H1_Init_Point2 = new PointF();
                PasteInfo.Corner_H2_Point1 = new PointF();
                PasteInfo.Corner_H2_CamPoint1 = new PointF();
                PasteInfo.Corner_H2_Init_Point1 = new PointF();
                PasteInfo.Corner_H2_Point2 = new PointF();
                PasteInfo.Corner_H2_CamPoint2 = new PointF();
                PasteInfo.Corner_H2_Init_Point2 = new PointF();
                PasteInfo.Corner_V1_Point1 = new PointF();
                PasteInfo.Corner_V1_CamPoint1 = new PointF();
                PasteInfo.Corner_V1_Init_Point1 = new PointF();
                PasteInfo.Corner_V1_Point2 = new PointF();
                PasteInfo.Corner_V1_CamPoint2 = new PointF();
                PasteInfo.Corner_V1_Init_Point2 = new PointF();
                PasteInfo.Corner_V2_Point1 = new PointF();
                PasteInfo.Corner_V2_CamPoint1 = new PointF();
                PasteInfo.Corner_V2_Init_Point1 = new PointF();
                PasteInfo.Corner_V2_Point2 = new PointF();
                PasteInfo.Corner_V2_CamPoint2 = new PointF();
                PasteInfo.Corner_V2_Init_Point2 = new PointF();

                PasteInfo.Corner_Point1 = new PointF();
                PasteInfo.Corner_Point2 = new PointF();
                row = sheet.GetRow(28);
                PasteInfo.Corner_H1_Point1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Point2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(29);
                PasteInfo.Corner_H1_Point1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Point2.Y = float.Parse(row.Cells[2].StringCellValue);
                //HI-INIT
                #region HI-INIT
                row = sheet.GetRow(30);
                PasteInfo.Corner_H1_CamPoint1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_CamPoint2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(31);
                PasteInfo.Corner_H1_CamPoint1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_CamPoint2.Y = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(32);
                PasteInfo.Corner_H1_Shutter1 = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Shutter2 = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(33);
                PasteInfo.bCorner_H1_Red1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_H1_Red2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(34);
                PasteInfo.bCorner_H1_Green1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_H1_Green2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(35);
                PasteInfo.bCorner_H1_Blue1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_H1_Blue2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(36);
                PasteInfo.dCorner_H1_RedValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_H1_RedValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(37);
                PasteInfo.dCorner_H1_GreenValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_H1_GreenValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(38);
                PasteInfo.dCorner_H1_BlueValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_H1_BlueValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(39);
                PasteInfo.Corner_H1_Init_Top1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Init_Top2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(40);
                PasteInfo.Corner_H1_Init_Left1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Init_Left2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(41);
                PasteInfo.Corner_H1_Init_Width1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Init_Width2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(42);
                PasteInfo.Corner_H1_Init_Height1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Init_Height2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(43);
                PasteInfo.Corner_H1_Init_Point1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Init_Point2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(44);
                PasteInfo.Corner_H1_Init_Point1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Init_Point2.Y = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(45);
                PasteInfo.Corner_H1_Init_Angle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Init_Angle2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(46);
                PasteInfo.Corner_H1_Init_Score1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Init_Score2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(47);
                PasteInfo.Corner_H1_Init_MinAngle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Init_MinAngle2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(48);
                PasteInfo.Corner_H1_Init_MaxAngle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Init_MaxAngle2 = double.Parse(row.Cells[2].StringCellValue);
                #endregion

                row = sheet.GetRow(49);
                PasteInfo.Corner_H1_Top1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Top2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(50);
                PasteInfo.Corner_H1_Left1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Left2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(51);
                PasteInfo.Corner_H1_Width1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Width2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(52);
                PasteInfo.Corner_H1_Height1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Height2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(53);
                PasteInfo.Corner_H1_EdgeStrength1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_EdgeStrength2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(54);
                PasteInfo.Corner_H1_PicDir1 = row.Cells[1].StringCellValue;
                PasteInfo.Corner_H1_PicDir2 = row.Cells[2].StringCellValue;
                row = sheet.GetRow(55);
                PasteInfo.Corner_H1_GrayValueDir1 = row.Cells[1].StringCellValue;
                PasteInfo.Corner_H1_GrayValueDir2 = row.Cells[2].StringCellValue;
                //Corner-H2
                row = sheet.GetRow(56);
                PasteInfo.Corner_H2_Point1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Point2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(57);
                PasteInfo.Corner_H2_Point1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Point2.Y = float.Parse(row.Cells[2].StringCellValue);

                #region H2-INIT
                row = sheet.GetRow(58);
                PasteInfo.Corner_H2_CamPoint1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_CamPoint2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(59);
                PasteInfo.Corner_H2_CamPoint1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_CamPoint2.Y = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(60);
                PasteInfo.Corner_H2_Shutter1 = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Shutter2 = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(61);
                PasteInfo.bCorner_H2_Red1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_H2_Red2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(62);
                PasteInfo.bCorner_H2_Green1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_H2_Green2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(63);
                PasteInfo.bCorner_H2_Blue1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_H2_Blue2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(64);
                PasteInfo.dCorner_H2_RedValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_H2_RedValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(65);
                PasteInfo.dCorner_H2_GreenValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_H2_GreenValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(66);
                PasteInfo.dCorner_H2_BlueValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_H2_BlueValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(67);
                PasteInfo.Corner_H2_Init_Top1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Init_Top2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(68);
                PasteInfo.Corner_H2_Init_Left1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Init_Left2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(69);
                PasteInfo.Corner_H2_Init_Width1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Init_Width2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(70);
                PasteInfo.Corner_H2_Init_Height1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Init_Height2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(71);
                PasteInfo.Corner_H2_Init_Point1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Init_Point2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(72);
                PasteInfo.Corner_H2_Init_Point1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Init_Point2.Y = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(73);
                PasteInfo.Corner_H2_Init_Angle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Init_Angle2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(74);
                PasteInfo.Corner_H2_Init_Score1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Init_Score2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(75);
                PasteInfo.Corner_H2_Init_MinAngle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Init_MinAngle2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(76);
                PasteInfo.Corner_H2_Init_MaxAngle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Init_MaxAngle2 = double.Parse(row.Cells[2].StringCellValue);
                #endregion

                row = sheet.GetRow(77);
                PasteInfo.Corner_H2_Top1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Top2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(78);
                PasteInfo.Corner_H2_Left1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Left2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(79);
                PasteInfo.Corner_H2_Width1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Width2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(80);
                PasteInfo.Corner_H2_Height1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Height2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(81);
                PasteInfo.Corner_H2_EdgeStrength1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_EdgeStrength2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(82);
                PasteInfo.Corner_H2_PicDir1 = row.Cells[1].StringCellValue;
                PasteInfo.Corner_H2_PicDir2 = row.Cells[2].StringCellValue;
                row = sheet.GetRow(83);
                PasteInfo.Corner_H2_GrayValueDir1 = row.Cells[1].StringCellValue;
                PasteInfo.Corner_H2_GrayValueDir2 = row.Cells[2].StringCellValue;
                //Corner-V1
                row = sheet.GetRow(84);
                PasteInfo.Corner_V1_Point1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Point2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(85);
                PasteInfo.Corner_V1_Point1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Point2.Y = float.Parse(row.Cells[2].StringCellValue);

                #region V1-INIT
                row = sheet.GetRow(86);
                PasteInfo.Corner_V1_CamPoint1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_CamPoint2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(87);
                PasteInfo.Corner_V1_CamPoint1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_CamPoint2.Y = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(88);
                PasteInfo.Corner_V1_Shutter1 = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Shutter2 = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(89);
                PasteInfo.bCorner_V1_Red1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_V1_Red2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(90);
                PasteInfo.bCorner_V1_Green1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_V1_Green2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(91);
                PasteInfo.bCorner_V1_Blue1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_V1_Blue2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(92);
                PasteInfo.dCorner_V1_RedValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_V1_RedValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(93);
                PasteInfo.dCorner_V1_GreenValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_V1_GreenValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(94);
                PasteInfo.dCorner_V1_BlueValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_V1_BlueValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(95);
                PasteInfo.Corner_V1_Init_Top1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Init_Top2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(96);
                PasteInfo.Corner_V1_Init_Left1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Init_Left2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(97);
                PasteInfo.Corner_V1_Init_Width1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Init_Width2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(98);
                PasteInfo.Corner_V1_Init_Height1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Init_Height2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(99);
                PasteInfo.Corner_V1_Init_Point1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Init_Point2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(100);
                PasteInfo.Corner_V1_Init_Point1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Init_Point2.Y = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(101);
                PasteInfo.Corner_V1_Init_Angle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Init_Angle2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(102);
                PasteInfo.Corner_V1_Init_Score1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Init_Score2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(103);
                PasteInfo.Corner_V1_Init_MinAngle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Init_MinAngle2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(104);
                PasteInfo.Corner_V1_Init_MaxAngle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Init_MaxAngle2 = double.Parse(row.Cells[2].StringCellValue);
                #endregion

                row = sheet.GetRow(105);
                PasteInfo.Corner_V1_Top1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Top2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(106);
                PasteInfo.Corner_V1_Left1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Left2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(107);
                PasteInfo.Corner_V1_Width1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Width2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(108);
                PasteInfo.Corner_V1_Height1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Height2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(109);
                PasteInfo.Corner_V1_EdgeStrength1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_EdgeStrength2 = double.Parse(row.Cells[1].StringCellValue);
                row = sheet.GetRow(110);
                PasteInfo.Corner_V1_PicDir1 = row.Cells[1].StringCellValue;
                PasteInfo.Corner_V1_PicDir2 = row.Cells[2].StringCellValue;
                row = sheet.GetRow(111);
                PasteInfo.Corner_V1_GrayValueDir1 = row.Cells[1].StringCellValue;
                PasteInfo.Corner_V1_GrayValueDir2 = row.Cells[2].StringCellValue;
                //Corner-V2
                row = sheet.GetRow(112);
                PasteInfo.Corner_V2_Point1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Point2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(113);
                PasteInfo.Corner_V2_Point1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Point2.Y = float.Parse(row.Cells[2].StringCellValue);

                #region V2-INIT
                row = sheet.GetRow(114);
                PasteInfo.Corner_V2_CamPoint1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_CamPoint2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(115);
                PasteInfo.Corner_V2_CamPoint1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_CamPoint2.Y = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(116);
                PasteInfo.Corner_V2_Shutter1 = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Shutter2 = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(117);
                PasteInfo.bCorner_V2_Red1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_V2_Red2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(118);
                PasteInfo.bCorner_V2_Green1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_V2_Green2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(119);
                PasteInfo.bCorner_V2_Blue1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_V2_Blue2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(120);
                PasteInfo.dCorner_V2_RedValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_V2_RedValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(121);
                PasteInfo.dCorner_V2_GreenValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_V2_GreenValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(122);
                PasteInfo.dCorner_V2_BlueValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_V2_BlueValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(123);
                PasteInfo.Corner_V2_Init_Top1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Init_Top2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(124);
                PasteInfo.Corner_V2_Init_Left1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Init_Left2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(125);
                PasteInfo.Corner_V2_Init_Width1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Init_Width2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(126);
                PasteInfo.Corner_V2_Init_Height1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Init_Height2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(127);
                PasteInfo.Corner_V2_Init_Point1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Init_Point2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(128);
                PasteInfo.Corner_V2_Init_Point1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Init_Point2.Y = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(129);
                PasteInfo.Corner_V2_Init_Angle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Init_Angle2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(130);
                PasteInfo.Corner_V2_Init_Score1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Init_Score2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(131);
                PasteInfo.Corner_V2_Init_MinAngle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Init_MinAngle2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(132);
                PasteInfo.Corner_V2_Init_MaxAngle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Init_MaxAngle2 = double.Parse(row.Cells[2].StringCellValue);
                #endregion

                row = sheet.GetRow(133);
                PasteInfo.Corner_V2_Top1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Top2 = short.Parse(row.Cells[2].StringCellValue);
                PasteInfo.bAreaEN1 = row.Cells[4].StringCellValue == "1" ? true : false;
                PasteInfo.bAreaEN2 = row.Cells[5].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(134);
                PasteInfo.Corner_V2_Left1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Left2 = short.Parse(row.Cells[2].StringCellValue);
                PasteInfo.iAreaMin1 = int.Parse(row.Cells[4].StringCellValue);
                PasteInfo.iAreaMin2 = int.Parse(row.Cells[5].StringCellValue);
                row = sheet.GetRow(135);
                PasteInfo.Corner_V2_Width1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Width2 = short.Parse(row.Cells[2].StringCellValue);
                PasteInfo.iAreaMax1 = short.Parse(row.Cells[4].StringCellValue);
                PasteInfo.iAreaMax2 = short.Parse(row.Cells[5].StringCellValue);
                row = sheet.GetRow(136);
                PasteInfo.Corner_V2_Height1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Height2 = short.Parse(row.Cells[2].StringCellValue);
                PasteInfo.iAreaOKStyle1 = short.Parse(row.Cells[4].StringCellValue);
                PasteInfo.iAreaOKStyle2 = short.Parse(row.Cells[5].StringCellValue);
                row = sheet.GetRow(137);
                PasteInfo.Corner_V2_EdgeStrength1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_EdgeStrength2 = double.Parse(row.Cells[2].StringCellValue);
                PasteInfo.GainInit1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.GainInit2 = double.Parse(row.Cells[5].StringCellValue);

                row = sheet.GetRow(138);
                PasteInfo.Corner_V2_PicDir1 = row.Cells[1].StringCellValue;
                PasteInfo.Corner_V2_PicDir2 = row.Cells[2].StringCellValue;
                PasteInfo.OffsetInit1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.OffsetInit2 = double.Parse(row.Cells[5].StringCellValue);

                row = sheet.GetRow(139);
                PasteInfo.Corner_V2_GrayValueDir1 = row.Cells[1].StringCellValue;
                PasteInfo.Corner_V2_GrayValueDir2 = row.Cells[2].StringCellValue;
                PasteInfo.GainCircle1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.GainCircle2 = double.Parse(row.Cells[5].StringCellValue);

                //角落点
                row = sheet.GetRow(140);
                PasteInfo.Corner_Point1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_Point2.X = float.Parse(row.Cells[2].StringCellValue);
                PasteInfo.OffsetCircle1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.OffsetCircle2 = double.Parse(row.Cells[5].StringCellValue);

                row = sheet.GetRow(141);
                PasteInfo.Corner_Point1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_Point2.Y = float.Parse(row.Cells[2].StringCellValue);
                PasteInfo.GainH1_1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.GainH1_2 = double.Parse(row.Cells[5].StringCellValue);

                row = sheet.GetRow(142);
                PasteInfo.CornerAngleIndex1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.CornerAngleIndex2 = short.Parse(row.Cells[2].StringCellValue);
                PasteInfo.OffsetH1_1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.OffsetH1_2 = double.Parse(row.Cells[5].StringCellValue);

                row = sheet.GetRow(143);
                PasteInfo.bRed1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bRed2 = row.Cells[2].StringCellValue == "1" ? true : false;
                PasteInfo.GainH2_1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.GainH2_2 = double.Parse(row.Cells[5].StringCellValue);

                row = sheet.GetRow(144);
                PasteInfo.bGreen1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bGreen2 = row.Cells[2].StringCellValue == "1" ? true : false;
                PasteInfo.OffsetH2_1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.OffsetH2_2 = double.Parse(row.Cells[5].StringCellValue);

                if (row.Cells.Count <= 6)
                {
                    PasteInfo.GrabLine_ROI1 = "0,0,0,0";
                    PasteInfo.GrabLine_ROI2 = "0,0,0,0";
                    PasteInfo.GrabLine_EdgeStrength1 = 75;
                    PasteInfo.GrabLine_EdgeStrength2 = 75;
                    PasteInfo.GrabLine_PicDir1 = "1";
                    PasteInfo.GrabLine_PicDir2 = "1";
                    PasteInfo.GrabLine_GrayValueDir1 = "1";
                    PasteInfo.GrabLine_GrayValueDir2 = "1";
                    PasteInfo.GrabLine_Enable1 = false;
                    PasteInfo.GrabLine_Enable2 = false;
                }
                else
                {
                    row = sheet.GetRow(144);
                    PasteInfo.GrabLine_ROI1 = row.Cells[7].StringCellValue;
                    PasteInfo.GrabLine_ROI2 = row.Cells[8].StringCellValue;

                    row = sheet.GetRow(145);
                    PasteInfo.GrabLine_EdgeStrength1 = double.Parse(row.Cells[7].StringCellValue);
                    PasteInfo.GrabLine_EdgeStrength2 = double.Parse(row.Cells[8].StringCellValue);

                    row = sheet.GetRow(146);
                    PasteInfo.GrabLine_PicDir1 = row.Cells[7].StringCellValue;
                    PasteInfo.GrabLine_PicDir2 = row.Cells[8].StringCellValue;

                    row = sheet.GetRow(147);
                    PasteInfo.GrabLine_GrayValueDir1 = row.Cells[7].StringCellValue;
                    PasteInfo.GrabLine_GrayValueDir2 = row.Cells[8].StringCellValue;

                    row = sheet.GetRow(148);
                    PasteInfo.GrabLine_Enable1 = row.Cells[7].StringCellValue == "True" ? true : false;
                    PasteInfo.GrabLine_Enable2 = row.Cells[8].StringCellValue == "True" ? true : false;
                }

                row = sheet.GetRow(145);
                PasteInfo.bBlue1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bBlue2 = row.Cells[2].StringCellValue == "1" ? true : false;
                PasteInfo.GainV1_1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.GainV1_2 = double.Parse(row.Cells[5].StringCellValue);

                row = sheet.GetRow(146);
                PasteInfo.dRedValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dRedValue2 = double.Parse(row.Cells[2].StringCellValue);
                PasteInfo.OffsetV1_1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.OffsetV1_2 = double.Parse(row.Cells[5].StringCellValue);

                row = sheet.GetRow(147);
                PasteInfo.dGreenValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dGreenValue2 = double.Parse(row.Cells[2].StringCellValue);
                PasteInfo.GainV2_1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.GainV2_2 = double.Parse(row.Cells[5].StringCellValue);

                row = sheet.GetRow(148);//72
                PasteInfo.dBlueValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dBlueValue2 = double.Parse(row.Cells[2].StringCellValue);
                PasteInfo.OffsetV2_1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.OffsetV2_2 = double.Parse(row.Cells[5].StringCellValue);

                //计算贴附点个数
                int rowIndex = 0;
                short PastePointCount = 0;
                while (rowIndex < 1000000000)//默认小于1000000000
                {
                    row = sheet.GetRow(rowIndex + 152);//76
                    try
                    {
                        if (row.Cells[4].StringCellValue == "")
                        {
                            break;
                        }
                    }
                    catch
                    {
                        break;
                    }
                    rowIndex++;
                }
                //贴附点信息赋值
                PastePointCount = (short)(rowIndex);
                PasteInfo.IsPastePointsAbs = new bool[PastePointCount];
                PasteInfo.PastePN = new string[PastePointCount];
                PasteInfo.Region = new string[PastePointCount];
                PasteInfo.PasteEN = new bool[PastePointCount];
                PasteInfo.PastePoints = new PointF[PastePointCount];
                PasteInfo.PasteAngle = new double[PastePointCount];
                PasteInfo.PasteHeight = new List<List<double>>();
                PasteInfo.FeederIndex = new short[PastePointCount];
                PasteInfo.NozzleIndex = new short[PastePointCount];
                PasteInfo.Delay = new short[PastePointCount];
                PasteInfo.BadMarkPoints = new PointF[PastePointCount];
                PasteInfo.BadMarkEN = new bool[PastePointCount];
                PasteInfo.iPasteED = new int[PastePointCount];
                PasteInfo.TransformedBadMarkPoints = new PointF[PastePointCount];
                PasteInfo.TransformedPoints = new PointF[PastePointCount];

                PasteInfo.OffsetX_Single = new double[PastePointCount];
                PasteInfo.OffsetY_Single = new double[PastePointCount];

                for (int i = 0; i < PastePointCount; i++)
                {
                    row = sheet.GetRow(i + 152);
                    PasteInfo.PastePoints[i] = new PointF(float.Parse(row.Cells[1].StringCellValue), float.Parse(row.Cells[2].StringCellValue));
                    PasteInfo.PasteAngle[i] = double.Parse(row.Cells[3].StringCellValue);
                    PasteInfo.PasteHeight.Add(new List<double>());

                    for (int nz = 0; nz < Variable.NOZZLE_NUM; ++nz)
                    {
                        PasteInfo.PasteHeight[i].Add(double.Parse(row.Cells[4 + nz].StringCellValue));
                    }

                    PasteInfo.PastePN[i] = row.Cells[4 + Variable.NOZZLE_NUM].StringCellValue;
                    PasteInfo.PasteEN[i] = row.Cells[5 + Variable.NOZZLE_NUM].StringCellValue == "1" ? true : false;
                    PasteInfo.FeederIndex[i] = short.Parse(row.Cells[6 + Variable.NOZZLE_NUM].StringCellValue);
                    PasteInfo.NozzleIndex[i] = short.Parse(row.Cells[7 + Variable.NOZZLE_NUM].StringCellValue);
                    PasteInfo.Delay[i] = short.Parse(row.Cells[8 + Variable.NOZZLE_NUM].StringCellValue);
                    PasteInfo.BadMarkEN[i] = row.Cells[9 + Variable.NOZZLE_NUM].StringCellValue == "1" ? true : false;
                    PasteInfo.BadMarkPoints[i] = new PointF(float.Parse(row.Cells[10 + Variable.NOZZLE_NUM].StringCellValue)
                        , float.Parse(row.Cells[11 + Variable.NOZZLE_NUM].StringCellValue));
                    PasteInfo.IsPastePointsAbs[i] = row.Cells[12 + Variable.NOZZLE_NUM].StringCellValue == "1" ? true : false;

                    try
                    {
                        PasteInfo.OffsetX_Single[i] = double.Parse(row.Cells[13 + Variable.NOZZLE_NUM].StringCellValue);
                        PasteInfo.OffsetY_Single[i] = double.Parse(row.Cells[14 + Variable.NOZZLE_NUM].StringCellValue);
                        PasteInfo.Region[i] = row.Cells[15 + Variable.NOZZLE_NUM].StringCellValue;
                    }
                    catch { }
                }
            }
            catch
            {
                bOK = false;
                return PasteInfo;
            }
            bOK = true;
            hssfworkbook.Clear();
            return PasteInfo;
        }
        public Variable.PASTAE ReadXls2Label(string PasteNamePath, ref bool bOK)//Label 文件夹
        {
            Variable.PASTAE PasteInfo = new Variable.PASTAE();
            InitializeWorkbook(PasteNamePath + "\\PASTE.xls");//程式参数XLS
            try
            {
                ISheet sheet = hssfworkbook.GetSheetAt(0);
                IRow row;
                #region Picture
                if (!File.Exists(PasteNamePath + "\\PASTE.xls"))
                {
                    bOK = false;
                    return PasteInfo;
                }
                if (File.Exists(PasteNamePath + "\\1.PNG"))
                {
                    PasteInfo.Align1 = new VisionImage();
                    PasteInfo.Align1.ReadVisionFile(PasteNamePath + "\\1.PNG");
                }
                if (File.Exists(PasteNamePath + "\\2.PNG"))
                {
                    PasteInfo.Align2 = new VisionImage();
                    PasteInfo.Align2.ReadVisionFile(PasteNamePath + "\\2.PNG");
                }
                if (File.Exists(PasteNamePath + "\\BadMark.PNG"))
                {
                    PasteInfo.BadMark_Image = new VisionImage();
                    PasteInfo.BadMark_Image.ReadVisionFile(PasteNamePath + "\\BadMark.PNG");
                }

                if (File.Exists(PasteNamePath + "\\H1_Init_Align1.PNG"))
                {
                    PasteInfo.Corner_H1_Align1 = new VisionImage();
                    PasteInfo.Corner_H1_Align1.ReadVisionFile(PasteNamePath + "\\H1_Init_Align1.PNG");
                }
                if (File.Exists(PasteNamePath + "\\H2_Init_Align1.PNG"))
                {
                    PasteInfo.Corner_H2_Align1 = new VisionImage();
                    PasteInfo.Corner_H2_Align1.ReadVisionFile(PasteNamePath + "\\H2_Init_Align1.PNG");
                }
                if (File.Exists(PasteNamePath + "\\V1_Init_Align1.PNG"))
                {
                    PasteInfo.Corner_V1_Align1 = new VisionImage();
                    PasteInfo.Corner_V1_Align1.ReadVisionFile(PasteNamePath + "\\V1_Init_Align1.PNG");
                }
                if (File.Exists(PasteNamePath + "\\V2_Init_Align1.PNG"))
                {
                    PasteInfo.Corner_V2_Align1 = new VisionImage();
                    PasteInfo.Corner_V2_Align1.ReadVisionFile(PasteNamePath + "\\V2_Init_Align1.PNG");
                }
                //
                if (File.Exists(PasteNamePath + "\\H1_Init_Align2.PNG"))
                {
                    PasteInfo.Corner_H1_Align2 = new VisionImage();
                    PasteInfo.Corner_H1_Align2.ReadVisionFile(PasteNamePath + "\\H1_Init_Align2.PNG");
                }
                if (File.Exists(PasteNamePath + "\\H2_Init_Align2.PNG"))
                {
                    PasteInfo.Corner_H2_Align2 = new VisionImage();
                    PasteInfo.Corner_H2_Align2.ReadVisionFile(PasteNamePath + "\\H2_Init_Align2.PNG");
                }
                if (File.Exists(PasteNamePath + "\\V1_Init_Align2.PNG"))
                {
                    PasteInfo.Corner_V1_Align2 = new VisionImage();
                    PasteInfo.Corner_V1_Align2.ReadVisionFile(PasteNamePath + "\\V1_Init_Align2.PNG");
                }
                if (File.Exists(PasteNamePath + "\\V2_Init_Align2.PNG"))
                {
                    PasteInfo.Corner_V2_Align2 = new VisionImage();
                    PasteInfo.Corner_V2_Align2.ReadVisionFile(PasteNamePath + "\\V2_Init_Align2.PNG");
                }
                #endregion
                row = sheet.GetRow(0);
                PasteInfo.PasteName = row.Cells[1].StringCellValue;
                row = sheet.GetRow(1);
                //PasteInfo.OffsetX = double.Parse(row.Cells[4].StringCellValue);
                row = sheet.GetRow(2);
                PasteInfo.CamPoint1 = new PointF();
                PasteInfo.CamPoint2 = new PointF();
                PasteInfo.CamPoint1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.CamPoint2.X = float.Parse(row.Cells[2].StringCellValue);
                //PasteInfo.OffsetY = double.Parse(row.Cells[4].StringCellValue);
                row = sheet.GetRow(3);
                PasteInfo.CamPoint1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.CamPoint2.Y = float.Parse(row.Cells[2].StringCellValue);
                //PasteInfo.OffsetR = double.Parse(row.Cells[4].StringCellValue);
                row = sheet.GetRow(4);
                PasteInfo.Shutter1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Shutter2 = double.Parse(row.Cells[2].StringCellValue);
                //PasteInfo.BadMark_AlgthrimIndex = short.Parse(row.Cells[4].StringCellValue);

                row = sheet.GetRow(5);
                PasteInfo.AlinIndex1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.AlinIndex2 = short.Parse(row.Cells[2].StringCellValue);
                //PasteInfo.BadMark_ROI_Top = short.Parse(row.Cells[4].StringCellValue);

                row = sheet.GetRow(6);
                PasteInfo.Mark1 = new PointF();
                PasteInfo.Mark2 = new PointF();
                PasteInfo.Mark1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Mark2.X = float.Parse(row.Cells[2].StringCellValue);
                //PasteInfo.BadMark_ROI_Left = short.Parse(row.Cells[4].StringCellValue);

                row = sheet.GetRow(7);
                PasteInfo.Mark1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Mark2.Y = float.Parse(row.Cells[2].StringCellValue);
                //PasteInfo.BadMark_ROI_Width = short.Parse(row.Cells[4].StringCellValue);

                row = sheet.GetRow(8);
                PasteInfo.Init_ROI_Top1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Init_ROI_Top2 = short.Parse(row.Cells[2].StringCellValue);
                //PasteInfo.BadMark_ROI_Height = short.Parse(row.Cells[4].StringCellValue);

                row = sheet.GetRow(9);
                PasteInfo.Init_ROI_Left1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Init_ROI_Left2 = short.Parse(row.Cells[2].StringCellValue);
                //PasteInfo.BadMark_Threshold = short.Parse(row.Cells[4].StringCellValue);

                row = sheet.GetRow(10);
                PasteInfo.Init_ROI_Width1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Init_ROI_Width2 = short.Parse(row.Cells[2].StringCellValue);
                //PasteInfo.ISBadMarkWhite = short.Parse(row.Cells[4].StringCellValue);

                row = sheet.GetRow(11);
                PasteInfo.Init_ROI_Height1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Init_ROI_Height2 = short.Parse(row.Cells[2].StringCellValue);
                //PasteInfo.BadMark_LimtArea = int.Parse(row.Cells[4].StringCellValue);


                row = sheet.GetRow(12);
                PasteInfo.Init_OffsetX1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Init_OffsetX2 = short.Parse(row.Cells[2].StringCellValue);
                //PasteInfo.BadMark_Score = short.Parse(row.Cells[4].StringCellValue);


                row = sheet.GetRow(13);
                PasteInfo.Init_OffsetY1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Init_OffsetY2 = short.Parse(row.Cells[2].StringCellValue);
                //PasteInfo.BadMark_MinAngle = double.Parse(row.Cells[4].StringCellValue);


                row = sheet.GetRow(14);
                PasteInfo.Init_Point1 = new PointF();
                PasteInfo.Init_Point2 = new PointF();
                PasteInfo.Init_Point1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Init_Point2.X = float.Parse(row.Cells[2].StringCellValue);
                //PasteInfo.BadMark_MaxAngle = double.Parse(row.Cells[4].StringCellValue);


                row = sheet.GetRow(15);
                PasteInfo.Init_Point1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Init_Point2.Y = float.Parse(row.Cells[2].StringCellValue);
                //PasteInfo.BadMark_Shutter = double.Parse(row.Cells[4].StringCellValue);
                row = sheet.GetRow(16);
                PasteInfo.Init_Angle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Init_Angle2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(17);
                PasteInfo.Score1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Score2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(18);
                PasteInfo.MinAngle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.MinAngle2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(19);
                PasteInfo.MaxAngle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.MaxAngle2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(20);
                PasteInfo.S_ROI_Top1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.S_ROI_Top2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(21);
                PasteInfo.S_ROI_Left1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.S_ROI_Left2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(22);
                PasteInfo.S_ROI_Width1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.S_ROI_Width2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(23);
                PasteInfo.S_ROI_Height1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.S_ROI_Height2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(24);
                PasteInfo.S_MinR1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.S_MinR2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(25);
                PasteInfo.S_MaxR1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.S_MaxR2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(26);
                PasteInfo.S_Center1 = new PointF();
                PasteInfo.S_Center2 = new PointF();
                PasteInfo.S_Center1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.S_Center2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(27);
                PasteInfo.S_Center1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.S_Center2.Y = float.Parse(row.Cells[2].StringCellValue);
                //Corner-H1
                PasteInfo.Corner_H1_Point1 = new PointF();
                PasteInfo.Corner_H1_CamPoint1 = new PointF();
                PasteInfo.Corner_H1_Init_Point1 = new PointF();
                PasteInfo.Corner_H1_Point2 = new PointF();
                PasteInfo.Corner_H1_CamPoint2 = new PointF();
                PasteInfo.Corner_H1_Init_Point2 = new PointF();
                PasteInfo.Corner_H2_Point1 = new PointF();
                PasteInfo.Corner_H2_CamPoint1 = new PointF();
                PasteInfo.Corner_H2_Init_Point1 = new PointF();
                PasteInfo.Corner_H2_Point2 = new PointF();
                PasteInfo.Corner_H2_CamPoint2 = new PointF();
                PasteInfo.Corner_H2_Init_Point2 = new PointF();
                PasteInfo.Corner_V1_Point1 = new PointF();
                PasteInfo.Corner_V1_CamPoint1 = new PointF();
                PasteInfo.Corner_V1_Init_Point1 = new PointF();
                PasteInfo.Corner_V1_Point2 = new PointF();
                PasteInfo.Corner_V1_CamPoint2 = new PointF();
                PasteInfo.Corner_V1_Init_Point2 = new PointF();
                PasteInfo.Corner_V2_Point1 = new PointF();
                PasteInfo.Corner_V2_CamPoint1 = new PointF();
                PasteInfo.Corner_V2_Init_Point1 = new PointF();
                PasteInfo.Corner_V2_Point2 = new PointF();
                PasteInfo.Corner_V2_CamPoint2 = new PointF();
                PasteInfo.Corner_V2_Init_Point2 = new PointF();

                PasteInfo.Corner_Point1 = new PointF();
                PasteInfo.Corner_Point2 = new PointF();
                row = sheet.GetRow(28);
                PasteInfo.Corner_H1_Point1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Point2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(29);
                PasteInfo.Corner_H1_Point1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Point2.Y = float.Parse(row.Cells[2].StringCellValue);
                //HI-INIT
                #region HI-INIT
                row = sheet.GetRow(30);
                PasteInfo.Corner_H1_CamPoint1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_CamPoint2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(31);
                PasteInfo.Corner_H1_CamPoint1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_CamPoint2.Y = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(32);
                PasteInfo.Corner_H1_Shutter1 = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Shutter2 = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(33);
                PasteInfo.bCorner_H1_Red1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_H1_Red2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(34);
                PasteInfo.bCorner_H1_Green1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_H1_Green2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(35);
                PasteInfo.bCorner_H1_Blue1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_H1_Blue2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(36);
                PasteInfo.dCorner_H1_RedValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_H1_RedValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(37);
                PasteInfo.dCorner_H1_GreenValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_H1_GreenValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(38);
                PasteInfo.dCorner_H1_BlueValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_H1_BlueValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(39);
                PasteInfo.Corner_H1_Top1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Top2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(40);
                PasteInfo.Corner_H1_Left1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Left2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(41);
                PasteInfo.Corner_H1_Width1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Width2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(42);
                PasteInfo.Corner_H1_Height1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Height2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(43);
                PasteInfo.Corner_H1_Init_Point1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Init_Point2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(44);
                PasteInfo.Corner_H1_Init_Point1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Init_Point2.Y = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(45);
                PasteInfo.Corner_H1_Init_Angle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Init_Angle2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(46);
                PasteInfo.Corner_H1_Init_Score1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Init_Score2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(47);
                PasteInfo.Corner_H1_Init_MinAngle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Init_MinAngle2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(48);
                PasteInfo.Corner_H1_Init_MaxAngle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Init_MaxAngle2 = double.Parse(row.Cells[2].StringCellValue);
                #endregion

                row = sheet.GetRow(49);
                PasteInfo.Corner_H1_Top1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Top2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(50);
                PasteInfo.Corner_H1_Left1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Left2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(51);
                PasteInfo.Corner_H1_Width1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Width2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(52);
                PasteInfo.Corner_H1_Height1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_Height2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(53);
                PasteInfo.Corner_H1_EdgeStrength1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H1_EdgeStrength2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(54);
                PasteInfo.Corner_H1_PicDir1 = row.Cells[1].StringCellValue;
                PasteInfo.Corner_H1_PicDir2 = row.Cells[2].StringCellValue;
                row = sheet.GetRow(55);
                PasteInfo.Corner_H1_GrayValueDir1 = row.Cells[1].StringCellValue;
                PasteInfo.Corner_H1_GrayValueDir2 = row.Cells[2].StringCellValue;
                //Corner-H2
                row = sheet.GetRow(56);
                PasteInfo.Corner_H2_Point1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Point2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(57);
                PasteInfo.Corner_H2_Point1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Point2.Y = float.Parse(row.Cells[2].StringCellValue);

                #region H2-INIT
                row = sheet.GetRow(58);
                PasteInfo.Corner_H2_CamPoint1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_CamPoint2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(59);
                PasteInfo.Corner_H2_CamPoint1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_CamPoint2.Y = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(60);
                PasteInfo.Corner_H2_Shutter1 = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Shutter2 = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(61);
                PasteInfo.bCorner_H2_Red1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_H2_Red2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(62);
                PasteInfo.bCorner_H2_Green1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_H2_Green2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(63);
                PasteInfo.bCorner_H2_Blue1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_H2_Blue2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(64);
                PasteInfo.dCorner_H2_RedValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_H2_RedValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(65);
                PasteInfo.dCorner_H2_GreenValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_H2_GreenValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(66);
                PasteInfo.dCorner_H2_BlueValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_H2_BlueValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(67);
                PasteInfo.Corner_H2_Top1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Top2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(68);
                PasteInfo.Corner_H2_Left1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Left2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(69);
                PasteInfo.Corner_H2_Width1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Width2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(70);
                PasteInfo.Corner_H2_Height1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Height2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(71);
                PasteInfo.Corner_H2_Init_Point1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Init_Point2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(72);
                PasteInfo.Corner_H2_Init_Point1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Init_Point2.Y = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(73);
                PasteInfo.Corner_H2_Init_Angle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Init_Angle2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(74);
                PasteInfo.Corner_H2_Init_Score1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Init_Score2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(75);
                PasteInfo.Corner_H2_Init_MinAngle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Init_MinAngle2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(76);
                PasteInfo.Corner_H2_Init_MaxAngle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Init_MaxAngle2 = double.Parse(row.Cells[2].StringCellValue);
                #endregion

                row = sheet.GetRow(77);
                PasteInfo.Corner_H2_Top1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Top2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(78);
                PasteInfo.Corner_H2_Left1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Left2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(79);
                PasteInfo.Corner_H2_Width1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Width2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(80);
                PasteInfo.Corner_H2_Height1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_Height2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(81);
                PasteInfo.Corner_H2_EdgeStrength1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_H2_EdgeStrength2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(82);
                PasteInfo.Corner_H2_PicDir1 = row.Cells[1].StringCellValue;
                PasteInfo.Corner_H2_PicDir2 = row.Cells[2].StringCellValue;
                row = sheet.GetRow(83);
                PasteInfo.Corner_H2_GrayValueDir1 = row.Cells[1].StringCellValue;
                PasteInfo.Corner_H2_GrayValueDir2 = row.Cells[2].StringCellValue;
                //Corner-V1
                row = sheet.GetRow(84);
                PasteInfo.Corner_V1_Point1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Point2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(85);
                PasteInfo.Corner_V1_Point1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Point2.Y = float.Parse(row.Cells[2].StringCellValue);

                #region V1-INIT
                row = sheet.GetRow(86);
                PasteInfo.Corner_V1_CamPoint1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_CamPoint2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(87);
                PasteInfo.Corner_V1_CamPoint1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_CamPoint2.Y = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(88);
                PasteInfo.Corner_V1_Shutter1 = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Shutter2 = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(89);
                PasteInfo.bCorner_V1_Red1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_V1_Red2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(90);
                PasteInfo.bCorner_V1_Green1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_V1_Green2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(91);
                PasteInfo.bCorner_V1_Blue1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_V1_Blue2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(92);
                PasteInfo.dCorner_V1_RedValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_V1_RedValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(93);
                PasteInfo.dCorner_V1_GreenValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_V1_GreenValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(94);
                PasteInfo.dCorner_V1_BlueValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_V1_BlueValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(95);
                PasteInfo.Corner_V1_Top1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Top2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(96);
                PasteInfo.Corner_V1_Left1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Left2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(97);
                PasteInfo.Corner_V1_Width1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Width2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(98);
                PasteInfo.Corner_V1_Height1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Height2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(99);
                PasteInfo.Corner_V1_Init_Point1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Init_Point2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(100);
                PasteInfo.Corner_V1_Init_Point1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Init_Point2.Y = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(101);
                PasteInfo.Corner_V1_Init_Angle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Init_Angle2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(102);
                PasteInfo.Corner_V1_Init_Score1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Init_Score2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(103);
                PasteInfo.Corner_V1_Init_MinAngle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Init_MinAngle2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(104);
                PasteInfo.Corner_V1_Init_MaxAngle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Init_MaxAngle2 = double.Parse(row.Cells[2].StringCellValue);
                #endregion

                row = sheet.GetRow(105);
                PasteInfo.Corner_V1_Top1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Top2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(106);
                PasteInfo.Corner_V1_Left1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Left2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(107);
                PasteInfo.Corner_V1_Width1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Width2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(108);
                PasteInfo.Corner_V1_Height1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_Height2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(109);
                PasteInfo.Corner_V1_EdgeStrength1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V1_EdgeStrength2 = double.Parse(row.Cells[1].StringCellValue);
                row = sheet.GetRow(110);
                PasteInfo.Corner_V1_PicDir1 = row.Cells[1].StringCellValue;
                PasteInfo.Corner_V1_PicDir2 = row.Cells[2].StringCellValue;
                row = sheet.GetRow(111);
                PasteInfo.Corner_V1_GrayValueDir1 = row.Cells[1].StringCellValue;
                PasteInfo.Corner_V1_GrayValueDir2 = row.Cells[2].StringCellValue;
                //Corner-V2
                row = sheet.GetRow(112);
                PasteInfo.Corner_V2_Point1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Point2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(113);
                PasteInfo.Corner_V2_Point1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Point2.Y = float.Parse(row.Cells[2].StringCellValue);

                #region V2-INIT
                row = sheet.GetRow(114);
                PasteInfo.Corner_V2_CamPoint1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_CamPoint2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(115);
                PasteInfo.Corner_V2_CamPoint1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_CamPoint2.Y = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(116);
                PasteInfo.Corner_V2_Shutter1 = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Shutter2 = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(117);
                PasteInfo.bCorner_V2_Red1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_V2_Red2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(118);
                PasteInfo.bCorner_V2_Green1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_V2_Green2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(119);
                PasteInfo.bCorner_V2_Blue1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bCorner_V2_Blue2 = row.Cells[2].StringCellValue == "1" ? true : false;
                row = sheet.GetRow(120);
                PasteInfo.dCorner_V2_RedValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_V2_RedValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(121);
                PasteInfo.dCorner_V2_GreenValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_V2_GreenValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(122);
                PasteInfo.dCorner_V2_BlueValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dCorner_V2_BlueValue2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(123);
                PasteInfo.Corner_V2_Top1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Top2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(124);
                PasteInfo.Corner_V2_Left1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Left2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(125);
                PasteInfo.Corner_V2_Width1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Width2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(126);
                PasteInfo.Corner_V2_Height1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Height2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(127);
                PasteInfo.Corner_V2_Init_Point1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Init_Point2.X = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(128);
                PasteInfo.Corner_V2_Init_Point1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Init_Point2.Y = float.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(129);
                PasteInfo.Corner_V2_Init_Angle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Init_Angle2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(130);
                PasteInfo.Corner_V2_Init_Score1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Init_Score2 = short.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(131);
                PasteInfo.Corner_V2_Init_MinAngle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Init_MinAngle2 = double.Parse(row.Cells[2].StringCellValue);
                row = sheet.GetRow(132);
                PasteInfo.Corner_V2_Init_MaxAngle1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Init_MaxAngle2 = double.Parse(row.Cells[2].StringCellValue);
                #endregion

                row = sheet.GetRow(133);
                PasteInfo.Corner_V2_Top1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Top2 = short.Parse(row.Cells[2].StringCellValue);
                PasteInfo.bAreaEN1 = row.Cells[4].StringCellValue == "1" ? true : false;
                PasteInfo.bAreaEN2 = row.Cells[5].StringCellValue == "1" ? true : false;

                row = sheet.GetRow(134);
                PasteInfo.Corner_V2_Left1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Left2 = short.Parse(row.Cells[2].StringCellValue);
                PasteInfo.iAreaMin1 = int.Parse(row.Cells[4].StringCellValue);
                PasteInfo.iAreaMin2 = int.Parse(row.Cells[5].StringCellValue);

                row = sheet.GetRow(135);
                PasteInfo.Corner_V2_Width1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Width2 = short.Parse(row.Cells[2].StringCellValue);
                PasteInfo.iAreaMax1 = int.Parse(row.Cells[4].StringCellValue);
                PasteInfo.iAreaMax2 = int.Parse(row.Cells[5].StringCellValue);

                row = sheet.GetRow(136);
                PasteInfo.Corner_V2_Height1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_Height2 = short.Parse(row.Cells[2].StringCellValue);
                PasteInfo.iAreaOKStyle1 = short.Parse(row.Cells[4].StringCellValue);
                PasteInfo.iAreaOKStyle2 = short.Parse(row.Cells[5].StringCellValue);

                row = sheet.GetRow(137);
                PasteInfo.Corner_V2_EdgeStrength1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_V2_EdgeStrength2 = double.Parse(row.Cells[2].StringCellValue);
                PasteInfo.GainInit1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.GainInit2 = double.Parse(row.Cells[5].StringCellValue);

                row = sheet.GetRow(138);
                PasteInfo.Corner_V2_PicDir1 = row.Cells[1].StringCellValue;
                PasteInfo.Corner_V2_PicDir2 = row.Cells[2].StringCellValue;
                PasteInfo.OffsetInit1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.OffsetInit2 = double.Parse(row.Cells[5].StringCellValue);

                row = sheet.GetRow(139);
                PasteInfo.Corner_V2_GrayValueDir1 = row.Cells[1].StringCellValue;
                PasteInfo.Corner_V2_GrayValueDir2 = row.Cells[2].StringCellValue;
                PasteInfo.GainCircle1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.GainCircle2 = double.Parse(row.Cells[5].StringCellValue);

                //角落点
                row = sheet.GetRow(140);
                PasteInfo.Corner_Point1.X = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_Point2.X = float.Parse(row.Cells[2].StringCellValue);
                PasteInfo.OffsetCircle1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.OffsetCircle2 = double.Parse(row.Cells[5].StringCellValue);

                row = sheet.GetRow(141);
                PasteInfo.Corner_Point1.Y = float.Parse(row.Cells[1].StringCellValue);
                PasteInfo.Corner_Point2.Y = float.Parse(row.Cells[2].StringCellValue);
                PasteInfo.GainH1_1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.GainH1_2 = double.Parse(row.Cells[5].StringCellValue);

                row = sheet.GetRow(142);
                PasteInfo.CornerAngleIndex1 = short.Parse(row.Cells[1].StringCellValue);
                PasteInfo.CornerAngleIndex2 = short.Parse(row.Cells[2].StringCellValue);
                PasteInfo.OffsetH1_1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.OffsetH1_2 = double.Parse(row.Cells[5].StringCellValue);

                row = sheet.GetRow(143);
                PasteInfo.bRed1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bRed2 = row.Cells[2].StringCellValue == "1" ? true : false;
                PasteInfo.GainH2_1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.GainH2_2 = double.Parse(row.Cells[5].StringCellValue);

                row = sheet.GetRow(144);
                PasteInfo.bGreen1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bGreen2 = row.Cells[2].StringCellValue == "1" ? true : false;
                PasteInfo.OffsetH2_1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.OffsetH2_2 = double.Parse(row.Cells[5].StringCellValue);

                if (row.Cells.Count <= 6)
                {
                    PasteInfo.GrabLine_ROI1 = "0,0,0,0";
                    PasteInfo.GrabLine_ROI2 = "0,0,0,0";
                    PasteInfo.GrabLine_EdgeStrength1 = 75;
                    PasteInfo.GrabLine_EdgeStrength2 = 75;
                    PasteInfo.GrabLine_PicDir1 = "1";
                    PasteInfo.GrabLine_PicDir2 = "1";
                    PasteInfo.GrabLine_GrayValueDir1 = "1";
                    PasteInfo.GrabLine_GrayValueDir2 = "1";
                    PasteInfo.GrabLine_Enable1 = false;
                    PasteInfo.GrabLine_Enable2 = false;
                }
                else
                {
                    row = sheet.GetRow(144);
                    PasteInfo.GrabLine_ROI1 = row.Cells[7].StringCellValue;
                    PasteInfo.GrabLine_ROI2 = row.Cells[8].StringCellValue;

                    row = sheet.GetRow(145);
                    PasteInfo.GrabLine_EdgeStrength1 = double.Parse(row.Cells[7].StringCellValue);
                    PasteInfo.GrabLine_EdgeStrength2 = double.Parse(row.Cells[8].StringCellValue);

                    row = sheet.GetRow(146);
                    PasteInfo.GrabLine_PicDir1 = row.Cells[7].StringCellValue;
                    PasteInfo.GrabLine_PicDir2 = row.Cells[8].StringCellValue;

                    row = sheet.GetRow(147);
                    PasteInfo.GrabLine_GrayValueDir1 = row.Cells[7].StringCellValue;
                    PasteInfo.GrabLine_GrayValueDir2 = row.Cells[8].StringCellValue;

                    row = sheet.GetRow(148);
                    PasteInfo.GrabLine_Enable1 = row.Cells[7].StringCellValue == "True" ? true : false;
                    PasteInfo.GrabLine_Enable2 = row.Cells[8].StringCellValue == "True" ? true : false;
                }

                row = sheet.GetRow(145);
                PasteInfo.bBlue1 = row.Cells[1].StringCellValue == "1" ? true : false;
                PasteInfo.bBlue2 = row.Cells[2].StringCellValue == "1" ? true : false;
                PasteInfo.GainV1_1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.GainV1_2 = double.Parse(row.Cells[5].StringCellValue);

                row = sheet.GetRow(146);
                PasteInfo.dRedValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dRedValue2 = double.Parse(row.Cells[2].StringCellValue);
                PasteInfo.OffsetV1_1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.OffsetV1_2 = double.Parse(row.Cells[5].StringCellValue);

                row = sheet.GetRow(147);
                PasteInfo.dGreenValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dGreenValue2 = double.Parse(row.Cells[2].StringCellValue);
                PasteInfo.GainV2_1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.GainV2_2 = double.Parse(row.Cells[5].StringCellValue);

                row = sheet.GetRow(148);//72
                PasteInfo.dBlueValue1 = double.Parse(row.Cells[1].StringCellValue);
                PasteInfo.dBlueValue2 = double.Parse(row.Cells[2].StringCellValue);
                PasteInfo.OffsetV2_1 = double.Parse(row.Cells[4].StringCellValue);
                PasteInfo.OffsetV2_2 = double.Parse(row.Cells[5].StringCellValue);

                HalconHelper.ClearModel(PasteInfo.Model1ID);
                PasteInfo.Model1ID = HalconHelper.LoadModel(PasteNamePath);
            }
            catch
            {
                bOK = false;
                return PasteInfo;
            }
            bOK = true;
            hssfworkbook.Clear();
            return PasteInfo;
        }

        private void DelDGV(DataGridView a)
        {
            while (a.RowCount > 1)//删除表格数据
            {
                a.Rows.Remove(a.Rows[0]);
            }
        }

        #region Mark点 计算算法
        private PointF[] TransformPointsForm1Mark(PointF[] POINTS, PointF Mark1, PointF newMark1)
        {
            PointF[] ReturnPoints = new PointF[POINTS.Length];
            for (int i = 0; i < POINTS.Length; i++)
            {
                ReturnPoints[i].X = POINTS[i].X + (newMark1.X - Mark1.X);
                ReturnPoints[i].Y = POINTS[i].Y + (newMark1.Y - Mark1.Y);
            }
            return ReturnPoints;
        }

        private PointF[] TransformPointsForm2Mark(PointF[] POINTS, PointF Mark1, PointF Mark2, PointF newMark1, PointF newMark2, ref double RotationValue)
        {
            //double R = 0;
            PointF Temp = new PointF();
            PointF[] ReturnPoints = new PointF[POINTS.Length];
            RotationValue = getAngle(newMark1.X, newMark1.Y, newMark2.X, newMark2.Y) - getAngle(Mark1.X, Mark1.Y, Mark2.X, Mark2.Y);
            //R = -1 * R;
            for (int i = 0; i < POINTS.Length; i++)
            {
                Temp.X = POINTS[i].X + (newMark1.X - Mark1.X);
                Temp.Y = POINTS[i].Y + (newMark1.Y - Mark1.Y);
                PtRotate(Temp, newMark1, RotationValue, out ReturnPoints[i]);
            }
            return ReturnPoints;
        }

        public PointF[] MarkTransBy2Mark(PointF[] XY, PointF Mark1, PointF Mark2, PointF newMark1, PointF newMark2)
        {
            try
            {
                HTuple oldX = new HTuple();
                oldX.Append(Mark1.X);
                oldX.Append(Mark2.X);

                HTuple oldY = new HTuple();
                oldY.Append(Mark1.Y);
                oldY.Append(Mark2.Y);

                HTuple newX = new HTuple();
                newX.Append(newMark1.X);
                newX.Append(newMark2.X);

                HTuple newY = new HTuple();
                newY.Append(newMark1.Y);
                newY.Append(newMark2.Y);
                HTuple mat = new HTuple();
                HOperatorSet.VectorToRigid(oldX, oldY, newX, newY, out mat);

                HTuple inputX = new HTuple();
                HTuple inputY = new HTuple();
                HTuple outX = new HTuple();
                HTuple outY = new HTuple();
                PointF[] result = new PointF[XY.Length];
                for (int i = 0; i < XY.Length; ++i)
                {
                    inputX.Append(XY[i].X);
                    inputY.Append(XY[i].Y);
                }
                HOperatorSet.AffineTransPixel(mat, inputX, inputY, out outX, out outY);
                for (int i = 0; i < outX.Length; ++i)
                {
                    result[i].X = (float)outX[i].D;
                    result[i].Y = (float)outY[i].D;
                }

                return result;
            }
            catch { return null; }
        }

        private PointF[] TransformPointsForm2Mark_IsPaste(PointF[] POINTS, PointF Mark1, PointF Mark2, PointF newMark1, PointF newMark2, ref double RotationValue, bool[] IsPASTE_Abs)
        {
            //double R = 0;
            PointF Temp = new PointF();
            newMark1 = GlassHelper.MachinePoint2ActPoint(newMark1);
            newMark2 = GlassHelper.MachinePoint2ActPoint(newMark2);

            PointF[] ReturnPoints = new PointF[POINTS.Length];
            RotationValue = getAngle(newMark1.X, newMark1.Y, newMark2.X, newMark2.Y) - getAngle(Mark1.X, Mark1.Y, Mark2.X, Mark2.Y);
            ReturnPoints = MarkTransBy2Mark(POINTS, Mark1, Mark2, newMark1, newMark2);
            return ReturnPoints;
        }

        private PointF[] TransformPointsForm2Mark_IsPasteManaul(PointF[] POINTS, PointF Mark1, PointF Mark2, PointF newMark1, PointF newMark2, ref double RotationValue)
        {
            PointF Temp = new PointF();
            newMark1 = GlassHelper.MachinePoint2ActPoint(newMark1);
            newMark2 = GlassHelper.MachinePoint2ActPoint(newMark2);

            PointF[] ReturnPoints = new PointF[POINTS.Length];
            RotationValue = getAngle(newMark1.X, newMark1.Y, newMark2.X, newMark2.Y) - getAngle(Mark1.X, Mark1.Y, Mark2.X, Mark2.Y);
            //R = -1 * R;
            for (int i = 0; i < POINTS.Length; i++)
            {
                Temp.X = POINTS[i].X + (newMark1.X - Mark1.X);
                Temp.Y = POINTS[i].Y + (newMark1.Y - Mark1.Y);
                PtRotate(Temp, newMark1, RotationValue, out ReturnPoints[i]);
            }

            return ReturnPoints;
        }

        private PointF[] TransformPointsFormMarkAndAngle_IsPaste(PointF[] POINTS, PointF Mark1, PointF newMark11, double OffsetAngle, ref double RotationValue, bool[] IsPASTE_Abs)
        {
            //double R = 0;
            PointF Temp = new PointF();
            PointF[] ReturnPoints = new PointF[POINTS.Length];
            RotationValue = OffsetAngle;

            for (int i = 0; i < POINTS.Length; i++)
            {
                if (IsPASTE_Abs[i])
                {
                    Temp.X = POINTS[i].X + (newMark11.X - Mark1.X);
                    Temp.Y = POINTS[i].Y + (newMark11.Y - Mark1.Y);
                    PtRotate(Temp, newMark11, RotationValue, out ReturnPoints[i]);
                }
                else
                {
                    double thetaX = getAngle(P_Mid_H1.X, P_Mid_H1.Y, P_Mid_H2.X, P_Mid_H2.Y);
                    double thetaY = getAngle(P_Mid_V1.X, P_Mid_V1.Y, P_Mid_V2.X, P_Mid_V2.Y);
                    LineContour Lx = new LineContour(P_Mid_H1, P_Mid_H2);
                    LineContour Ly = new LineContour(P_Mid_V1, P_Mid_V2);
                    ImageCapture_Up2.Overlays.Default.AddLine(Lx, Rgb32Value.RedColor);
                    ImageCapture_Up2.Overlays.Default.AddLine(Ly, Rgb32Value.RedColor);

                    PointContour NewPoint = new PointContour();
                    double Xoffset = POINTS[i].X / Math.Abs(Math.Cos(thetaX * Math.PI / 180));
                    double Yoffset = POINTS[i].Y / Math.Abs(Math.Sin(thetaY * Math.PI / 180));
                    Lx.Move(0, Xoffset);
                    Ly.Move(Yoffset, 0);
                    ImageCapture_Up2.Overlays.Default.AddLine(Lx, Rgb32Value.RedColor);
                    ImageCapture_Up2.Overlays.Default.AddLine(Ly, Rgb32Value.RedColor);
                    ImageCapture_Up2.Overlays.Default.AddText(Xoffset.ToString("F2"), new PointContour(500, 300), Rgb32Value.BlueColor, new OverlayTextOptions("Consolas", 125));
                    ImageCapture_Up2.Overlays.Default.AddText(Yoffset.ToString("F2"), new PointContour(500, 400), Rgb32Value.BlueColor, new OverlayTextOptions("Consolas", 125));

                    NewPoint = Algorithms.FindIntersectionPoint(Lx, Ly);
                    ReturnPoints[i] = Point2CCDCenter(JOB.Cam_Mark1Point[this.Z_RunParamMap[this.RUN_PasteNozzle].RUN_PasteInfoIndex], NewPoint, 0, 0);

                    ImageCapture_Up2.Overlays.Default.AddLine(new LineContour(new PointContour(NewPoint.X - 50, NewPoint.Y), new PointContour(NewPoint.X + 50, NewPoint.Y)), Rgb32Value.RedColor);
                    ImageCapture_Up2.Overlays.Default.AddLine(new LineContour(new PointContour(NewPoint.X, NewPoint.Y - 50), new PointContour(NewPoint.X, NewPoint.Y + 50)), Rgb32Value.RedColor);
                }
            }
            return ReturnPoints;
        }

        #endregion

        //相机
        public short CamInit()
        {
            #region 初始化相机
            cameraList = ImaqdxSystem.GetCameraInformation(true);
            try
            {
                if (cameraList.Length >= 3)
                {
                    // 读取相机配置文件
                    CameraDefine.Load();

                    // 初始化相机
                    CameraDefine.Instance.Connect(cameraList.Length == 4);

                    if (cameraList.Length == 3)
                    {
                        this.cameraComboBox.Items.RemoveAt(this.cameraComboBox.Items.Count - 1);
                        this.cbxSelectCam.Items.RemoveAt(this.cbxSelectCam.Items.Count - 1);
                        this.bXYByCam.Enabled = false;
                        this.bGoCamXY.Enabled = false;
                    }

                    //增加设置CCD画面ROI轮廓变化事件
                    imageSet.Roi.ContoursChanged += new EventHandler<NationalInstruments.Vision.WindowsForms.ContoursChangedEventArgs>(this.Roi_ContoursChanged);
                    nUDX_Pro.ValueChanged += new System.EventHandler(this.Roi_ContoursChanged);
                    nUDY_Pro.ValueChanged += new System.EventHandler(this.Roi_ContoursChanged);
                    #region 相机实时线程设置
                    bgWorker_Cam.WorkerReportsProgress = true;
                    bgWorker_Cam.WorkerSupportsCancellation = true;
                    #endregion
                }
                else
                {
                    MessageBox.Show("no camera found", "Info");
                    return 1;
                }
            }
            catch (Exception a)
            {
                return 1;
            }
            #endregion
            return 0;
        }

        /// <summary>
        /// 设置曝光
        /// </summary>
        /// <param name="shutter">曝光</param>
        /// <param name="camera">相机</param>
        public void SetShutter(int shutter, CAM camera)
        {
            CameraDefine.Instance[camera].Shutter = shutter;
        }

        /// <summary>
        /// 设置外触发
        /// </summary>
        /// <param name="IsEXTrigger">是否外触发</param>
        /// <param name="camera">相机</param>
        private void SetTrigger(bool IsEXTrigger, CAM camera)
        {
            CameraDefine.Instance[camera].Trigger = IsEXTrigger ? 1 : 0;
        }

        #region 算法
        public VisionImage GainOffset(VisionImage image, double GainValue, double OffsetValue)//Process
        {
            try
            {
                image.Type = ImageType.U16;
                PixelValue vaPixelValue = SetPixelValue(image.Type, (float)GainValue, 0, 0, 0);
                Algorithms.Multiply(image, vaPixelValue, image);
                PixelValue vaPixelValue2 = SetPixelValue(image.Type, (float)OffsetValue, 0, 0, 0);
                Algorithms.Subtract(image, vaPixelValue2, image);
                Algorithms.Cast(image, image, ImageType.U8, -1);
            }
            catch
            {
            }
            return image;
        }
        /////////////////////////////////////////////////////////////////////////////////
        ///
        /// Function Name: SetPixelValue
        ///
        /// Description  : Initialize a PixelValue structure
        ///
        /// Parameters   : imageType          -  image type
        ///                grayscaleConstant
        ///                redConstant
        ///                greenConstant
        ///                blueConstant
        ///
        /// Return Value : a PixelValue with the specified parameters
        ///
        /////////////////////////////////////////////////////////////////////////////////
        public static PixelValue SetPixelValue(ImageType imageType,
                                                   float grayscaleConstant,
                                                   byte redConstant,
                                                   byte greenConstant,
                                                   byte blueConstant)
        {
            PixelValue pVal;

            /// Sets the pixel value.
            switch (imageType)
            {
                case ImageType.U8:
                case ImageType.I16:
                case ImageType.U16:
                case ImageType.Single:
                    pVal = new PixelValue(grayscaleConstant);
                    break;
                case ImageType.Complex:
                    pVal = new PixelValue(new Complex());
                    break;
                case ImageType.Rgb32:
                    pVal = new PixelValue(new Rgb32Value(redConstant, greenConstant, blueConstant));
                    break;
                case ImageType.RgbU64:
                    pVal = new PixelValue(new RgbU64Value(redConstant, greenConstant, blueConstant));
                    break;
                case ImageType.Hsl32:
                    pVal = new PixelValue(new Hsl32Value());
                    break;
                default:
                    pVal = new PixelValue();
                    break;
            }
            return pVal;
        }
        private short CamDetect_PatternMatch(VisionImage image, VisionImage imageTemplate, float minScore, int MatchCount, float MinAngle, float MaxAngle, Roi roi, ref Variable.CamReturn camreturn, int offsetX, int offsetY)//视觉匹配算法
        {
            Stopwatch a = new Stopwatch();
            a.Reset();
            a.Start();
            if (roi.Count > 0)
            {
                Collection<PatternMatchReport> matches = new Collection<PatternMatchReport>();
                try
                {
                    angleRange[0].Upper = MaxAngle;
                    angleRange[0].Lower = MinAngle;
                    angleRange[1].Upper = 0;
                    angleRange[1].Lower = 0;
                    matches = Algorithms.MatchPattern3(image, imageTemplate, matchAlgorithm, MatchCount, minScore, angleRange, roi, advancedMatchOptions);

                }
                catch
                {
                    camreturn.X = 0;
                    camreturn.Y = 0;
                    camreturn.Angle = 0;
                    return 1;
                }
                if (matches.Count > 0)
                {
                    offsetX = (int)(offsetX * matches[0].Scale);
                    offsetY = (int)(offsetY * matches[0].Scale);
                    //进行点位偏移
                    camreturn.X = matches[0].Position.X + Math.Sqrt(Math.Pow(offsetX, 2) + Math.Pow(offsetY, 2)) * Math.Cos(Math.Atan2(offsetY, offsetX) - matches[0].Rotation * 2 * Math.PI / 360);
                    camreturn.Y = matches[0].Position.Y + Math.Sqrt(Math.Pow(offsetX, 2) + Math.Pow(offsetY, 2)) * Math.Sin(Math.Atan2(offsetY, offsetX) - matches[0].Rotation * 2 * Math.PI / 360);
                    camreturn.Angle = matches[0].Rotation;
                    // Display results.
                    //image.Overlays.Default.Clear();
                    foreach (PatternMatchReport match in matches)
                    {
                        image.Overlays.Default.AddPolygon(new PolygonContour(match.Corners), Rgb32Value.BlueColor);
                    }
                    image.Overlays.Default.AddPoint(new PointContour(camreturn.X, camreturn.Y));
                    long time = a.ElapsedMilliseconds;
                    return 0;
                }
                else
                {
                    //MessageBox.Show("寻找特征点失败!", "提示");
                    camreturn.X = 0;
                    camreturn.Y = 0;
                    camreturn.Angle = 0;
                    return 1;
                }

            }
            else
            {
                //MessageBox.Show("传递ROI为空!", "提示");
                camreturn.X = 0;
                camreturn.Y = 0;
                camreturn.Angle = 0;
                return 2;
            }
        }
        public short CamDetect_SearchGeometric(VisionImage sourceImage, VisionImage templateImage, Roi SearchRoi, short MatchScore, short MaxSearchCount, double MinRoatation, double MaxRotation, double MinScale, double MaxScale, double MinOcclude, double MaxOcclude, ref Variable.CamReturn camreturn, int offsetX, int offsetY)
        {
            matchGPMOptions.MinimumMatchScore = MatchScore;
            double[] vaRangesMin = { MinRoatation, 0, MinScale, MinOcclude };
            double[] vaRangesMax = { MaxRotation, 0, MaxScale, MaxOcclude };
            matchGPMOptions.OcclusionRange = new Range(vaRangesMin[3], vaRangesMax[3]);
            matchGPMOptions.RotationAngleRanges.Clear();
            matchGPMOptions.RotationAngleRanges.Add(new Range(vaRangesMin[0], vaRangesMax[0]));
            matchGPMOptions.RotationAngleRanges.Add(new Range(vaRangesMin[1], vaRangesMax[1]));
            matchGPMOptions.ScaleRange = new Range(vaRangesMin[2], vaRangesMax[2]);
            try
            {
                curveOptions.Threshold = 75;
                gpmResults = Algorithms.MatchGeometricPatternEdgeBased(sourceImage, templateImage, curveOptions, matchGPMOptions, SearchRoi);
            }
            catch (Exception a)
            {
                return 1;
            }
            if (gpmResults.Count == 0)
            {
                return 1;
            }
            if (gpmResults[0].Rotation > 180 || gpmResults[0].Rotation < -180)
            {
                if (gpmResults[0].Rotation > 180)
                {
                    camreturn.Angle = gpmResults[0].Rotation - 360;
                }
                if (gpmResults[0].Rotation < -180)
                {
                    camreturn.Angle = gpmResults[0].Rotation + 360;
                }
            }
            else
            {
                camreturn.Angle = gpmResults[0].Rotation;
            }
            //解决边缘算法角度补反的问题_OK_Fowindy_0703
            //camreturn.Angle = -camreturn.Angle;
            camreturn.Angle = gpmResults[0].Rotation;
            //进行点位偏移
            //sourceImage.Overlays.Default.AddText(camreturn.Angle.ToString("F2"), new PointContour(500, 800), Rgb32Value.BlueColor, new OverlayTextOptions("Consolas", 125));
            camreturn.X = gpmResults[0].Position.X + Math.Sqrt(Math.Pow(offsetX, 2) + Math.Pow(offsetY, 2)) * Math.Cos(Math.Atan2(offsetY, offsetX) - gpmResults[0].Rotation * 2 * Math.PI / 360);
            camreturn.Y = gpmResults[0].Position.Y + Math.Sqrt(Math.Pow(offsetX, 2) + Math.Pow(offsetY, 2)) * Math.Sin(Math.Atan2(offsetY, offsetX) - gpmResults[0].Rotation * 2 * Math.PI / 360);
            //sourceImage.Overlays.Default.AddPoint(new PointContour(camreturn.X, camreturn.Y));
            sourceImage.Overlays.Default.AddLine(new LineContour(new PointContour(camreturn.X - 50, camreturn.Y), new PointContour(camreturn.X + 50, camreturn.Y)), Rgb32Value.RedColor);
            sourceImage.Overlays.Default.AddLine(new LineContour(new PointContour(camreturn.X, camreturn.Y - 50), new PointContour(camreturn.X, camreturn.Y + 50)), Rgb32Value.RedColor);
            //sourceImage.Overlays.Default.Clear();
            foreach (GeometricEdgeBasedPatternMatch match in gpmResults)
            {
                sourceImage.Overlays.Default.AddPolygon(new PolygonContour(match.Corners), Rgb32Value.BlueColor);
            }
            return 0;
        }
        public void Extract_LearnPttern(VisionImage imageSource, VisionImage imagedestination)
        {
            if (imageSet.Roi.Count > 0 && imageSet.Roi[0].Shape.GetType() == typeof(RectangleContour))
            {
                //学习模板
                Algorithms.Extract(imageSource, imagedestination, (RectangleContour)imageSet.Roi[0].Shape);
                Collection<PMLearnAdvancedSetupDataOption> learnoption = new Collection<PMLearnAdvancedSetupDataOption>();
                RotationAngleRange r = new RotationAngleRange();
                r.Lower = 0;
                r.Upper = 360;
                Algorithms.LearnPattern2(imagedestination, null, matchAlgorithm, r);//, mask,matchAlgorithm);
            }
            else
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("No ROI in Image!", "Info");
                }
                else
                {
                    MessageBox.Show("在图像中没有矩形框", "提示");
                }
            }
        }
        public void Extract_LearnGemetric(VisionImage imageSource, VisionImage imagedestination)
        {
            try
            {
                if (imageSet.Roi.Count > 0 && imageSet.Roi[0].Shape.GetType() == typeof(RectangleContour))
                {
                    //学习模板
                    Algorithms.Extract(imageSource, imagedestination, (RectangleContour)imageSet.Roi[0].Shape);
                    Algorithms.LearnGeometricPatternEdgeBased(imagedestination, new PointContour(0, 0), 0, curveOptions, learnGPEBAdvancedOptions);
                }
                else
                {
                    if (VariableSys.LanguageFlag == 1)
                    {
                        MessageBox.Show("No ROI in Image!", "Info");
                    }
                    else
                    {
                        MessageBox.Show("在图像中没有矩形框", "提示");
                    }
                }
            }
            catch
            {

            }

        }
        private short CamDetect_EdgeDetect(VisionImage image, Roi roi, double EdgeStength, SearchDirection SearchDirection, EdgePolaritySearchMode EdgeMode, ref PointContour PointStart, ref PointContour PointEnd)//视觉抓边算法
        {
            if (roi.Count > 0)
            {
                #region 抓边参数
                StraightEdgeOptions vaStraightEdgeOptions = new StraightEdgeOptions();
                vaStraightEdgeOptions.NumberOfLines = 1;
                vaStraightEdgeOptions.SearchMode = StraightEdgeSearchMode.FirstRakeEdges;
                vaStraightEdgeOptions.ScoreRange = new Range(0, 1024);
                vaStraightEdgeOptions.Orientation = 0;
                vaStraightEdgeOptions.AngleRange = 90;
                vaStraightEdgeOptions.AngleTolerance = 1;
                vaStraightEdgeOptions.StepSize = 3;
                vaStraightEdgeOptions.MinimumSignalToNoiseRatio = 0;
                vaStraightEdgeOptions.MinimumCoverage = 25;
                vaStraightEdgeOptions.HoughIterations = 5;
                // Set EdgeOptions
                EdgeOptions vaEdgeOptions = new EdgeOptions();
                vaEdgeOptions.Polarity = EdgeMode;
                vaEdgeOptions.KernelSize = 7;
                vaEdgeOptions.Width = 3;
                vaEdgeOptions.MinimumThreshold = EdgeStength;
                vaEdgeOptions.InterpolationType = InterpolationMethod.ZeroOrder;
                vaEdgeOptions.ColumnProcessingMode = ColumnProcessingMode.Average;
                #endregion
                StraightEdgeReport report1 = Algorithms.StraightEdge2(image, roi, SearchDirection, vaEdgeOptions, vaStraightEdgeOptions, false);
                if (report1.StraightEdges.Count > 0)
                {
                    PointStart = report1.StraightEdges[0].StraightEdge.Start;
                    PointEnd = report1.StraightEdges[0].StraightEdge.End;
                    //image.Overlays.Default.Clear();
                    image.Overlays.Default.AddLine(new LineContour(report1.StraightEdges[0].StraightEdge.Start, report1.StraightEdges[0].StraightEdge.End));
                    return 0;
                }
                else
                {
                    PointStart.X = 0;
                    PointStart.Y = 0;
                    PointEnd.X = 0;
                    PointEnd.Y = 0;
                    return 1;
                }
            }
            else
            {
                PointStart.X = 0;
                PointStart.Y = 0;
                PointEnd.X = 0;
                PointEnd.Y = 0;
                return 1;
            }
        }
        public short CamDetect_Circle(VisionImage image, Roi roi, short MinR, short MaxR, ref PointContour CenterPoint, ref double Circle_R)
        {
            #region NI

            //if (roi.Count != 1)
            //{
            //    return 1;
            //}
            //CircleDescriptor vaCircleDescriptor = new CircleDescriptor(MinR, MaxR);
            //CurveOptions vaCurveOptions = new CurveOptions();
            //vaCurveOptions.ColumnStepSize = 15;
            //vaCurveOptions.ExtractionMode = ExtractionMode.NormalImage;
            //vaCurveOptions.FilterSize = EdgeFilterSize.Fine;
            //vaCurveOptions.MaximumEndPointGap = 10;
            //vaCurveOptions.MinimumLength = 25;
            //vaCurveOptions.RowStepSize = 15;
            //vaCurveOptions.Threshold = 75;
            //ShapeDetectionOptions vaShapeOptions = new ShapeDetectionOptions();
            //vaShapeOptions.MinimumMatchScore = 600;
            //vaShapeOptions.Mode = (GeometricMatchModes)5;
            //double[] vaRangesMin = { 0, 0, 50 };
            //double[] vaRangesMax = { 360, 0, 200 };
            //vaShapeOptions.RotationAngleRanges.Add(new Range(vaRangesMin[0], vaRangesMax[0]));
            //vaShapeOptions.RotationAngleRanges.Add(new Range(vaRangesMin[1], vaRangesMax[1]));
            //vaShapeOptions.ScaleRange = new Range(vaRangesMin[2], vaRangesMax[2]);
            //try
            //{
            //    Collection<CircleMatch> circles = Algorithms.DetectCircles(image, vaCircleDescriptor, roi, vaCurveOptions, vaShapeOptions);
            //    if (circles.Count > 0)
            //    {
            //        CenterPoint = circles[0].Center;
            //        Circle_R = circles[0].Radius;
            //        image.Overlays.Default.AddOval(circles[0].Circle, Rgb32Value.RedColor);
            //        image.Overlays.Default.AddPoint(circles[0].Center, Rgb32Value.GreenColor);
            //        return 0;
            //    }
            //    else
            //    {
            //        CenterPoint.X = 0;
            //        CenterPoint.Y = 0;
            //        Circle_R = 0;
            //        return 1;
            //    }
            //}
            //catch
            //{
            //    CenterPoint.X = 0;
            //    CenterPoint.Y = 0;
            //    Circle_R = 0;
            //    return 1;
            //}
            #endregion

            if (VisionHelper.DetectCircle(image, roi, (double)MinR, (double)MaxR, out CenterPoint, out Circle_R))
            {
                image.Overlays.Default.AddPoint(CenterPoint, Rgb32Value.RedColor);
                image.Overlays.Default.AddArc(new Arc(CenterPoint, Circle_R, 0, 270), Rgb32Value.YellowColor);
                return 0;
            }
            else
            {
                return 1;
            }
        }

        public void PtRotate(PointF PTtoRotate, PointF RotateCenter, double RotatethetaAngle, out PointF PTRotated)//点绕点旋转算法（逆时针为正）
        {
            PTRotated = new PointF();
            PTRotated.X = (float)(RotateCenter.X + (PTtoRotate.X - RotateCenter.X) * Math.Cos(RotatethetaAngle * Math.PI / 180) - (PTtoRotate.Y - RotateCenter.Y) * Math.Sin(RotatethetaAngle * Math.PI / 180));
            PTRotated.Y = (float)(RotateCenter.Y + (PTtoRotate.X - RotateCenter.X) * Math.Sin(RotatethetaAngle * Math.PI / 180) + (PTtoRotate.Y - RotateCenter.Y) * Math.Cos(RotatethetaAngle * Math.PI / 180));
        }

        public PointContour PtRotateDown(PointContour PTtoRotate, PointContour RotateCenter, double RotatethetaAngle)//点绕点旋转算法（逆时针为正）
        {
            double deg = RotatethetaAngle / 180.0 * Math.PI;

            //PointContour PTRotated = new PointContour();
            //PTRotated.X = (float)(RotateCenter.X + (PTtoRotate.X - RotateCenter.X) * Math.Cos(deg) - (PTtoRotate.Y - RotateCenter.Y) * Math.Sin(deg));
            //PTRotated.Y = (float)(RotateCenter.Y + (PTtoRotate.X - RotateCenter.X) * Math.Sin(deg) + (PTtoRotate.Y - RotateCenter.Y) * Math.Cos(deg));
            //return PTRotated;
            var PTRotated = new PointContour();
            PTRotated.X = (PTtoRotate.X - RotateCenter.X) * Math.Cos(deg) + (PTtoRotate.Y - RotateCenter.Y) * Math.Sin(deg) + RotateCenter.X;
            PTRotated.Y = -(PTtoRotate.X - RotateCenter.X) * Math.Sin(deg) + (PTtoRotate.Y - RotateCenter.Y) * Math.Cos(deg) + RotateCenter.Y;
            return PTRotated;
        }

        public double getAngle(double px1, double py1, double px2, double py2)//两点求角度算法
        {
            //两点的x、y值
            double x = px2 - px1;
            double y = py2 - py1;
            //斜边长度
            double hypotenuse = Math.Sqrt(Math.Pow(x, 2) + Math.Pow(y, 2));
            //求出弧度
            double cos = x / hypotenuse;
            double radian = Math.Acos(cos);
            //用弧度算出角度
            double angle = 180 / (Math.PI / radian);

            if (py1 > py2)// (-180,0)
            {
                angle = -angle;
            }

            if (Math.Abs(angle) < 135 && Math.Abs(angle) > 45)
            {
                if (angle > 0)
                {
                    angle = 90 - angle;
                }
                else
                {
                    angle = 90 + angle;
                }
            }
            return angle;
        }
        private double subAngle(double Angle1, double Angle2)//两角度相减求差角（逆时针为正 -180到180）
        {
            double AngleSub = Angle1 - Angle2;

            if (AngleSub > 180)
            {
                AngleSub = AngleSub - 360;
            }
            else if (AngleSub < -180)
            {
                AngleSub = AngleSub + 360;
            }
            return AngleSub;
        }

        private int AreaCount(VisionImage image, Roi roi, bool ISWhite)//BadMark
        {
            try
            {
                using (VisionImage imageMask = new VisionImage(ImageType.U8, 7))
                {
                    using (VisionImage image2Process = new VisionImage(ImageType.U8, 7))
                    {
                        Algorithms.Copy(image, image2Process);
                        Algorithms.Threshold(image2Process, image2Process, new Range(128, 255), true, 255);
                        PixelValue fillValue = new PixelValue(255);
                        Range intervalRange = new Range(0, 0);
                        Algorithms.RoiToMask(imageMask, roi, fillValue, image2Process);
                        // Calculates and returns statistical parameters on the image.
                        HistogramReport a = new HistogramReport();
                        a = Algorithms.Histogram(image2Process, 256, intervalRange, imageMask);
                        //dispose
                        image2Process.Dispose();
                        imageMask.Dispose();
                        if (a.Histogram.Count >= 256)
                        {
                            if (ISWhite)
                            {
                                return a.Histogram[255];//白色区域面积
                            }
                            else
                            {
                                return a.Histogram[0];//黑色区域面积
                            }
                        }
                        return -1;
                    }
                }
            }
            catch
            {
                return -1;
            }
        }
        #endregion

        /// <summary>
        /// 根据相机位 得到 吸嘴位
        /// </summary>
        /// <param name="CamPoint"></param>
        /// <param name="selectNz"></param>
        /// <returns></returns>
        public PointF NozzleToCamPoint(PointF CamPoint, int selectNz)
        {
            return new PointF(CamPoint.X + VariableSys.pNozzle_2_Cam[selectNz].X, CamPoint.Y + VariableSys.pNozzle_2_Cam[selectNz].Y);
        }

        /// <summary>
        /// 根据吸嘴位 得到 相机位
        /// </summary>
        /// <param name="CamPoint"></param>
        /// <param name="selectNz"></param>
        /// <returns></returns>
        public PointF CamToNozzlePoint(PointF CamPoint, int selectNz)
        {
            return new PointF(CamPoint.X - VariableSys.pNozzle_2_Cam[selectNz].X, CamPoint.Y - VariableSys.pNozzle_2_Cam[selectNz].Y);
        }

        /// <summary>
        /// 根据 读码相机位 得到 吸嘴位
        /// </summary>
        /// <param name="CamPoint">拍照位</param>
        /// <param name="selectNz">目标吸嘴</param>
        /// <returns></returns>
        public PointF CamLabelToNozzlePoint(PointF CamPoint, int selectNz)
        {
            // Feeder都以吸嘴1记录位置
            // 先得到吸嘴1位再得到根据吸嘴1位获得其他吸嘴位
            PointF nz1 = new PointF(); // 得到吸嘴1位置
            nz1.X = CamPoint.X + VariableSys.pNozzle_2_CamLabel.X;
            nz1.Y = CamPoint.Y + VariableSys.pNozzle_2_CamLabel.Y;
            return nz1;
        }

        /// <summary>
        /// 根据 吸嘴位 得到 读码相机位
        /// </summary>
        /// <param name="nzPoint"></param>
        /// <param name="selectNz">当前选中的吸嘴</param>
        /// <returns></returns>
        public PointF NozzleToCamLabelPoint(PointF nzPoint, int selectNz)
        {
            PointF pt = this.OtherToNz1(nzPoint, selectNz);// 得到吸嘴1位置
            pt.X = pt.X - VariableSys.pNozzle_2_CamLabel.X; // 得到相机位
            pt.Y = pt.Y - VariableSys.pNozzle_2_CamLabel.Y;
            return pt;
        }

        private void Roi_ContoursChanged(object sender, EventArgs e)//学习模板 ROIchange事件
        {
            if (imageSet.Roi.Count > 0 && imageSet.Roi[0].Shape.GetType() == typeof(RectangleContour))//进入了校验模式且画出了矩形
            {
                RectangleContour Corner;//=new Contour;
                Corner = (RectangleContour)imageSet.Roi[0].Shape;
                if (((int)Corner.Height & 0x1) == 1)
                {
                    Corner.Height += 1;
                }
                if (((int)Corner.Width & 0x1) == 1)
                {
                    Corner.Width += 1;
                }
                imageSet.Image.Overlays.Default.Clear();
                //如果事件为Textchanged 更新到变量 和 INI
                if (sender.GetType() == typeof(NumericUpDown))
                {
                    PointF TEMP = new PointF(0, 0);
                    TEMP.X = (float)nUDX_Pro.Value;
                    TEMP.Y = (float)nUDY_Pro.Value;
                    DrawCross(imageSet, false, 20, TEMP);
                }
            }

        }
        private void DrawCross(ImageViewer imageview, bool IsAllImage, int length, PointF offset)
        {
            PointContour TemplateCenter = new PointContour();
            if (IsAllImage)//
            {
                TemplateCenter.X = imageview.Image.Width / 2;
                TemplateCenter.Y = imageview.Image.Height / 2;
            }
            else
            {
                RectangleContour Corner;//=new Contour;
                Corner = (RectangleContour)imageview.Roi[0].Shape;
                TemplateCenter.X = Corner.Left + Corner.Width / 2;
                TemplateCenter.Y = Corner.Top + Corner.Height / 2;
            }
            imageview.Image.Overlays.Default.AddLine(new LineContour(new PointContour(TemplateCenter.X + (double)offset.X - length, TemplateCenter.Y + offset.Y), new PointContour(TemplateCenter.X + offset.X + length, TemplateCenter.Y + offset.Y)), Rgb32Value.RedColor);
            imageview.Image.Overlays.Default.AddLine(new LineContour(new PointContour(TemplateCenter.X + (double)offset.X, TemplateCenter.Y + offset.Y - length), new PointContour(TemplateCenter.X + offset.X, TemplateCenter.Y + offset.Y + length)), Rgb32Value.RedColor);
        }
        //todo 轴控初始化_二代机VS三代机
        private short AxisInit()
        {
            rtn = Axis_RunParam.CardInit(Variable.sPath_Adt_Configure, Variable.sPath_Adt_Configure2);
            if (rtn != 0)
            {
                return 1;
            }
            VariableSys.machineVersion = (short)Ini_Sys.IniReadNum("MachineType", "MachineVersion");
            if (VariableSys.machineVersion == 3)
            {
                X = new Axis_RunParam(1);
                Y = new Axis_RunParam(2);
                Turn = new Axis_RunParam(3);
                Axis4 = new Axis_RunParam(4);
                R1 = new R_RunParam(5);
                R2 = new R_RunParam(5);
                R3 = new R_RunParam(6);
                R4 = new R_RunParam(6);
                Z1 = new Z_RunParam(7);
                Z2 = new Z_RunParam(7);
                Z3 = new Z_RunParam(8);
                Z4 = new Z_RunParam(8);
                //机台坐标
                VariableSys.iAxisSource = (short)Ini_Sys.IniReadNum("RunOption", "AxisPosSource");
                X.iAxisSource = 0;
                Y.iAxisSource = 0;
                Turn.iAxisSource = VariableSys.iAxisSource;
                Z1.iAxisSource = 0;
                Z2.iAxisSource = 0;
                Z3.iAxisSource = 0;
                Z4.iAxisSource = 0;
                Turn.MinDiff = 0.05;

                this.R_RunParamMap.Clear();
                this.Z_RunParamMap.Clear();

                this.Z_RunParamMap.TryAdd(0, Z1);
                this.Z_RunParamMap.TryAdd(1, Z2);
                this.Z_RunParamMap.TryAdd(2, Z3);
                this.Z_RunParamMap.TryAdd(3, Z4);

                this.R_RunParamMap.TryAdd(0, R1);
                this.R_RunParamMap.TryAdd(1, R2);
                this.R_RunParamMap.TryAdd(2, R3);
                this.R_RunParamMap.TryAdd(3, R4);

                this.Z_RunParamMap[0].Check_vaccum = new IO.IOInput(1, 2);
                this.Z_RunParamMap[0].XI_vaccum = new IO.IOOutput(7, 7);
                this.Z_RunParamMap[0].PO_vaccum = new IO.IOOutput(8, 7);
                this.Z_RunParamMap[0].HomeLimit = new IO.IOInput(7, 1);

                this.Z_RunParamMap[0].MoveDir = 1;

                this.Z_RunParamMap[1].Check_vaccum = new IO.IOInput(1, 1);
                this.Z_RunParamMap[1].XI_vaccum = new IO.IOOutput(7, 6);
                this.Z_RunParamMap[1].PO_vaccum = new IO.IOOutput(8, 6);
                this.Z_RunParamMap[1].HomeLimit = new IO.IOInput(7, 1);
                this.Z_RunParamMap[1].MoveDir = -1;

                this.Z_RunParamMap[2].Check_vaccum = new IO.IOInput(1, 4);
                this.Z_RunParamMap[2].XI_vaccum = new IO.IOOutput(7, 4);
                this.Z_RunParamMap[2].PO_vaccum = new IO.IOOutput(8, 4);
                this.Z_RunParamMap[2].HomeLimit = new IO.IOInput(8, 1);
                this.Z_RunParamMap[2].MoveDir = -1;

                this.Z_RunParamMap[3].Check_vaccum = new IO.IOInput(1, 5);
                this.Z_RunParamMap[3].XI_vaccum = new IO.IOOutput(7, 5);
                this.Z_RunParamMap[3].PO_vaccum = new IO.IOOutput(8, 5);
                this.Z_RunParamMap[3].HomeLimit = new IO.IOInput(8, 1);
                this.Z_RunParamMap[3].MoveDir = 1;

                XY = new Axis_RunParam(1);
                XY.CreateCrdXY(0, 1);

                IO.IOManager.Instance.Card.TryAdd(0, X);
                IO.IOManager.Instance.Card.TryAdd(1, Y);
                IO.IOManager.Instance.Card.TryAdd(2, Turn);
                IO.IOManager.Instance.Card.TryAdd(3, Axis4);
                IO.IOManager.Instance.Card.TryAdd(4, R1);
                IO.IOManager.Instance.Card.TryAdd(5, R4);
                IO.IOManager.Instance.Card.TryAdd(6, Z1);
                IO.IOManager.Instance.Card.TryAdd(7, Z4);
                IO.IOManager.Instance.Card.TryAdd(8, R2);
                IO.IOManager.Instance.Card.TryAdd(9, R3);
                IO.IOManager.Instance.Card.TryAdd(10, Z2);
                IO.IOManager.Instance.Card.TryAdd(11, Z3);
            }
            else
            {
                X = new Axis_RunParam(1);
                Y = new Axis_RunParam(2);
                Turn = new Axis_RunParam(3);
                Axis4 = new Axis_RunParam(4);
                R1 = new R_RunParam(5);
                R2 = new R_RunParam(6);
                R3 = new R_RunParam(7);
                R4 = new R_RunParam(8);
                Z1 = new Z_RunParam(9);
                Z2 = new Z_RunParam(9);
                Z3 = new Z_RunParam(10);
                Z4 = new Z_RunParam(10);
                //机台坐标
                VariableSys.iAxisSource = (short)Ini_Sys.IniReadNum("RunOption", "AxisPosSource");
                X.iAxisSource = VariableSys.iAxisSource;
                Y.iAxisSource = VariableSys.iAxisSource;
                Turn.iAxisSource = VariableSys.iAxisSource;
                Z1.iAxisSource = 0;
                Z2.iAxisSource = 0;
                Z3.iAxisSource = 0;
                Z4.iAxisSource = 0;

                this.R_RunParamMap.Clear();
                this.Z_RunParamMap.Clear();

                this.Z_RunParamMap.TryAdd(0, Z1);
                this.Z_RunParamMap.TryAdd(1, Z2);
                this.Z_RunParamMap.TryAdd(2, Z3);
                this.Z_RunParamMap.TryAdd(3, Z4);

                this.R_RunParamMap.TryAdd(0, R1);
                this.R_RunParamMap.TryAdd(1, R2);
                this.R_RunParamMap.TryAdd(2, R3);
                this.R_RunParamMap.TryAdd(3, R4);

                this.Z_RunParamMap[0].Check_vaccum = new IO.IOInput(1, 2);
                this.Z_RunParamMap[0].XI_vaccum = new IO.IOOutput(7, 7);
                this.Z_RunParamMap[0].PO_vaccum = new IO.IOOutput(8, 7);
                this.Z_RunParamMap[0].Svon = new IO.IOOutput(9, 6);
                this.Z_RunParamMap[0].HomeLimit = new IO.IOInput(9, 1);

                this.Z_RunParamMap[0].MoveDir = 1;

                this.Z_RunParamMap[1].Check_vaccum = new IO.IOInput(1, 1);
                this.Z_RunParamMap[1].XI_vaccum = new IO.IOOutput(7, 6);
                this.Z_RunParamMap[1].PO_vaccum = new IO.IOOutput(8, 6);
                this.Z_RunParamMap[1].Svon = new IO.IOOutput(9, 6);
                this.Z_RunParamMap[1].HomeLimit = new IO.IOInput(9, 1);
                this.Z_RunParamMap[1].MoveDir = -1;

                this.Z_RunParamMap[2].Check_vaccum = new IO.IOInput(1, 4);
                this.Z_RunParamMap[2].XI_vaccum = new IO.IOOutput(7, 4);
                this.Z_RunParamMap[2].PO_vaccum = new IO.IOOutput(8, 4);
                this.Z_RunParamMap[2].Svon = new IO.IOOutput(11, 6);
                this.Z_RunParamMap[2].HomeLimit = new IO.IOInput(11, 1);
                this.Z_RunParamMap[2].MoveDir = -1;

                this.Z_RunParamMap[3].Check_vaccum = new IO.IOInput(1, 5);
                this.Z_RunParamMap[3].XI_vaccum = new IO.IOOutput(7, 5);
                this.Z_RunParamMap[3].PO_vaccum = new IO.IOOutput(8, 5);
                this.Z_RunParamMap[3].Svon = new IO.IOOutput(11, 6);
                this.Z_RunParamMap[3].HomeLimit = new IO.IOInput(11, 1);
                this.Z_RunParamMap[3].MoveDir = 1;

                XY = new Axis_RunParam(1);
                XY.CreateCrdXY(0, 1);

                IO.IOManager.Instance.Card.TryAdd(0, X);
                IO.IOManager.Instance.Card.TryAdd(1, Y);
                IO.IOManager.Instance.Card.TryAdd(2, Turn);
                IO.IOManager.Instance.Card.TryAdd(3, Axis4);
                IO.IOManager.Instance.Card.TryAdd(4, R1);
                IO.IOManager.Instance.Card.TryAdd(5, R2);
                IO.IOManager.Instance.Card.TryAdd(6, R3);
                IO.IOManager.Instance.Card.TryAdd(7, R4);
                IO.IOManager.Instance.Card.TryAdd(8, Z1);
                IO.IOManager.Instance.Card.TryAdd(9, Z2);
                IO.IOManager.Instance.Card.TryAdd(10, Z3);
                IO.IOManager.Instance.Card.TryAdd(11, Z4);
            }
            IO.IOManager.Instance.ResetAllOut(); // 释放所有IO
            bArr_IO_IN_Status.bIN_AirPressure = new IO.IOInput(4, 2);
            bArr_IO_IN_Status.bIN_Carry_Move = new IO.IOInput(5, 1);
            bArr_IO_IN_Status.bIN_Carry_Origin = new IO.IOInput(5, 2);
            bArr_IO_IN_Status.bIN_FeederOK_Left = new IO.IOInput(2, 2);
            bArr_IO_IN_Status.bIN_FeederOK_Right = new IO.IOInput(3, 2);
            bArr_IO_IN_Status.bIN_ResetBtn = new IO.IOInput(4, 5);
            bArr_IO_IN_Status.bIN_StopBtn = new IO.IOInput(4, 4);
            bArr_IO_IN_Status.bIN_StartBtn = new IO.IOInput(4, 1);
            bArr_IO_IN_Status.bIN_SafeDoor = new IO.IOInput(2, 5);
            bArr_IO_IN_Status.bIN_SafeGrant = new IO.IOInput(3, 4);
            bArr_IO_IN_Status.bIN_Stop_Move = new IO.IOInput(5, 5);
            bArr_IO_IN_Status.bIN_Stop_Origin = new IO.IOInput(5, 4);

            IO.IOManager.Instance.FDMonitor[0] = DateTime.Now;
            IO.IOManager.Instance.FDMonitor[1] = DateTime.Now;

            // 开始监控轴状态
            Task Thread_IO = new Task(IO.IOManager.Instance.updateIO);
            Thread_IO.Start();
            #endregion

            return 0;
        }
        //todo 轴回零
        private short AxisGoHome(int timeout)
        {
            OpenBtnLight(1);

            short rtn = 0;
            Stopwatch a = new Stopwatch();
            a.Start();

            #region Step-1 Z轴 回原点
            this.CarryProduct_OFF();
            this.StopProduct_OFF();
            IO.IOManager.Instance.ResetAllAxis();

            Turn.SetIO_OUT(6);
            if (VariableSys.machineVersion == 3)
            {
                for (uint i = 0; i < Variable.NOZZLE_NUM; i += 2)
                {
                    this.Z_RunParamMap[i].PO_vaccum.ResetIO();
                    this.Z_RunParamMap[i].XI_vaccum.ResetIO();
                    Thread.Sleep(100);
                }
            }
            else
            {
                for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
                {
                    this.Z_RunParamMap[i].PO_vaccum.ResetIO();
                    this.Z_RunParamMap[i].XI_vaccum.ResetIO();
                    this.Z_RunParamMap[i].Svon.SetIO();
                    Thread.Sleep(100);
                }
            }
            Variable.VelMode Home_Z = new Variable.VelMode(0, 15, 50, 50);
            Variable.VelMode Home_R = new Variable.VelMode(0, 50, 150, 150);
            Variable.VelMode Home_XY = new Variable.VelMode(10, 15, 50, 50);
            Variable.VelMode Home_Turn = new Variable.VelMode(5, 10, 30, 30);
            Thread.Sleep(100);
            if (VariableSys.machineVersion == 3)
            {
                #region 不带限位方式回原点
                // Z轴一拖二
                for (uint i = 0; i < Variable.NOZZLE_NUM; i += 2)
                {
                    Z_RunParamMap[i].Jog(Home_Z, false);
                    Thread.Sleep(100);
                    Z_RunParamMap[i].GetAxisSts();
                    while (!Z_RunParamMap[i].bNegLimit)
                    {
                        Thread.Sleep(10);
                        Z_RunParamMap[i].GetAxisSts();
                        if (a.ElapsedMilliseconds > timeout)
                        {
                            return 2;
                        }
                    }

                    Z_RunParamMap[i].Stop();
                    Thread.Sleep(100);
                    rtn += this.Z_RunParamMap[i].GoHome(Axis_Advantech.HomeMode.MODE1_Abs, Home_Z, true);
                    Thread.Sleep(100);
                    Z_RunParamMap[i].GetAxisSts();

                    while (this.Z_RunParamMap[i].bAxisIsHoming)
                    {
                        Thread.Sleep(10);
                        Z_RunParamMap[i].GetAxisSts();
                        if (a.ElapsedMilliseconds > timeout)
                        {
                            return 2;
                        }
                    }

                    this.Z_RunParamMap[i].StopAxis();
                    Thread.Sleep(200);
                    this.Z_RunParamMap[i].ZeroAxis();
                }
                #endregion
            }
            else
            {
                if (VariableSys.iZHomeStyle == 0)
                {
                    #region 不带限位方式回原点
                    // Z轴一拖二
                    for (uint i = 0; i < 3; i += 2)
                    {
                        if (Z_RunParamMap[i].bNegLimit)
                        {
                            rtn = Z_RunParamMap[i].Jog(Home_Z, true);
                            Thread.Sleep(100);
                            Z_RunParamMap[i].GetAxisSts();

                            while (Z_RunParamMap[i].bNegLimit && a.ElapsedMilliseconds < timeout)
                            {
                                Thread.Sleep(10);
                                Z_RunParamMap[i].GetAxisSts();
                            }
                        }

                        Thread.Sleep(100);
                        Z_RunParamMap[i].StopAxis();
                        Thread.Sleep(100);
                        rtn += this.Z_RunParamMap[i].GoHome(Axis_Advantech.HomeMode.MODE2_Lmt, Home_Z, false);
                        Thread.Sleep(100);
                        Z_RunParamMap[i].GetAxisSts();

                        while (this.Z_RunParamMap[i].bAxisIsHoming && a.ElapsedMilliseconds < timeout)
                        {
                            Thread.Sleep(10);
                            Z_RunParamMap[i].GetAxisSts();
                        }

                        Thread.Sleep(100);
                        this.Z_RunParamMap[i].ZeroAxis();
                        Thread.Sleep(500);
                        rtn += this.Z_RunParamMap[i].GoPos(20, Home_Z);
                        Thread.Sleep(500);
                        Z_RunParamMap[i].GetAxisSts();

                        while (a.ElapsedMilliseconds < timeout
                            && !this.Z_RunParamMap[i].AxisReach(20))
                        {
                            Z_RunParamMap[i].GetAxisSts();
                            Thread.Sleep(10);
                        }

                        Z_RunParamMap[i].StopAxis();
                        Thread.Sleep(100);
                        this.Z_RunParamMap[i].ZeroAxis();
                    }
                    #endregion
                }
                else
                {
                    #region 带限位方式回原点
                    // Z轴一拖二
                    for (uint i = 0; i < 3; i += 2)
                    {
                        // 如果 感应到限位感应器 就向下回原点
                        if (Z_RunParamMap[i].HomeLimit.GetIO())
                        {
                            rtn += Z_RunParamMap[i].GoHome(Axis_Advantech.HomeMode.MODE7_AbsSearch, Home_Z, true);
                            if (rtn != 0)
                                return 2;

                            while (Z_RunParamMap[i].bAxisIsHoming
                                || !Z_RunParamMap[i].bHome)
                            {
                                if (a.ElapsedMilliseconds > timeout || Z_RunParamMap[i].bAxisServoWarning)
                                {
                                    return 2;
                                }

                                Thread.Sleep(1);
                            }
                        }
                        else
                        {
                            rtn += Z_RunParamMap[i].Jog(Home_Z, false);

                            while (!Z_RunParamMap[i].HomeLimit.GetIO()
                                && a.ElapsedMilliseconds < timeout)
                            {
                                if (a.ElapsedMilliseconds > timeout || Z_RunParamMap[i].bAxisServoWarning)
                                {
                                    return 2;
                                }

                                Thread.Sleep(1);
                            }

                            Z_RunParamMap[i].StopAxis();
                            Z_RunParamMap[i].CleSts(true);
                            Thread.Sleep(100);
                            i -= 2;
                            continue;
                        }
                    }
                    #endregion
                }
            }
            if (a.ElapsedMilliseconds > timeout)
            {
                StopAllAxis();
                a.Stop();
                PutInLog("Z轴 回零出错");
                return 2;
            }

            Thread.Sleep(500);
            #endregion

            Z1.ZeroAxis();
            Z2.ZeroAxis();
            Z3.ZeroAxis();
            Z4.ZeroAxis();

            Thread.Sleep(500);

            this.All_ZGoSafeTillStop(30000, VariableSys.VelMode_Current_Manual);
            Thread.Sleep(500);

            #region Step-2 R1 R2 回零， X 到负极限
            a.Reset();
            a.Start();

            if (!this.All_RGoHome(Axis_RunParam.HomeMode.MODE7_AbsSearch, new Variable.VelMode(0, 20, 50, 50)))
            {
                StopAllAxis();
                a.Stop();
                PutInLog("R 回零出错");
                return 2;
            }

            rtn += X.Jog(Home_XY, false);

            if (rtn != 0)
            {
                StopAllAxis();
                a.Stop();
                PutInLog("R1 R2 回零， X 到负极限 出错");
                return 2;
            }

            Thread.Sleep(100);

            while (!X.bNegLimit || X.bAxisIsRunning)
            {
                X.GetAxisSts();
                Thread.Sleep(10);
                if (a.ElapsedMilliseconds > timeout || X.bAxisServoWarning)
                {
                    StopAllAxis();
                    a.Stop();
                    PutInLog("R1 R2 回零， X Y 到正极限 出错");
                    return 2;
                }
            }
            #endregion
            X.StopAxis();

            #region Step-3 X R 回零
            Thread.Sleep(100);

            rtn += X.GoHome(Axis_RunParam.HomeMode.MODE1_Abs, Home_XY, true);

            Thread.Sleep(100);

            if (rtn != 0)
            {
                StopAllAxis();
                a.Stop();
                PutInLog("R1 R2 回零， X 到回原点 出错");
                return 2;
            }

            while (X.bAxisIsHoming || X.bAxisIsRunning)// || Wide.bAxisIsRunning || Wide.bAxisIsHoming)
            {
                Thread.Sleep(10);

                if (a.ElapsedMilliseconds > timeout || X.bAxisServoWarning)
                {
                    a.Stop();
                    PutInLog("X 回零 出错");
                    return 3;
                }
            }
            #endregion

            #region Step-4 Turn回零

            rtn += this.Turn.Jog(Home_Turn, false);

            if (rtn != 0)
            {
                StopAllAxis();
                a.Stop();
                PutInLog("Turn 到负极限 出错");
                return 2;
            }

            Thread.Sleep(100);

            while (!Turn.bNegLimit)
            {
                Thread.Sleep(10);
                if (a.ElapsedMilliseconds > timeout || Turn.bAxisServoWarning)
                {
                    StopAllAxis();
                    a.Stop();
                    PutInLog("Turn 到负极限 出错");
                    return 2;
                }
            }

            Turn.StopAxis();

            #endregion

            #region Turn 回零
            Thread.Sleep(100);

            rtn += this.Turn.GoHome(Axis_RunParam.HomeMode.MODE1_Abs, Home_Turn, true);

            Thread.Sleep(100);
            while (a.ElapsedMilliseconds < timeout && this.Turn.bAxisIsHoming)
            {
                Thread.Sleep(10);
                if (a.ElapsedMilliseconds > timeout || this.Turn.bAxisServoWarning)
                {
                    rtn = 2;
                    return rtn;
                }
            }
            #endregion

            Thread.Sleep(100);
            Turn.ZeroAxis();
            Thread.Sleep(100);
            this.Turn.GoPosTillStop(30000, VariableSys.dTurnXIAngle, VariableSys.VelMode_Current_Manual);
            Thread.Sleep(100);

            #region Step-5 Y回零
            rtn += Y.Jog(Home_XY, false);

            if (rtn != 0)
            {
                StopAllAxis();
                a.Stop();
                PutInLog(" Y 到负极限 出错");
                return 2;
            }

            Thread.Sleep(10);

            while (!Y.bNegLimit || Y.bAxisIsRunning)
            {
                Thread.Sleep(10);
                if (a.ElapsedMilliseconds > timeout || Y.bAxisServoWarning)
                {
                    StopAllAxis();
                    a.Stop();
                    PutInLog("Y 到负极限 出错");
                    return 2;
                }
            }

            Y.StopAxis();
            Thread.Sleep(100);
            rtn += Y.GoHome(Axis_RunParam.HomeMode.MODE1_Abs, Home_XY, true);

            Thread.Sleep(100);

            if (rtn != 0)
            {
                StopAllAxis();
                a.Stop();
                PutInLog("Y 到回原点出错");
                return 2;
            }

            Thread.Sleep(10);
            while (Y.bAxisIsHoming || Y.bAxisIsRunning)
            {
                Thread.Sleep(10);

                if (a.ElapsedMilliseconds > timeout || Y.bAxisServoWarning)
                {
                    a.Stop();
                    PutInLog("Y  回零 出错");
                    return 3;
                }
            }
            #endregion

            Thread.Sleep(2000);
            this.All_RGoPos(0, Home_R);

            Thread.Sleep(2000);
            PutInLog("回零时间:" + ((int)(a.ElapsedMilliseconds)).ToString() + "ms");
            a.Stop();

            #region 清为零位
            X.ZeroAxis();
            Y.ZeroAxis();

            for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
            {
                this.R_RunParamMap[i].ZeroAxis();
            }

            Thread.Sleep(100);
            #endregion

            CloseBtnLight(1);

            //SerializableHelper<MachineOrgConfig> helper = new SerializableHelper<MachineOrgConfig>(this.MachineConfig);
            //this.MachineConfig = helper.DeXMLSerialize(Variable.sPath_Configure + "MachineOrg.xml");

            //if (MachineConfig.EnableMachineOrg)
            //{
            //    Roi rect = new RectangleContour(0, 0, 1280, 1024).ConvertToRoi();
            //    bool flag = false;
            //    VisionImage image = new VisionImage();
            //    PointF Offset = this.MachineOrgCheck(this.MachineConfig.OrgXY, ref image, ref rect, ref flag);
            //    if (!flag)
            //    {
            //        MessageBox.Show("寻找机械原点失败，请检查机械原点 或者 感应器是否无效");
            //    }
            //    else
            //    {
            //        if (Math.Abs(Offset.X) >= 0.02 || Math.Abs(Offset.Y) >= 0.02)
            //        {
            //            XYGoPosTillStop(30000, Offset, VariableSys.VelMode_Current_Manual);
            //            Thread.Sleep(200);
            //            X.Stop();
            //            Y.Stop();
            //            Thread.Sleep(200);
            //            X.CleSts();
            //            Y.CleSts();
            //            X.ZeroAxis();
            //            Y.ZeroAxis();
            //        }
            //    }
            //}

            return 0;
        }
        #region 灯光控制
        //汇林光源 & OPT
        //***********************************************
        private short OPTChannelTransform(short channel)
        {
            short aa = (short)((channel + 1) % 3);
            if (aa == 0)
            {
                aa = 3;
            }
            return aa;
        }
        private int Init_LightUp(short VendorIndex)
        {
            int lRet = 0;
            short LightIndex = 0;
            try
            {
                if (VendorIndex == 0)//Huilin
                {
                    serialPort_UpLight.PortName = "COM" + VariableSys.ComIndex_LightUp.ToString();
                    serialPort_UpLight.Open();
                }
                else//OPT
                {
                    lRet = OPTController_Up.InitSerialPort("COM" + VariableSys.ComIndex_LightUp.ToString());
                }
                openchannel(VendorIndex, LightIndex, 1);
                Thread.Sleep(50);
                openchannel(VendorIndex, LightIndex, 2);
                Thread.Sleep(50);
                openchannel(VendorIndex, LightIndex, 3);
            }
            catch
            {
                lRet = 1;
            }
            return lRet;
        }
        private int Init_LightDown(short VendorIndex)
        {
            int lRet = 0;
            short LightIndex = 1;
            try
            {
                if (VendorIndex == 0)//Huilin
                {
                    serialPort_DownLight.PortName = "COM" + VariableSys.ComIndex_LightDown.ToString();
                    serialPort_DownLight.Open();
                }
                else//OPT
                {
                    lRet = OPTController_Down.InitSerialPort("COM" + VariableSys.ComIndex_LightDown.ToString());
                }
                openchannel(VendorIndex, LightIndex, 1);
                Thread.Sleep(50);
                openchannel(VendorIndex, LightIndex, 2);
                Thread.Sleep(50);
                openchannel(VendorIndex, LightIndex, 3);
            }
            catch
            {
                lRet = 1;
            }
            return lRet;
        }
        private int Close_LightUp(short VendorIndex)
        {
            int lRet = 0;
            short LightIndex = 0;
            try
            {
                closechannel(VendorIndex, LightIndex, 1);
                Thread.Sleep(50);
                closechannel(VendorIndex, LightIndex, 2);
                Thread.Sleep(50);
                closechannel(VendorIndex, LightIndex, 3);
                if (VendorIndex == 0)//Huilin
                {
                    serialPort_UpLight.Close();
                }
                else//OPT
                {
                    lRet = OPTController_Up.ReleaseSerialPort();
                }
            }
            catch
            {
                lRet = 1;
            }
            return lRet;
        }
        private int Close_LightDown(short VendorIndex)
        {
            int lRet = 0;
            short LightIndex = 1;
            closechannel(VendorIndex, LightIndex, 1);
            Thread.Sleep(50);
            closechannel(VendorIndex, LightIndex, 2);
            Thread.Sleep(50);
            closechannel(VendorIndex, LightIndex, 3);
            try
            {
                if (VendorIndex == 0)//Huilin
                {
                    serialPort_DownLight.Close();
                }
                else//OPT
                {
                    lRet = OPTController_Down.ReleaseSerialPort();
                }
            }
            catch
            {
                lRet = 1;
            }
            return lRet;
        }
        private void openchannel(short VendorIndex, short LightIndex, short ChannelIndex)//VendorIndex:0-Huilin 1-OPT LightIndex:0-Up 1-Down
        {
            if (VendorIndex == 0)//Huilin
            {
                Byte[] senByte = new Byte[8];
                senByte[0] = 0x2;
                senByte[1] = 0x4D;
                senByte[2] = 0x30;
                senByte[3] = 0x30;
                senByte[4] = (Byte)(0x30 + ChannelIndex);
                senByte[5] = 0x31;
                senByte[6] = 0x0D;
                senByte[7] = 0x00;
                if (LightIndex == 0)//Up
                {
                    serialPort_UpLight.Write(senByte, 0, 8);
                }
                else//Down
                {
                    serialPort_DownLight.Write(senByte, 0, 8);
                }
            }
            else//OPT
            {
                if (LightIndex == 0)//Up
                {
                    OPTController_Up.TurnOnChannel(OPTChannelTransform(ChannelIndex));
                }
                else
                {
                    OPTController_Down.TurnOnChannel(OPTChannelTransform(ChannelIndex));
                }
            }

        }
        private void closechannel(short VendorIndex, short LightIndex, short ChannelIndex)
        {
            if (VendorIndex == 0)//Huilin
            {
                Byte[] senByte = new Byte[8];
                senByte[0] = 0x2;
                senByte[1] = 0x4D;
                senByte[2] = 0x30;
                senByte[3] = 0x30;
                senByte[4] = (Byte)(0x30 + ChannelIndex);
                senByte[5] = 0x30;
                senByte[6] = 0x0D;
                senByte[7] = 0x00;
                if (LightIndex == 0)
                {
                    serialPort_UpLight.Write(senByte, 0, 8);
                }
                else
                {
                    serialPort_DownLight.Write(senByte, 0, 8);
                }
            }
            else//OPT
            {
                if (LightIndex == 0)
                {
                    OPTController_Up.TurnOffChannel(OPTChannelTransform(ChannelIndex));
                }
                else
                {
                    OPTController_Down.TurnOffChannel(OPTChannelTransform(ChannelIndex));
                }
            }

        }
        private void Setchannelvalue(short VendorIndex, short LightIndex, short ChannelIndex, double ChannelValue)
        {
            if (VendorIndex == 0)//Huilin
            {
                short BAI = (short)Math.Floor(ChannelValue / 100);
                short SHI = (short)Math.Floor((ChannelValue - 100 * BAI) / 10);
                short GE = (short)Math.Floor((ChannelValue - 100 * BAI - 10 * SHI));
                Byte[] senByte = new Byte[10];
                senByte[0] = 0x02;
                senByte[1] = 0x4C;
                senByte[2] = 0x30;
                senByte[3] = 0x30;
                senByte[4] = (Byte)(0x30 + ChannelIndex);
                senByte[5] = Byte.Parse(Encoding.GetEncoding("Unicode").GetBytes(new char[] { char.Parse(BAI.ToString()) })[0].ToString());
                senByte[6] = Byte.Parse(Encoding.GetEncoding("Unicode").GetBytes(new char[] { char.Parse(SHI.ToString()) })[0].ToString());
                senByte[7] = Byte.Parse(Encoding.GetEncoding("Unicode").GetBytes(new char[] { char.Parse(GE.ToString()) })[0].ToString());
                senByte[8] = 0x0D;
                senByte[9] = 0x00;
                if (LightIndex == 0)//UP
                {
                    serialPort_UpLight.Write(senByte, 0, 10);
                }
                else
                {
                    serialPort_DownLight.Write(senByte, 0, 10);
                }
            }
            else//OPT
            {
                if (LightIndex == 0)//UP
                {
                    OPTController_Up.SetIntensity(OPTChannelTransform(ChannelIndex), (int)ChannelValue);
                }
                else
                {
                    OPTController_Down.SetIntensity(OPTChannelTransform(ChannelIndex), (int)ChannelValue);
                }
            }
        }
        //************************************************
        public Stopwatch DownLightWatch = new Stopwatch();
        public void OpenLight_Down()
        {
            this.DownLightWatch.Restart();
        }

        public void NeedCloseLight()
        {
            //更改自动关闭灯源时间为5分钟(原120秒)_Fowindy_0703
            if (this.DownLightWatch.ElapsedMilliseconds > 300000/*120000*/)
            {
                this.LightOFF_D();
            }
        }

        public void LightON_Down_PASTE1(ref Variable.PASTAE PasteMark1)
        {
            this.OpenLight_Down();

            short LightIndex = 1;
            if (PasteMark1.bRed1)
            {
                LightON_RedD();
                Setchannelvalue(VariableSys.LightDownVendor, LightIndex, 1, PasteMark1.dRedValue1);
                Thread.Sleep(50);
            }
            else
            {
                if (VariableSys.LightDownVendor == 1)//OPT
                {
                    Setchannelvalue(VariableSys.LightDownVendor, LightIndex, 1, 0);
                }
                else//汇林光源
                {
                    LightOFF_RedD();
                }
            }
            if (PasteMark1.bGreen1)
            {
                LightON_GreenD();
                Setchannelvalue(VariableSys.LightDownVendor, LightIndex, 2, PasteMark1.dGreenValue1);
                Thread.Sleep(50);
            }
            else
            {
                if (VariableSys.LightDownVendor == 1)//OPT
                {
                    Setchannelvalue(VariableSys.LightDownVendor, LightIndex, 2, 0);
                }
                else//汇林光源
                {
                    LightOFF_GreenD();
                }
            }
            if (PasteMark1.bBlue1)
            {
                LightON_BlueD();
                Setchannelvalue(VariableSys.LightDownVendor, LightIndex, 3, PasteMark1.dBlueValue1);
            }
            else
            {
                if (VariableSys.LightDownVendor == 1)//OPT
                {
                    Setchannelvalue(VariableSys.LightDownVendor, LightIndex, 3, 0);
                }
                else//汇林光源
                {
                    LightOFF_BlueD();
                }
            }
        }
        public void LightON_Down_PASTE2(ref Variable.PASTAE PasteMark2)
        {
            this.OpenLight_Down();

            short LightIndex = 1;
            if (PasteMark2.bRed2)
            {
                LightON_RedD();
                Setchannelvalue(VariableSys.LightDownVendor, LightIndex, 1, PasteMark2.dRedValue2);
                Thread.Sleep(50);
            }
            else
            {
                if (VariableSys.LightDownVendor == 1)//OPT
                {
                    Setchannelvalue(VariableSys.LightDownVendor, LightIndex, 1, 0);
                }
                else//汇林光源
                {
                    LightOFF_RedD();
                }
            }
            if (PasteMark2.bGreen2)
            {
                LightON_GreenD();
                Setchannelvalue(VariableSys.LightDownVendor, LightIndex, 2, PasteMark2.dGreenValue2);
                Thread.Sleep(50);
            }
            else
            {
                if (VariableSys.LightDownVendor == 1)//OPT
                {
                    Setchannelvalue(VariableSys.LightDownVendor, LightIndex, 2, 0);
                }
                else//汇林光源
                {
                    LightOFF_GreenD();
                }
            }

            if (PasteMark2.bBlue2)
            {
                LightON_BlueD();
                Setchannelvalue(VariableSys.LightDownVendor, LightIndex, 3, PasteMark2.dBlueValue2);
            }
            else
            {
                if (VariableSys.LightDownVendor == 1)//OPT
                {
                    Setchannelvalue(VariableSys.LightDownVendor, LightIndex, 3, 0);
                }
                else//汇林光源
                {
                    LightOFF_BlueD();
                }
            }
        }
        private void LightON_Up_PASTE1(ref Variable.PASTAE PasteMark1)
        {
            short LightIndex = 0;
            if (PasteMark1.bRed1)
            {
                LightON_RedU();
                Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 1, PasteMark1.dRedValue1);
                Thread.Sleep(50);
            }
            else
            {
                if (VariableSys.LightUpVendor == 1)//OPT
                {
                    Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 1, 0);
                }
                else//汇林光源
                {
                    LightOFF_RedU();
                }
            }

            if (PasteMark1.bGreen1)
            {
                LightON_GreenU();
                Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 2, PasteMark1.dGreenValue1);
                Thread.Sleep(50);
            }
            else
            {
                if (VariableSys.LightUpVendor == 1)//OPT
                {
                    Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 2, 0);
                }
                else//汇林光源
                {
                    LightOFF_GreenU();
                }
            }

            if (PasteMark1.bBlue1)
            {
                LightON_BlueU();
                Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 3, PasteMark1.dBlueValue1);
            }
            else
            {
                if (VariableSys.LightUpVendor == 1)//OPT
                {
                    Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 3, 0);
                }
                else//汇林光源
                {
                    LightOFF_BlueU();
                }
            }
        }
        private void LightON_Up_PASTE2(ref Variable.PASTAE PasteMark2)
        {
            short LightIndex = 0;
            if (PasteMark2.bRed2)
            {
                LightON_RedU();
                Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 1, PasteMark2.dRedValue2);
                Thread.Sleep(50);
            }
            else
            {
                if (VariableSys.LightUpVendor == 1)//OPT
                {
                    Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 1, 0);
                }
                else//汇林光源
                {
                    LightOFF_RedU();
                }
            }

            if (PasteMark2.bGreen2)
            {
                LightON_GreenU();
                Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 2, PasteMark2.dGreenValue2);
                Thread.Sleep(50);
            }
            else
            {
                if (VariableSys.LightUpVendor == 1)//OPT
                {
                    Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 2, 0);
                }
                else//汇林光源
                {
                    LightOFF_GreenU();
                }
            }

            if (PasteMark2.bBlue2)
            {
                LightON_BlueU();
                Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 3, PasteMark2.dBlueValue2);
            }
            else
            {
                if (VariableSys.LightUpVendor == 1)//OPT
                {
                    Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 3, 0);
                }
                else//汇林光源
                {
                    LightOFF_BlueU();
                }
            }
        }
        private void LightON_Down(bool RedLight_ON, bool GreenLight_ON, bool BlueLight_ON, double RedValue, double GreenValue, double BlueValue)
        {
            this.OpenLight_Down();

            short LightIndex = 1;
            if (RedLight_ON)
            {
                LightON_RedD();
                Setchannelvalue(VariableSys.LightDownVendor, LightIndex, 1, RedValue);
                Thread.Sleep(50);
            }
            else
            {
                if (VariableSys.LightDownVendor == 1)//OPT
                {
                    Setchannelvalue(VariableSys.LightDownVendor, LightIndex, 1, 0);
                }
                else//汇林光源
                {
                    LightOFF_RedD();
                }
            }

            if (GreenLight_ON)
            {
                LightON_GreenD();
                Setchannelvalue(VariableSys.LightDownVendor, LightIndex, 2, GreenValue);
                Thread.Sleep(50);
            }
            else
            {
                if (VariableSys.LightDownVendor == 1)//OPT
                {
                    Setchannelvalue(VariableSys.LightDownVendor, LightIndex, 2, 0);
                }
                else//汇林光源
                {
                    LightOFF_GreenD();
                }
            }

            if (BlueLight_ON)
            {
                LightON_BlueD();
                Setchannelvalue(VariableSys.LightDownVendor, LightIndex, 3, BlueValue);
            }
            else
            {
                if (VariableSys.LightDownVendor == 1)//OPT
                {
                    Setchannelvalue(VariableSys.LightDownVendor, LightIndex, 3, 0);
                }
                else//汇林光源
                {
                    LightOFF_BlueD();
                }
            }
        }//下视觉灯
        public void LightON_Up(bool RedLight_ON, bool GreenLight_ON, bool BlueLight_ON, double RedValue, double GreenValue, double BlueValue)
        {
            short LightIndex = 0;
            if (RedLight_ON)
            {
                LightON_RedU();
                Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 1, RedValue);
                Thread.Sleep(50);
            }
            else
            {
                if (VariableSys.LightUpVendor == 1)//OPT
                {
                    Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 1, 0);
                }
                else//汇林光源
                {
                    LightOFF_RedU();
                }
            }

            if (GreenLight_ON)
            {
                LightON_GreenU();
                Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 2, GreenValue);
                Thread.Sleep(50);
            }
            else
            {
                if (VariableSys.LightUpVendor == 1)//OPT
                {
                    Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 2, 0);
                }
                else//汇林光源
                {
                    LightOFF_GreenU();
                }
            }

            if (BlueLight_ON)
            {
                LightON_BlueU();
                Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 3, BlueValue);
            }
            else
            {
                if (VariableSys.LightUpVendor == 1)//OPT
                {
                    Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 3, 0);
                }
                else//汇林光源
                {
                    LightOFF_BlueU();
                }
            }
        }//上视觉灯

        public void LightON_Up(string Light)
        {
            string[] arr = Light.Split(',');
            if (arr.Length < 6) return;

            short LightIndex = 0;
            if (arr[0] == "1")
            {
                LightON_RedU();
                Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 1, double.Parse(arr[3]));
                Thread.Sleep(50);
            }
            else
            {
                if (VariableSys.LightUpVendor == 1)//OPT
                {
                    Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 1, 0);
                }
                else//汇林光源
                {
                    LightOFF_RedU();
                }
            }

            if (arr[1] == "1")
            {
                LightON_GreenU();
                Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 2, double.Parse(arr[4]));
                Thread.Sleep(50);
            }
            else
            {
                if (VariableSys.LightUpVendor == 1)//OPT
                {
                    Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 2, 0);
                }
                else//汇林光源
                {
                    LightOFF_GreenU();
                }
            }

            if (arr[2] == "1")
            {
                LightON_BlueU();
                Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 3, double.Parse(arr[5]));
            }
            else
            {
                if (VariableSys.LightUpVendor == 1)//OPT
                {
                    Setchannelvalue(VariableSys.LightUpVendor, LightIndex, 3, 0);
                }
                else//汇林光源
                {
                    LightOFF_BlueU();
                }
            }
        }//上视觉灯

        //************************************************
        public void LightON_U()
        {
            Turn.SetIO_OUT(7);
        }
        public void LightOFF_U()
        {
            Turn.ResetIO_OUT(7);
        }
        public void LightON_D()
        {
            X.SetIO_OUT(4);
            X.SetIO_OUT(6);
            X.SetIO_OUT(7);
        }
        public void LightOFF_D()
        {
            this.DownLightWatch.Stop();
            this.DownLightWatch.Reset();
            X.ResetIO_OUT(4);
            X.ResetIO_OUT(6);
            X.ResetIO_OUT(7);
        }
        public void LightON_RedU()
        {
            Turn.SetIO_OUT(7);
        }
        public void LightON_GreenU()
        {
        }
        public void LightON_BlueU()
        {
        }

        public void LightOFF_RedU()
        {
            Turn.ResetIO_OUT(7);
        }
        public void LightOFF_GreenU()
        {
        }
        public void LightOFF_BlueU()
        {
        }
        public void LightON_RedD()
        {
            X.SetIO_OUT(7);
        }
        public void LightON_GreenD()
        {
            X.SetIO_OUT(6);
        }
        public void LightON_BlueD()
        {
            X.SetIO_OUT(4);
        }
        public void LightOFF_RedD()
        {
            X.ResetIO_OUT(7);
        }
        public void LightOFF_GreenD()
        {
            X.ResetIO_OUT(6);
        }
        public void LightOFF_BlueD()
        {
            X.ResetIO_OUT(4);
        }
        #endregion

        //todo 手动IO输出
        private void Output(object sender, EventArgs e)// //手动模式下 IO输出信号
        {
            int i_Output = int.Parse(((PictureBox)sender).Name.Remove(0, 4));//0-15
            switch (cB_CardIO_Index.SelectedIndex)
            {
                case 0://1-4轴
                    if (VariableSys.bIO_Out_Card_0to3[i_Output] == true)
                    {
                        VariableSys.bIO_Out_Card_0to3[i_Output] = false;
                        PB_IO_OUT[i_Output].Image = GeneralLabelerStation.Properties.Resources.green;
                        if (i_Output >= 0 && i_Output <= 3)
                        {
                            X.ResetIO_OUT((ushort)(4 + i_Output));
                        }
                        if (i_Output >= 4 && i_Output <= 7)
                        {
                            Y.ResetIO_OUT((ushort)(i_Output));
                        }
                        if (i_Output >= 8 && i_Output <= 11)
                        {
                            Turn.ResetIO_OUT((ushort)(i_Output - 4));
                        }
                        if (i_Output >= 12 && i_Output <= 15)
                        {
                            Axis4.ResetIO_OUT((ushort)(i_Output - 8));
                        }
                    }
                    else
                    {
                        VariableSys.bIO_Out_Card_0to3[i_Output] = true;
                        PB_IO_OUT[i_Output].Image = GeneralLabelerStation.Properties.Resources.red;
                        if (i_Output >= 0 && i_Output <= 3)
                        {
                            X.SetIO_OUT((ushort)(4 + i_Output));
                        }
                        if (i_Output >= 4 && i_Output <= 7)
                        {
                            Y.SetIO_OUT((ushort)(i_Output));
                        }
                        if (i_Output >= 8 && i_Output <= 11)
                        {
                            Turn.SetIO_OUT((ushort)(i_Output - 4));
                        }
                        if (i_Output >= 12 && i_Output <= 15)
                        {
                            Axis4.SetIO_OUT((ushort)(i_Output - 8));
                        }
                    }
                    break;
                case 1://5-8轴
                    if (VariableSys.bIO_Out_Card_4to7[i_Output] == true)
                    {
                        VariableSys.bIO_Out_Card_4to7[i_Output] = false;
                        PB_IO_OUT[i_Output].Image = GeneralLabelerStation.Properties.Resources.green;
                        if (i_Output >= 0 && i_Output <= 3)
                        {
                            R1.ResetIO_OUT((ushort)(4 + i_Output));
                        }
                        if (VariableSys.machineVersion == 3)
                        {
                            if (i_Output >= 4 && i_Output <= 7)
                            {
                                R3.ResetIO_OUT((ushort)(i_Output));
                            }
                            if (i_Output >= 8 && i_Output <= 11)
                            {
                                Z1.ResetIO_OUT((ushort)(i_Output - 4));
                            }
                            if (i_Output >= 12 && i_Output <= 15)
                            {
                                Z3.ResetIO_OUT((ushort)(i_Output - 8));
                            }
                        }
                        else
                        {
                            if (i_Output >= 4 && i_Output <= 7)
                            {
                                R2.ResetIO_OUT((ushort)(i_Output));
                            }
                            if (i_Output >= 8 && i_Output <= 11)
                            {
                                R3.ResetIO_OUT((ushort)(i_Output - 4));
                            }
                            if (i_Output >= 12 && i_Output <= 15)
                            {
                                R4.ResetIO_OUT((ushort)(i_Output - 8));
                            }
                        }
                    }
                    else
                    {
                        VariableSys.bIO_Out_Card_4to7[i_Output] = true;
                        PB_IO_OUT[i_Output].Image = GeneralLabelerStation.Properties.Resources.red;
                        if (i_Output >= 0 && i_Output <= 3)
                        {
                            //todo B0轴---R1
                            R1.SetIO_OUT((ushort)(4 + i_Output));
                        }
                        if (VariableSys.machineVersion == 3)
                        {
                            if (i_Output >= 4 && i_Output <= 7)
                            {
                                R3.SetIO_OUT((ushort)(i_Output));
                            }
                            if (i_Output >= 8 && i_Output <= 11)
                            {
                                Z1.SetIO_OUT((ushort)(i_Output - 4));
                            }
                            if (i_Output >= 12 && i_Output <= 15)
                            {
                                Z3.SetIO_OUT((ushort)(i_Output - 8));
                            }
                        }
                        else
                        {
                            if (i_Output >= 4 && i_Output <= 7)
                            {
                                R2.SetIO_OUT((ushort)(i_Output));
                            }
                            if (i_Output >= 8 && i_Output <= 11)
                            {
                                R3.SetIO_OUT((ushort)(i_Output - 4));
                            }
                            if (i_Output >= 12 && i_Output <= 15)
                            {
                                R4.SetIO_OUT((ushort)(i_Output - 8));
                            }
                        }
                    }
                    break;
            }
        }

        private short StopAllAxis(bool stopTurn = true)
        {
            short rtn = 0;
            rtn = X.Stop(false);
            rtn += Y.Stop(false);
            if (stopTurn)
                rtn += Turn.Stop(false);
            return rtn;
        }

        private double GetRate(double dist)
        {
            double rate = 1;

            if (dist < 10)
            {
                rate = 0.3;
            }
            else if (dist < 20)
            {
                rate = 0.4;
            }
            else if (dist < 30)
            {
                rate = 0.5;
            }
            else if (dist < 40)
            {
                rate = 0.6;
            }
            else if (dist < 60)
            {
                rate = 0.7;
            }
            else if (dist < 80)
            {
                rate = 0.8;
            }
            return rate;
        }

        private void DistVel(PointF x_y_mm, Variable.VelMode velMode, ref Variable.VelMode XvelMode, ref Variable.VelMode YvelMode)
        {
            //分段加速
            XvelMode = new Variable.VelMode(velMode.LowVel, velMode.HighVel, velMode.Acc, velMode.Dec);
            YvelMode = new Variable.VelMode(velMode.LowVel, velMode.HighVel, velMode.Acc, velMode.Dec);

            double DistX = Math.Abs(x_y_mm.X - X.Pos);
            double DistY = Math.Abs(x_y_mm.Y - Y.Pos);
            double xRate = GetRate(DistX);
            double yRate = GetRate(DistY);
            XvelMode.LowVel *= xRate;
            XvelMode.HighVel *= xRate;
            XvelMode.Acc *= xRate;
            XvelMode.Dec *= xRate;

            YvelMode.LowVel *= yRate;
            YvelMode.HighVel *= yRate;
            YvelMode.Acc *= yRate;
            YvelMode.Dec *= yRate;
        }

        private short XYChangePos(PointF x_y_mm, Variable.VelMode velMode)
        {
            if (this.All_ZReachOrg())
            {
                short rtn = 0;
                Variable.VelMode xVel = new Variable.VelMode();
                Variable.VelMode yVel = new Variable.VelMode();

                DistVel(x_y_mm, velMode, ref xVel, ref yVel);
                rtn = X.ChangePos(x_y_mm.X, xVel);
                rtn += Y.ChangePos(x_y_mm.Y, yVel);
                return rtn;
            }
            else
            {
                return 1;
            }
        }

        public PointF ToReal(PointF xy)
        {
            PointF temp = xy;
            try
            {
                temp.X = (float)(xy.X * HardwareOrgHelper.Instance.HardWare.XRate);
                if (HardwareOrgHelper.Instance.HardWare.XPoly.Coefficients.Length > 0)
                {
                    temp.X -= (float)HardwareOrgHelper.Instance.HardWare.XPoly.Evaluate(temp.X);
                }
                temp.Y = (float)(temp.Y + temp.X * HardwareOrgHelper.Instance.HardWare.YRate);
                if (HardwareOrgHelper.Instance.HardWare.YPoly.Coefficients.Length > 0)
                {
                    temp.Y -= (float)HardwareOrgHelper.Instance.HardWare.YPoly.Evaluate(temp.Y);
                }
            }
            catch { }

            return temp;
        }

        public PointF ToMachine(PointF xy)
        {
            PointF temp = xy;
            try
            {
                if (HardwareOrgHelper.Instance.HardWare.XPoly.Coefficients.Length > 0)
                {
                    temp.X += (float)HardwareOrgHelper.Instance.HardWare.XPoly.Evaluate(xy.X);
                }

                temp.X = (float)(temp.X / HardwareOrgHelper.Instance.HardWare.XRate);
                if (HardwareOrgHelper.Instance.HardWare.YPoly.Coefficients.Length > 0)
                {
                    temp.Y += (float)HardwareOrgHelper.Instance.HardWare.YPoly.Evaluate(xy.Y);
                }

                temp.Y = (float)(temp.Y - xy.X * HardwareOrgHelper.Instance.HardWare.YRate);
            }
            catch { }

            return temp;
        }

        public PointF XYPos
        {
            get
            {
                return new PointF((float)this.X.Pos, (float)this.Y.Pos);
            }
        }

        public PointContour XYImage
        {
            get
            {
                return new PointContour(this.X.Pos, this.Y.Pos);
            }
        }

        public short XYGoPos(PointF x_y_mm, Variable.VelMode velMode)//XY插补运动下指令
        {
            if (float.IsNaN(x_y_mm.X) || float.IsNaN(x_y_mm.Y))
            {
                return -1;
            }

            if (this.All_ZReachOrg())
            {
                short rtn = 0;
                Variable.VelMode xVel = new Variable.VelMode();
                Variable.VelMode yVel = new Variable.VelMode();
                this.X.GetAxisSts();
                this.Y.GetAxisSts();
                this.X.SetSpeedCurve(1);
                this.Y.SetSpeedCurve(1);

                DistVel(x_y_mm, velMode, ref xVel, ref yVel);
                rtn = X.GoPos(x_y_mm.X, xVel);
                rtn += Y.GoPos(x_y_mm.Y, yVel);
                return rtn;
            }
            else
            {
                this.All_ZGoSafe(VariableSys.VelMode_Debug_Manual);
                return 1;
            }
        }

        public void TurnGo(double pos, Variable.VelMode velMode)
        {
            if (VariableSys.machineVersion == 3)
            {
                Turn.GoPos(pos, velMode);
            }
        }

        public bool TurnReach(double pos)
        {
            if (VariableSys.machineVersion == 3)
            {
                return Turn.AxisReach(pos);
            }
            return true;
        }

        public short XYGoPosNoSafe(PointF x_y_mm, Variable.VelMode velMode)//XY插补运动下指令
        {
            short rtn = 0;
            Variable.VelMode xVel = new Variable.VelMode();
            Variable.VelMode yVel = new Variable.VelMode();
            DistVel(x_y_mm, velMode, ref xVel, ref yVel);
            rtn = X.GoPos(x_y_mm.X, xVel);
            rtn += Y.GoPos(x_y_mm.Y, yVel);
            return rtn;
        }

        private short XYGoPosTillStopNoSafeHeight(int TimeOut_Millisecond, PointF x_y_mm, Variable.VelMode velMode)//XY插补运动下指令直到停止
        {
            short rtn = 0;
            Stopwatch a = new Stopwatch();
            X.GoPos(x_y_mm.X, velMode);
            Y.GoPos(x_y_mm.Y, velMode);

            a.Start();
            while (!X.AxisReach(x_y_mm.X) || !Y.AxisReach(x_y_mm.Y))
            {
                Thread.Sleep(1);
                if (a.ElapsedMilliseconds > TimeOut_Millisecond)
                {
                    X.StopAxis();
                    Y.StopAxis();
                    rtn = 1;
                    break;
                }
                Thread.Sleep(100);
            }
            return rtn;
        }

        public short XYGoPosTillStop(int TimeOut_Millisecond, PointF x_y_mm, Variable.VelMode velMode)//XY插补运动下指令直到停止
        {
            short rtn = 0;
            Stopwatch a = new Stopwatch();
            if (this.All_ZReachOrg())
            {
                X.GoPos(x_y_mm.X, velMode);
                Y.GoPos(x_y_mm.Y, velMode);

                a.Start();
                while (!X.AxisReach(x_y_mm.X) || !Y.AxisReach(x_y_mm.Y))
                {
                    Thread.Sleep(1);
                    if (a.ElapsedMilliseconds > TimeOut_Millisecond)
                    {
                        X.StopAxis();
                        Y.StopAxis();
                        rtn = 1;
                        break;
                    }
                    Thread.Sleep(100);
                }
                return rtn;
            }
            else
            {
                return 1;
            }
        }

        private short LED_ON()
        {
            return Axis4.SetIO_OUT(6);
        }
        private short LED_OFF()
        {
            return Axis4.ResetIO_OUT(6);
        }
        public short Three_Green_ON()
        {
            return Y.SetIO_OUT(7);
        }
        public short Three_Green_OFF()
        {
            return Y.ResetIO_OUT(7);
        }
        public short Three_Noise_ON()
        {
            AlarmOnce += 1;
            if (AlarmOnce < 12)
            {
                return Y.SetIO_OUT(4);
            }
            else if (AlarmOnce < 24)
            {
                return Y.ResetIO_OUT(4);
            }
            else if (AlarmOnce > 36)
            {
                AlarmOnce = 0;
            }

            return 0;
        }
        public short Three_Noise_OFF()
        {
            AlarmOnce = 0;
            return Y.ResetIO_OUT(4);
        }
        public short Three_Red_ON()
        {
            return Y.SetIO_OUT(4);
        }
        public short Three_Red_OFF()
        {
            return Y.ResetIO_OUT(4);
        }
        public short Three_Yellow_ON()
        {
            return Y.SetIO_OUT(6);
        }
        public short Three_Yellow_OFF()
        {
            return Y.ResetIO_OUT(6);
        }

        private short InformBackTake()
        {
            if (VariableSys.machineVersion == 3)
                return R3.SetIO_OUT(6);
            else
                return R2.SetIO_OUT(6);
        }
        private short ResetInformBackTake()
        {
            if (VariableSys.machineVersion == 3)
                return R3.ResetIO_OUT(6);
            else
                return R2.ResetIO_OUT(6);
        }
        /// <summary>
        /// 前轨道对接输出
        /// </summary>
        /// <returns></returns>
        private short InformBeforeGive()
        {
            if (VariableSys.machineVersion == 3)
                return R3.SetIO_OUT(7);
            else
                return R2.SetIO_OUT(7);
        }
        private short ResetInformBeforeGive()
        {
            if (VariableSys.machineVersion == 3)
                return R3.ResetIO_OUT(7);
            else
                return R2.ResetIO_OUT(7);
        }

        //todo 阻挡下降
        private short StopProduct_ON()
        {
            short rtn = R1.SetIO_OUT(5);
            rtn = R1.ResetIO_OUT(4);
            return rtn;
        }
        //todo 阻挡上升
        private short StopProduct_OFF()
        {
            short rtn = R1.ResetIO_OUT(5);
            rtn = R1.SetIO_OUT(4);
            return rtn;
        }
        //todo 顶升下降
        private short CarryProduct_ON()
        {
            short rtn = R1.SetIO_OUT(6);
            rtn = R1.ResetIO_OUT(7);
            return rtn;
        }

        //todo 顶升上升
        private short CarryProduct_OFF()
        {
            short rtn = R1.ResetIO_OUT(6);
            rtn = R1.SetIO_OUT(7);
            return rtn;
        }
        private short HeatON(short Index)
        {
            short RTN = 0;
            switch (Index)
            {
                case 0:
                    RTN = X.SetIO_OUT(7);
                    break;
                case 1:
                    RTN = X.SetIO_OUT(4);
                    break;
                case 2:
                    RTN = Turn.SetIO_OUT(6);
                    break;
                case 3:
                    RTN = Turn.SetIO_OUT(7);
                    break;
                case 4:
                    RTN = Axis4.SetIO_OUT(6);
                    break;
                case 5:
                    if (VariableSys.machineVersion == 3)
                        RTN = Z1.SetIO_OUT(6);
                    else
                        RTN = R3.ResetIO_OUT(6);
                    break;
            }
            return RTN;
        }
        private short HeatOFF(short Index)
        {
            short RTN = 0;
            switch (Index)
            {
                case 0:
                    RTN = X.ResetIO_OUT(7);
                    break;
                case 1:
                    RTN = X.ResetIO_OUT(4);
                    break;
                case 2:
                    break;
                case 3:
                    RTN = Turn.ResetIO_OUT(7);
                    break;
                case 4:
                    RTN = Axis4.ResetIO_OUT(6);
                    break;
                case 5:
                    if (VariableSys.machineVersion == 3)
                        RTN = Z1.SetIO_OUT(6);
                    else
                        RTN = R3.ResetIO_OUT(6);
                    break;
            }
            return RTN;
        }

        private short SetFlyDir(bool isTrue_R2L)//设置飞拍方向
        {
            if (isTrue_R2L)
            {
                return X.SetComapreData(1, 1, 0, 0, 0, 5);//设置正飞拍
            }
            else
            {
                return X.SetComapreData(1, 0, 0, 0, 0, 5);//设置反飞拍
            }
        }

        /// <summary> 
        /// 复制文件夹（及文件夹下所有子文件夹和文件） 
        /// </summary> 
        /// <param name="sourcePath">待复制的文件夹路径</param> 
        /// <param name="destinationPath">目标路径</param> 
        public static void CopyDirectory(String sourcePath, String destinationPath)
        {
            DirectoryInfo info = new DirectoryInfo(sourcePath);
            Directory.CreateDirectory(destinationPath);
            foreach (FileSystemInfo fsi in info.GetFileSystemInfos())
            {
                String destName = Path.Combine(destinationPath, fsi.Name);

                if (fsi is System.IO.FileInfo)          //如果是文件，复制文件 
                    File.Copy(fsi.FullName, destName);
                else                                    //如果是文件夹，新建文件夹，递归 
                {
                    Directory.CreateDirectory(destName);
                    CopyDirectory(fsi.FullName, destName);
                }
            }
        }
        #endregion

        #region 页面切换
        private void pMode_Login_Click(object sender, EventArgs e)//->b_Login
        {
            if (RunMode == 1)//如果在运行模式
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    PutInLog("operate fail，halt the sysytem first！");
                }
                else
                {
                    PutInLog("操作失败，请先暂停系统运行！");
                }

                return;
            }
            if (!b_Login)
            {
                Form_Password fm_Password = new Form_Password();//密码提示
                Variable.PassWordOK = 1;//密码确认 1-密码错误 2-管理员密码正确 3-工程师密码正确 4-操作员密码正确
                //当前产品统计
                fm_Password.StartPosition = FormStartPosition.CenterScreen;
                //todo 跳过密码在此行断点
                fm_Password.TopMost = true;
                fm_Password.ShowDialog();//模式对话框打开
                if (Variable.PassWordOK == 1)//密码输入错误
                {
                    if (VariableSys.LanguageFlag == 1)
                    {
                        PutInLog("Password error");
                    }
                    else
                    {
                        PutInLog("密码输入错误");
                    }

                    //密码输入错误
                    pMode_Login.Image = Properties.Resources.用户1;

                    if (VariableSys.LanguageFlag == 1)
                    {
                        tSSL_UserStatus.Text = "Log off";
                    }
                    else
                    {
                        tSSL_UserStatus.Text = "用户登陆";
                    }

                    //其他权限取消
                    tabControl_Main.Visible = false;
                    pMode_Run.Visible = false;
                    pMode_Calibration.Visible = false;
                    pMode_SysSet.Visible = false;
                    pMode_PASTE.Visible = false;
                    pMode_Manual.Visible = false;
                    pMode_SysSet.Visible = false;

                    gB_Manage.Visible = false;

                    lSafeDoorEN.Visible = false;
                    bExit.Visible = false;

                    lb_0.Visible = false;
                    lb_1.Visible = false;
                    lb_2.Visible = false;
                    lb_3.Visible = false;
                    lb_5.Visible = false;
                }
                else//密码输入正确
                {
                    b_Login = true;
                    pMode_Login.Image = Properties.Resources.用户2;

                    tabControl_Main.Enabled = true;
                    if (Variable.PassWordOK == 2)//管理
                    {
                        if (VariableSys.LanguageFlag == 1)
                        {
                            PutInLog("Manager log in");
                            tSSL_UserStatus.Text = "Manager";
                        }
                        else
                        {
                            PutInLog("进入管理模式");
                            tSSL_UserStatus.Text = "管理";
                        }

                        //其他权限
                        tabControl_Main.Visible = true;
                        pMode_Run.Visible = true;
                        pMode_Calibration.Visible = true;
                        pMode_SysSet.Visible = true;
                        pMode_PASTE.Visible = true;
                        pMode_Manual.Visible = true;
                        pMode_SysSet.Visible = true;
                        bExit.Visible = true;

                        tabControl_Main.Enabled = true;
                        pMode_Calibration.Enabled = true;
                        pMode_SysSet.Enabled = true;
                        pMode_PASTE.Enabled = true;
                        pMode_Manual.Enabled = true;
                        pMode_SysSet.Enabled = true;
                        bExit.Enabled = true;

                        gB_Manage.Visible = true;

                        lSafeDoorEN.Visible = true;

                        lb_0.Visible = true;
                        lb_1.Visible = true;
                        lb_2.Visible = true;
                        lb_3.Visible = true;
                        lb_5.Visible = true;
                    }
                    else if (Variable.PassWordOK == 3)//调试
                    {
                        if (VariableSys.LanguageFlag == 1)
                        {
                            PutInLog("Engineer log in");
                            tSSL_UserStatus.Text = "Engineer";
                        }
                        else
                        {
                            PutInLog("进入调试模式");
                            tSSL_UserStatus.Text = "调试";
                        }


                        //其他权限
                        tabControl_Main.Visible = true;
                        pMode_Run.Visible = true;
                        pMode_Calibration.Visible = true;
                        pMode_SysSet.Visible = true;
                        pMode_PASTE.Visible = true;
                        pMode_Manual.Visible = true;
                        bExit.Visible = true;

                        tabControl_Main.Enabled = true;
                        pMode_Calibration.Enabled = true;
                        pMode_SysSet.Enabled = true;
                        pMode_PASTE.Enabled = true;
                        pMode_Manual.Enabled = true;
                        pMode_SysSet.Enabled = true;
                        bExit.Enabled = true;

                        gB_Manage.Visible = false;

                        lSafeDoorEN.Visible = true;

                        lb_0.Visible = true;
                        lb_1.Visible = true;
                        lb_2.Visible = true;
                        lb_3.Visible = true;
                        lb_5.Visible = true;
                    }
                    else if (Variable.PassWordOK == 4)//运行
                    {
                        if (VariableSys.LanguageFlag == 1)
                        {
                            PutInLog("Operator log in");
                            tSSL_UserStatus.Text = "Operator";
                        }
                        else
                        {
                            PutInLog("进入运行模式");
                            tSSL_UserStatus.Text = "运行";
                        }


                        //其他权限
                        tabControl_Main.Visible = true;
                        pMode_Run.Visible = true;
                        pMode_Calibration.Visible = false;
                        pMode_SysSet.Visible = false;
                        pMode_PASTE.Visible = false;
                        pMode_Manual.Visible = false;
                        pMode_SysSet.Visible = false;
                        bExit.Visible = false;

                        tabControl_Main.Enabled = true;
                        pMode_Calibration.Enabled = false;
                        pMode_SysSet.Enabled = false;
                        pMode_PASTE.Enabled = false;
                        pMode_Manual.Enabled = false;
                        pMode_SysSet.Enabled = false;
                        bExit.Enabled = false;

                        gB_Manage.Visible = false;

                        lSafeDoorEN.Visible = true;

                        lb_0.Visible = true;
                        lb_1.Visible = false;
                        lb_2.Visible = false;
                        lb_3.Visible = false;
                        lb_5.Visible = false;
                    }
                }
            }
            else
            {
                b_Login = false;
                if (VariableSys.LanguageFlag == 1)
                {
                    PutInLog("User log off");
                    tSSL_UserStatus.Text = "LogOff";
                }
                else
                {
                    PutInLog("用户注销");
                    tSSL_UserStatus.Text = "未登录";
                }


                //注销用户
                tabControl_Main.SelectedTab = tabPage1;
                pMode_Login.Image = Properties.Resources.用户1;
                pMode_SysSet.Image = Properties.Resources.系统设置1;


                //其他权限
                tabControl_Main.Visible = false;
                pMode_Run.Visible = false;
                pMode_Calibration.Visible = false;
                pMode_SysSet.Visible = false;
                pMode_PASTE.Visible = false;
                pMode_Manual.Visible = false;
                pMode_SysSet.Visible = false;
                bExit.Visible = false;

                tabControl_Main.Enabled = false;
                pMode_Calibration.Enabled = false;
                pMode_SysSet.Enabled = false;
                pMode_PASTE.Enabled = false;
                pMode_Manual.Enabled = false;
                pMode_SysSet.Enabled = false;
                bExit.Enabled = false;

                gB_Manage.Visible = false;

                lSafeDoorEN.Visible = false;
                lb_0.Visible = false;
                lb_1.Visible = false;
                lb_2.Visible = false;
                lb_3.Visible = false;
                lb_5.Visible = false;
            }

            this.NagvSet();
            this.bInMainPage = false;
        }

        /// <summary>
        /// 是否在主界面
        /// </summary>
        private bool bInMainPage = false;

        private void pMode_Run_Click(object sender, EventArgs e)//运行
        {
            if (RunMode != 1)//不在运行模式
            {
                pMode_Run.Image = Properties.Resources.系统设置2;
                pMode_Calibration.Image = Properties.Resources.视觉辅助矫正1;
                pMode_PASTE.Image = Properties.Resources.程式编程1;
                pMode_Manual.Image = Properties.Resources.aotman;
                pMode_SysSet.Image = Properties.Resources.sysset;
                tabControl_Main.SelectedTab = tabPage1;
                cB_KeyBoard.Checked = false;
                //关闭实时
                if (Variable.PassWordOK > 1)
                {
                    bSet_CamLive = false;
                    if (VariableSys.LanguageFlag == 1)
                    {
                        bCamLive.Text = "live";
                    }
                    else
                    {
                        bCamLive.Text = "实时";
                    }

                    try//关闭相机
                    {
                        bgWorker_Cam.CancelAsync();
                    }
                    catch
                    {
                        if (VariableSys.LanguageFlag == 1)
                        {
                            MessageBox.Show("Camera Acq error！", "Info");
                        }
                        else
                        {
                            MessageBox.Show("相机取像错误！", "提示");
                        }
                    }
                    bSnap.Enabled = true;
                }
                //
                ShowChart(true);
            }

            bInMainPage = true;
        }

        private void pMode_Calibration_Click(object sender, EventArgs e)//基础校验
        {
            if (RunMode != 1)//不在运行模式
            {
                pMode_Run.Image = Properties.Resources.系统设置1;
                pMode_Calibration.Image = Properties.Resources.视觉辅助矫正2;
                pMode_PASTE.Image = Properties.Resources.程式编程1;
                pMode_Manual.Image = Properties.Resources.aotman;
                pMode_SysSet.Image = Properties.Resources.sysset;

                tabControl_Set.SelectedTab = SetCalibration;
                tabControl_Main.SelectedTab = tabPage2;
            }

            this.bInMainPage = false;
        }

        private void pMode_Program_Click(object sender, EventArgs e)//程式管理
        {
            if (RunMode != 1)//不在运行模式
            {
                pMode_Run.Image = Properties.Resources.系统设置1;
                pMode_Calibration.Image = Properties.Resources.视觉辅助矫正1;
                pMode_PASTE.Image = Properties.Resources.程式编程2;
                pMode_Manual.Image = Properties.Resources.aotman;
                pMode_SysSet.Image = Properties.Resources.sysset;

                tabControl_Set.SelectedTab = SetPasteInfo;
                tabControl_Main.SelectedTab = tabPage2;
            }

            this.bInMainPage = false;
        }

        private void pMode_Feeder_Click(object sender, EventArgs e)//出标上料
        {
            //if (RunMode != 1)//不在运行模式
            //{
            pMode_Run.Image = Properties.Resources.系统设置1;
            pMode_Calibration.Image = Properties.Resources.视觉辅助矫正1;
            pMode_PASTE.Image = Properties.Resources.程式编程1;
            pMode_Manual.Image = Properties.Resources.aotman2;
            pMode_SysSet.Image = Properties.Resources.sysset;

            tabControl_Set.SelectedTab = SetAllProgramLoad;
            tabControl_Main.SelectedTab = tabPage2;
            this.bInMainPage = false;

            //}
        }

        private void pMode_Set_Click(object sender, EventArgs e)
        {
            if (RunMode != 1)//不在运行模式
            {
                pMode_Run.Image = Properties.Resources.系统设置1;
                pMode_Calibration.Image = Properties.Resources.视觉辅助矫正1;
                pMode_PASTE.Image = Properties.Resources.程式编程1;
                pMode_Manual.Image = Properties.Resources.aotman;
                pMode_SysSet.Image = Properties.Resources.sysset2;

                tabControl_Set.SelectedTab = SetSystemPrams;
                tabControl_Main.SelectedTab = tabPage2;
            }

            this.bInMainPage = false;
        }
        #endregion

        #region 相机操作
        #region ////
        //private void bLightUp_Click(object sender, EventArgs e)
        //        {
        //            if (bSet_Light_UP == false)
        //            {
        //                bSet_Light_UP = true;
        //                bLightUp.Text = "关上光源";
        //                //LightON_Up();
        //            }
        //            else
        //            {
        //                //LightOFF_Up();
        //                bSet_Light_UP = false;
        //                bLightUp.Text = "开上光源";
        //            }
        //        }

        //        private void bLightDown_Click(object sender, EventArgs e)
        //        {
        //            if (bSet_Light_DOWN == false)
        //            {
        //                bSet_Light_DOWN = true;
        //                bLightDown.Text = "关下光源";
        //                //LightON_Down();
        //            }
        //            else
        //            {
        //                LightOFF_Down();
        //                bSet_Light_DOWN = false;
        //                bLightDown.Text = "开下光源";
        //            }
        //        }
        #endregion

        private void bCamLive_Click(object sender, EventArgs e)//-todo
        {
            if (bSet_CamLive == false)
            {
                bSet_CamLive = true;
                bSnap.Enabled = false;
                //打开相机
                try
                {
                    foreach (CAM camera in Enum.GetValues(typeof(CAM)))
                    {
                        if (CameraDefine.Instance.Config.ContainsKey(camera))
                            CameraDefine.Instance[camera]._Session.Acquisition.Unconfigure();
                    }

                    CameraDefine.Instance[(CAM)(CamIndexSelected - 1)]._Session.ConfigureGrab();

                    bCamLive.Text = "关闭实时";
                    bgWorker_Cam.RunWorkerAsync();
                }
                catch
                {
                    MessageBox.Show("相机取像错误！", "提示");
                }
            }
            else
            {
                bSet_CamLive = false;
                bCamLive.Text = "实时";

                try//关闭相机
                {
                    bgWorker_Cam.CancelAsync();
                }
                catch
                {
                    MessageBox.Show("相机取像错误！", "提示");
                }
                bSnap.Enabled = true;
            }
        }

        private void bSnap_Click(object sender, EventArgs e)
        {
            CameraDefine.Instance[(CAM)(CamIndexSelected - 1)]._Session.Snap(imageSet.Image);
        }

        private void bUpdateShutter_Click(object sender, EventArgs e)
        {
            SetShutter((int)(ntCamShutter.Value), (CAM)(CamIndexSelected - 1));
        }

        private void bShowCross_Click(object sender, EventArgs e)
        {
            if (bSet_Cross == false)
            {
                bSet_Cross = true;
                if (VariableSys.LanguageFlag == 1)
                {
                    bShowCross.Text = "DisCross";
                }
                else
                {
                    bShowCross.Text = "关闭十字";
                }

                imageSet.Image.Overlays.Default.AddLine(new LineContour(new PointContour(imageSet.Image.Width / 2, 0), new PointContour(imageSet.Image.Width / 2, imageSet.Image.Height)), Rgb32Value.RedColor);
                imageSet.Image.Overlays.Default.AddLine(new LineContour(new PointContour(0, imageSet.Image.Height / 2), new PointContour(imageSet.Image.Width, imageSet.Image.Height / 2)), Rgb32Value.RedColor);
            }
            else
            {
                //清除十字
                imageSet.Image.Overlays.Default.Clear();
                bSet_Cross = false;
                if (VariableSys.LanguageFlag == 1)
                {
                    bShowCross.Text = "Cross";
                }
                else
                {
                    bShowCross.Text = "显示十字";
                }

            }
        }

        private void bLoadPic_Click(object sender, EventArgs e)
        {
            openFileDialog.Title = "打开图片";
            openFileDialog.FileName = "1";
            openFileDialog.Filter = "图片(*.bmp)|*.bmp|(*.png)|*.png";
            openFileDialog.RestoreDirectory = true;
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                imageSet.Image.ReadFile(openFileDialog.FileName, true);
            }
        }

        private void bSavePic_Click(object sender, EventArgs e)
        {
            saveFileDialog.Title = "图片另存为";
            saveFileDialog.FileName = "1";
            saveFileDialog.Filter = "图片(*.bmp)|*.bmp|图片(*.png)|*.png";
            saveFileDialog.RestoreDirectory = true;
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                if (saveFileDialog.FilterIndex == 0)
                {
                    imageSet.Image.WriteBmpFile(saveFileDialog.FileName);
                }
                else
                {
                    imageSet.Image.Overlays.Default.Merge();
                    imageSet.Image.WritePngFile(saveFileDialog.FileName);
                }
            }
        }

        private void bAngle_Click(object sender, EventArgs e)
        {
            try
            {
                Algorithms.Rotate(imageSet.Image, imageSet.Image, double.Parse(tAngle.Text));
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("输入数值有误！");
                }
            }
        }

        private void bZoomFit_Click(object sender, EventArgs e)
        {
            imageSet.ZoomToFit = true;
        }

        private void cameraComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            bSet_CamLive = false;
            bCamLive.Text = "实时";

            try//关闭相机
            {
                bgWorker_Cam.CancelAsync();
            }
            catch
            {
                MessageBox.Show("相机取像错误！", "提示");
            }
            bSnap.Enabled = true;

            CameraDefine.Instance[(CAM)(CamIndexSelected - 1)]._Session.Acquisition.Unconfigure();
            CamIndexSelected = (short)(cameraComboBox.SelectedIndex + 1);
            ntCamShutter.Value = (decimal)(CameraDefine.Instance[(CAM)(CamIndexSelected - 1)].Shutter);
        }

        private void bgWorker_Cam_DoWork(object sender, DoWorkEventArgs e)
        {
            BackgroundWorker worker = (BackgroundWorker)sender;
            // Keep acquiring until we error or cancel
            while (!worker.CancellationPending)
            {
                try
                {
                    #region 自动模式
                    //if (RunMode == 1)//自动模式
                    //{
                    //    if (JOB.bCompare && this.FlyMode == 0 && bFlyStart)
                    //    {
                    //        CameraDefine.Instance[CAM.Bottom1]._Session.Grab(DownTemp, true, out bufNum);
                    //        VisionImage a = new VisionImage();
                    //        DownFlyCaptrueCount++;
                    //        if (DownFlyCaptrueCount > 0 && DownFlyCaptrueCount <= RUN_FlyMap.Count)
                    //        {
                    //            Tuple<uint, int> map = this.RUN_FlyMap[DownFlyCaptrueCount - 1];
                    //            if (this.Z_RunParamMap[map.Item1].CaptureImage[map.Item2] == null)
                    //                this.Z_RunParamMap[map.Item1].CaptureImage[map.Item2] = new VisionImage();
                    //            Algorithms.Copy(DownTemp, this.Z_RunParamMap[map.Item1].CaptureImage[map.Item2]);
                    //            this.DownCaler.Cal(map.Item1, map.Item2);
                    //        }
                    //    }
                    //    else if (JOB.bUpFly && this.FlyMode == 1 && bFlyStart)
                    //    {
                    //        CameraDefine.Instance[CAM.Top]._Session.Grab(UpTemp, true, out bufNum);
                    //        VisionImage a = new VisionImage();
                    //        Algorithms.Copy(UpTemp, a);
                    //        UpFlyCapture.Add(a);

                    //        if (UpFlyCapture.Count > 0 && UpFlyCapture.Count <= JOB.PasteCount)
                    //        {
                    //            this.UpCaler.Cal(UpFlyCapture.Count - 1, UpFlyCapture.Last());
                    //        }
                    //    }
                    //    else
                    //    {
                    //        Thread.Sleep(1);
                    //    }
                    //}
                    //else//手动模式
                    #endregion
                    if (bSet_CamLive)
                    {
                        CameraDefine.Instance[(CAM)(CamIndexSelected - 1)]._Session.Grab(imageSet.Image, true, out bufNum);
                        if (bSet_Cross == true)
                        {
                            imageSet.Image.Overlays.Default.AddLine(new LineContour(new PointContour(imageSet.Image.Width / 2, 0), new PointContour(imageSet.Image.Width / 2, imageSet.Image.Height)), Rgb32Value.RedColor);
                            imageSet.Image.Overlays.Default.AddLine(new LineContour(new PointContour(0, imageSet.Image.Height / 2), new PointContour(imageSet.Image.Width, imageSet.Image.Height / 2)), Rgb32Value.RedColor);
                        }
                    }
                }
                catch (ImaqdxException exception)
                {
                    if (exception.Error != ImaqdxError.Timeout)
                    {
                        if (!worker.CancellationPending)
                        {
                            e.Result = exception;
                        }
                        return;
                    }
                }
            }
        }

        private void bgWorker_Cam_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            // Our acquired buffer number is in the user state to update
            // the display
            uint bufferNumber = (uint)e.UserState;
        }

        private void bgWorker_Cam_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            if (e.Result is ImaqdxException)
            {
                MessageBox.Show(((ImaqdxException)e.Result).ToString(), "CameraAcq Error");
            }
            //try
            //{
            //    // Close the camera in case it hasn't already been closed
            //    if (_session != null)
            //    {
            //        _session.Close();
            //        _session = null;
            //    }
            //}
            //catch (ImaqdxException error)
            //{
            //    MessageBox.Show(error.ToString(), "NI-IMAQdx Error");
            //}

            // Update UI controls
            //bufNumTextBox.Text = "";
        }

        private void cB_CamDownTrigger_CheckedChanged(object sender, EventArgs e)
        {
            if (Variable.PassWordOK > 1)
            {
                bSet_CamLive = false;
                if (VariableSys.LanguageFlag == 1)
                {
                    bCamLive.Text = "live";
                }
                else
                {
                    bCamLive.Text = "实时";
                }

                try//关闭相机
                {
                    bgWorker_Cam.CancelAsync();
                }
                catch
                {
                    if (VariableSys.LanguageFlag == 1)
                    {
                        MessageBox.Show("Camera Acq error!", "Info");
                    }
                    else
                    {
                        MessageBox.Show("相机取像错误！", "提示");
                    }
                }
                bSnap.Enabled = true;
                Thread.Sleep(200);
                bFlyTest = true;
                FlyMode = 0;
                CameraDefine.Instance[CAM.Bottom1]._Session.Attributes["CameraAttributes::AcquisitionControl::TriggerMode"].SetValue(1);
                CameraDefine.Instance[CAM.Bottom1]._Session.Attributes["CameraAttributes::AcquisitionControl::TriggerSource"].SetValue(1);
            }
        }

        private void bReconnectCam_Click(object sender, EventArgs e)
        {
            CameraDefine.Instance.DisConnect();

            if (CameraDefine.Instance.Connect(this.cbxSelectCam.Items.Count == 4))
                MessageBox.Show("连接成功", "提示", MessageBoxButtons.OK, MessageBoxIcon.None);
            else
                MessageBox.Show("连接失败", "提示", MessageBoxButtons.OK, MessageBoxIcon.Warning);
        }
        #endregion

        #region 基础校验
        private void bLearnPattern_Cali_Click(object sender, EventArgs e)
        {
            Extract_LearnPttern(imageSet.Image, image_Calibration.Image);
            Algorithms.Copy(image_Calibration.Image, VariableSys.imageCali_Template);
        }

        private void cB_NozzleIndex2_SelectedIndexChanged(object sender, EventArgs e)
        {
            tMarkDX.Text = VariableSys.pDownMarkCoord[cB_NozzleIndex2.SelectedIndex].X.ToString();
            tMarkDY.Text = VariableSys.pDownMarkCoord[cB_NozzleIndex2.SelectedIndex].Y.ToString();
            tPasteX.Text = VariableSys.pPasteCoord[cB_NozzleIndex2.SelectedIndex].X.ToString();
            tPasteY.Text = VariableSys.pPasteCoord[cB_NozzleIndex2.SelectedIndex].Y.ToString();
            tMarkUX.Text = VariableSys.pUpMarkCoord[cB_NozzleIndex2.SelectedIndex].X.ToString();
            tMarkUY.Text = VariableSys.pUpMarkCoord[cB_NozzleIndex2.SelectedIndex].Y.ToString();
            tDownCenterX.Text = VariableSys.pNozzle_2_Cam[cB_NozzleIndex2.SelectedIndex].X.ToString();
            tDownCenterY.Text = VariableSys.pNozzle_2_Cam[cB_NozzleIndex2.SelectedIndex].Y.ToString();
        }

        private void b2_Set0_Click(object sender, EventArgs e)
        {
            PointF xy = this.XYPos;
            tMarkDX.Text = xy.X.ToString();
            tMarkDY.Text = xy.Y.ToString();
            int selectNz = cB_NozzleIndex2.SelectedIndex;
            VariableSys.pDownMarkCoord[selectNz] = xy;
            Ini_Sys.IniWriteNumber("VisionCalibration", string.Format("Nozzle{0}_DownCam_MarkX", selectNz + 1), VariableSys.pDownMarkCoord[selectNz].X);
            Ini_Sys.IniWriteNumber("VisionCalibration", string.Format("Nozzle{0}_DownCam_MarkY", selectNz + 1), VariableSys.pDownMarkCoord[selectNz].Y);
        }

        private void b2_Set1_Click(object sender, EventArgs e)
        {
            PointF xy = this.XYPos;
            tPasteX.Text = xy.X.ToString();
            tPasteY.Text = xy.Y.ToString();
            int selectNz = cB_NozzleIndex2.SelectedIndex;
            VariableSys.pPasteCoord[selectNz] = xy;

            Ini_Sys.IniWriteNumber("VisionCalibration", string.Format("Nozzle{0}_Paste_X", selectNz + 1), VariableSys.pPasteCoord[selectNz].X);
            Ini_Sys.IniWriteNumber("VisionCalibration", string.Format("Nozzle{0}_Paste_Y", selectNz + 1), VariableSys.pPasteCoord[selectNz].Y);
        }

        private void b2_Set2_Click(object sender, EventArgs e)
        {
            PointF xy = this.XYPos;
            tMarkUX.Text = xy.X.ToString();
            tMarkUY.Text = xy.Y.ToString();
            int selectNz = cB_NozzleIndex2.SelectedIndex;
            VariableSys.pUpMarkCoord[selectNz] = xy;
            Ini_Sys.IniWriteNumber("VisionCalibration", string.Format("Nozzle{0}_UpCam_MarkX", selectNz + 1), VariableSys.pUpMarkCoord[selectNz].X);
            Ini_Sys.IniWriteNumber("VisionCalibration", string.Format("Nozzle{0}_UpCam_MarkY", selectNz + 1), VariableSys.pUpMarkCoord[selectNz].Y);
        }

        private void cB_NozzleIndex3_SelectedIndexChanged(object sender, EventArgs e)
        {
            tRotateCenterX_Temp.Text = VariableSys.pDownRotateCenter[cB_NozzleIndex3.SelectedIndex].X.ToString();
            tRotateCenterY_Temp.Text = VariableSys.pDownRotateCenter[cB_NozzleIndex3.SelectedIndex].Y.ToString();
            tRotateCamX_Temp.Text = VariableSys.pDownRotateCam[cB_NozzleIndex3.SelectedIndex].X.ToString();
            tRotateCamY_Temp.Text = VariableSys.pDownRotateCam[cB_NozzleIndex3.SelectedIndex].Y.ToString();
            tRotateCenterX.Text = VariableSys.pDownRotateCenter[cB_NozzleIndex3.SelectedIndex].X.ToString();
            tRotateCenterY.Text = VariableSys.pDownRotateCenter[cB_NozzleIndex3.SelectedIndex].Y.ToString();
            tRotateCamX.Text = VariableSys.pDownRotateCam[cB_NozzleIndex3.SelectedIndex].X.ToString();
            tRotateCamY.Text = VariableSys.pDownRotateCam[cB_NozzleIndex3.SelectedIndex].Y.ToString();
        }

        private void bMoveRotate_Click(object sender, EventArgs e)
        {
            if (this.All_ZGoSafeTillStop(2000, VariableSys.VelMode_Debug))
            {
                PointContour a = new PointContour();
                a.X = double.Parse(tRotateCenterX_Temp.Text);
                a.Y = double.Parse(tRotateCenterY_Temp.Text);

                PointF b = new PointF();
                b.X = float.Parse(tRotateCamX_Temp.Text);
                b.Y = float.Parse(tRotateCamY_Temp.Text);

                var camera = Nozzle2Cam(cB_NozzleIndex3.SelectedIndex);
                PointF worldP = Point2CCDCenter(b, a, camera.Item1, camera.Item2);

                XYGoPos(worldP, VariableSys.VelMode_Current_Manual);
            }
        }

        private void bLearn_Rotation_Click(object sender, EventArgs e)
        {
            try
            {
                if (imageSet.Roi.Count > 0 && imageSet.Roi[0].Shape.GetType() == typeof(RectangleContour))
                {
                    int EdgeStrength = int.Parse(tEdgeStrength.Text);
                    curveOptions.Threshold = EdgeStrength;
                    VariableSys.imageCali_Gemetric = new VisionImage();
                    Extract_LearnGemetric(imageSet.Image, VariableSys.imageCali_Gemetric);
                    Algorithms.Copy(VariableSys.imageCali_Gemetric, imageRotate.Image);
                }
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("输入强度数值出错", "提示");
                }
            }
        }

        /// <summary>
        /// 自动计算 吸嘴旋转中心
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void bAuto_Click(object sender, EventArgs e)
        {
            Thread Thread_Rotate_Cali = new Thread(new ParameterizedThreadStart(thread_Rotate_Cali));
            Thread_Rotate_Cali.Start(cB_NozzleIndex3.SelectedIndex);
        }

        private void bUpdate_Click(object sender, EventArgs e)
        {
            tRotateCenterX.Text = tRotateCenterX_Temp.Text;
            tRotateCenterY.Text = tRotateCenterY_Temp.Text;
            tRotateCamX.Text = tRotateCamX_Temp.Text;
            tRotateCamY.Text = tRotateCamY_Temp.Text;

            int selectNz = cB_NozzleIndex3.SelectedIndex;
            VariableSys.pDownRotateCenter[selectNz].X = float.Parse(tRotateCenterX_Temp.Text);
            VariableSys.pDownRotateCenter[selectNz].Y = float.Parse(tRotateCenterY_Temp.Text);
            VariableSys.pDownRotateCam[selectNz].X = float.Parse(tRotateCamX.Text);
            VariableSys.pDownRotateCam[selectNz].Y = float.Parse(tRotateCamY.Text);

            Ini_Sys.IniWriteNumber("VisionCalibration", string.Format("Nozzle{0}_RotateCenterX", selectNz + 1), VariableSys.pDownRotateCenter[selectNz].X);
            Ini_Sys.IniWriteNumber("VisionCalibration", string.Format("Nozzle{0}_RotateCenterY", selectNz + 1), VariableSys.pDownRotateCenter[selectNz].Y);

            Ini_Sys.IniWriteNumber("VisionCalibration", string.Format("Nozzle{0}_RotateCamX", selectNz + 1), VariableSys.pDownRotateCam[selectNz].X);
            Ini_Sys.IniWriteNumber("VisionCalibration", string.Format("Nozzle{0}_RotateCamY", selectNz + 1), VariableSys.pDownRotateCam[selectNz].Y);

            VariableSys.pReadyPoint = VariableSys.pDownRotateCam[selectNz];
            Ini_Sys.IniWriteNumber("Position", "ReadyPointX", VariableSys.pReadyPoint.X);
            Ini_Sys.IniWriteNumber("Position", "ReadyPointY", VariableSys.pReadyPoint.Y);

            PointF temp = VariableSys.pDownRotateCam[0];

            for (int i = 1; i < Variable.NOZZLE_NUM; ++i)
            {
                if (!temp.Equals(VariableSys.pDownRotateCam[i]))
                {
                    MessageBox.Show("检验各个吸嘴时的拍照位置，不一致!!!\r\n请在同一个位置校验选择中心!!!");
                    return;
                }
            }
        }

        private void bCalCenter_Click(object sender, EventArgs e)
        {
            int selectNz = cB_NozzleIndex2.SelectedIndex;

            var pastePt = GlassHelper.MachinePoint2ActPoint(VariableSys.pPasteCoord[selectNz]);
            var upPt = GlassHelper.MachinePoint2ActPoint(VariableSys.pUpMarkCoord[selectNz]);
            var downPt = GlassHelper.MachinePoint2ActPoint(VariableSys.pDownMarkCoord[selectNz]);
            float offsetX = downPt.X - VariableSys.pReadyPoint.X;
            float offsetY = downPt.Y - VariableSys.pReadyPoint.Y;

            VariableSys.pNozzle_2_Cam[selectNz].X = pastePt.X - upPt.X - offsetX;
            VariableSys.pNozzle_2_Cam[selectNz].Y = pastePt.Y - upPt.Y - offsetY;

            tDownCenterX.Text = VariableSys.pNozzle_2_Cam[selectNz].X.ToString();
            tDownCenterY.Text = VariableSys.pNozzle_2_Cam[selectNz].Y.ToString();
            Ini_Sys.IniWriteNumber("VisionCalibration", string.Format("Nozzle{0}_2_Cam_X", selectNz + 1), VariableSys.pNozzle_2_Cam[selectNz].X);
            Ini_Sys.IniWriteNumber("VisionCalibration", string.Format("Nozzle{0}_2_Cam_Y", selectNz + 1), VariableSys.pNozzle_2_Cam[selectNz].Y);
            Ini_Sys.IniWriteNumber("VisionCalibration", string.Format("Nozzle{0}_DownCam_MarkX", selectNz + 1), VariableSys.pDownMarkCoord[selectNz].X);
            Ini_Sys.IniWriteNumber("VisionCalibration", string.Format("Nozzle{0}_DownCam_MarkY", selectNz + 1), VariableSys.pDownMarkCoord[selectNz].Y);
            Ini_Sys.IniWriteNumber("VisionCalibration", string.Format("Nozzle{0}_Paste_X", selectNz + 1), VariableSys.pPasteCoord[selectNz].X);
            Ini_Sys.IniWriteNumber("VisionCalibration", string.Format("Nozzle{0}_Paste_Y", selectNz + 1), VariableSys.pPasteCoord[selectNz].Y);
            Ini_Sys.IniWriteNumber("VisionCalibration", string.Format("Nozzle{0}_DownCam_MarkX", selectNz + 1), VariableSys.pDownMarkCoord[selectNz].X);
            Ini_Sys.IniWriteNumber("VisionCalibration", string.Format("Nozzle{0}_DownCam_MarkY", selectNz + 1), VariableSys.pDownMarkCoord[selectNz].Y);
            Ini_Sys.IniWriteNumber("VisionCalibration", string.Format("Nozzle{0}_UpCam_MarkX", selectNz + 1), VariableSys.pUpMarkCoord[selectNz].X);
            Ini_Sys.IniWriteNumber("VisionCalibration", string.Format("Nozzle{0}_UpCam_MarkY", selectNz + 1), VariableSys.pUpMarkCoord[selectNz].Y);
        }
        #endregion

        #region 系统设定页面
        private void comboBox_VelMode_SelectedIndexChanged(object sender, EventArgs e)
        {
            //switch (comboBox_Vel.SelectedIndex)
            //{
            //    case 0:
            //        tVM_Vel_Low.Text = VariableSys.VelMode_Run.LowVel.ToString();
            //        tVM_Vel_High.Text = VariableSys.VelMode_Run.HighVel.ToString();
            //        tVM_Acc.Text = VariableSys.VelMode_Run.Acc.ToString();
            //        tVM_Dec.Text = VariableSys.VelMode_Run.Dec.ToString();
            //        break;
            //    case 1:
            //        tVM_Vel_Low.Text = VariableSys.VelMode_Slow.LowVel.ToString();
            //        tVM_Vel_High.Text = VariableSys.VelMode_Slow.HighVel.ToString();
            //        tVM_Acc.Text = VariableSys.VelMode_Slow.Acc.ToString();
            //        tVM_Dec.Text = VariableSys.VelMode_Slow.Dec.ToString();
            //        break;
            //    case 2:
            //        tVM_Vel_Low.Text = VariableSys.VelMode_Debug.LowVel.ToString();
            //        tVM_Vel_High.Text = VariableSys.VelMode_Debug.HighVel.ToString();
            //        tVM_Acc.Text = VariableSys.VelMode_Debug.Acc.ToString();
            //        tVM_Dec.Text = VariableSys.VelMode_Debug.Dec.ToString();
            //        break;
            //}
        }

        private void bVelModeConfirm_Click(object sender, EventArgs e)
        {
            VariableSys.iVelMode_Current_NO = (short)(comboBox_VelMode.SelectedIndex + 1);
            Ini_Sys.IniWriteNumber("VelMode", "CurrentVel", VariableSys.iVelMode_Current_NO);
            switch (comboBox_VelMode.SelectedIndex)
            {
                case 0:
                    VariableSys.VelMode_Current.LowVel = VariableSys.VelMode_Run.LowVel;
                    VariableSys.VelMode_Current.HighVel = VariableSys.VelMode_Run.HighVel;
                    VariableSys.VelMode_Current.Acc = VariableSys.VelMode_Run.Acc;
                    VariableSys.VelMode_Current.Dec = VariableSys.VelMode_Run.Dec;
                    break;
                case 1:
                    VariableSys.VelMode_Current.LowVel = VariableSys.VelMode_Slow.LowVel;
                    VariableSys.VelMode_Current.HighVel = VariableSys.VelMode_Slow.HighVel;
                    VariableSys.VelMode_Current.Acc = VariableSys.VelMode_Slow.Acc;
                    VariableSys.VelMode_Current.Dec = VariableSys.VelMode_Slow.Dec;

                    break;
                case 2:
                    VariableSys.VelMode_Current.LowVel = VariableSys.VelMode_Debug.LowVel;
                    VariableSys.VelMode_Current.HighVel = VariableSys.VelMode_Debug.HighVel;
                    VariableSys.VelMode_Current.Acc = VariableSys.VelMode_Debug.Acc;
                    VariableSys.VelMode_Current.Dec = VariableSys.VelMode_Debug.Dec;
                    break;
            }
            bVelModeConfirm.BackColor = Color.GreenYellow;
        }

        private void comboBox_Vel_SelectedIndexChanged(object sender, EventArgs e)
        {
            switch (comboBox_Vel.SelectedIndex)
            {
                case 0:
                    tVM_Vel_Low.Text = VariableSys.VelMode_Run.LowVel.ToString();
                    tVM_Vel_High.Text = VariableSys.VelMode_Run.HighVel.ToString();
                    tVM_Acc.Text = VariableSys.VelMode_Run.Acc.ToString();
                    tVM_Dec.Text = VariableSys.VelMode_Run.Dec.ToString();
                    break;
                case 1:
                    tVM_Vel_Low.Text = VariableSys.VelMode_Slow.LowVel.ToString();
                    tVM_Vel_High.Text = VariableSys.VelMode_Slow.HighVel.ToString();
                    tVM_Acc.Text = VariableSys.VelMode_Slow.Acc.ToString();
                    tVM_Dec.Text = VariableSys.VelMode_Slow.Dec.ToString();
                    break;
                case 2:
                    tVM_Vel_Low.Text = VariableSys.VelMode_Debug.LowVel.ToString();
                    tVM_Vel_High.Text = VariableSys.VelMode_Debug.HighVel.ToString();
                    tVM_Acc.Text = VariableSys.VelMode_Debug.Acc.ToString();
                    tVM_Dec.Text = VariableSys.VelMode_Debug.Dec.ToString();
                    break;
            }
        }

        private void bVM_OK_Click(object sender, EventArgs e)
        {
            double temp_lowvel, temp_highvel, temp_acc, temp_dec;
            string str1, str2, str3, str4;
            str1 = tVM_Vel_Low.Text;
            str2 = tVM_Vel_High.Text;
            str3 = tVM_Acc.Text;
            str4 = tVM_Dec.Text;
            try
            {
                temp_lowvel = Convert.ToDouble(str1);
                temp_highvel = Convert.ToDouble(str2);
                temp_acc = Convert.ToDouble(str3);
                temp_dec = Convert.ToDouble(str4);
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("输入数值有误！");
                }
                return;
            }

            switch (comboBox_Vel.SelectedIndex)
            {
                case 0:
                    VariableSys.VelMode_Run.LowVel = temp_lowvel;
                    VariableSys.VelMode_Run.HighVel = temp_highvel;
                    VariableSys.VelMode_Run.Acc = temp_acc;
                    VariableSys.VelMode_Run.Dec = temp_dec;
                    Ini_Sys.IniWriteNumber("VelMode", "RunMode_LowVel", VariableSys.VelMode_Run.LowVel);
                    Ini_Sys.IniWriteNumber("VelMode", "RunMode_HighVel", VariableSys.VelMode_Run.HighVel);
                    Ini_Sys.IniWriteNumber("VelMode", "RunMode_Acc", VariableSys.VelMode_Run.Acc);
                    Ini_Sys.IniWriteNumber("VelMode", "RunMode_Dec", VariableSys.VelMode_Run.Dec);
                    break;
                case 1:
                    VariableSys.VelMode_Slow.LowVel = temp_lowvel;
                    VariableSys.VelMode_Slow.HighVel = temp_highvel;
                    VariableSys.VelMode_Slow.Acc = temp_acc;
                    VariableSys.VelMode_Slow.Dec = temp_dec;
                    Ini_Sys.IniWriteNumber("VelMode", "SlowMode_LowVel", VariableSys.VelMode_Slow.LowVel);
                    Ini_Sys.IniWriteNumber("VelMode", "SlowMode_HighVel", VariableSys.VelMode_Slow.HighVel);
                    Ini_Sys.IniWriteNumber("VelMode", "SlowMode_Acc", VariableSys.VelMode_Slow.Acc);
                    Ini_Sys.IniWriteNumber("VelMode", "SlowMode_Dec", VariableSys.VelMode_Slow.Dec);
                    break;
                case 2:
                    VariableSys.VelMode_Debug.LowVel = temp_lowvel;
                    VariableSys.VelMode_Debug.HighVel = temp_highvel;
                    VariableSys.VelMode_Debug.Acc = temp_acc;
                    VariableSys.VelMode_Debug.Dec = temp_dec;
                    Ini_Sys.IniWriteNumber("VelMode", "DebugMode_LowVel", VariableSys.VelMode_Debug.LowVel);
                    Ini_Sys.IniWriteNumber("VelMode", "DebugMode_HighVel", VariableSys.VelMode_Debug.HighVel);
                    Ini_Sys.IniWriteNumber("VelMode", "DebugMode_Acc", VariableSys.VelMode_Debug.Acc);
                    Ini_Sys.IniWriteNumber("VelMode", "DebugMode_Dec", VariableSys.VelMode_Debug.Dec);
                    break;
            }
            bVM_OK.BackColor = Color.GreenYellow;
        }

        private void bLowVelOK_Click(object sender, EventArgs e)
        {
            string str1, str2, str3, str4;//
            double d0, d1, d2, d3;
            str1 = tLowVelRatio_X.Text;
            str2 = tLowVelRatio_Turn.Text;
            str3 = tLowVelRatio_R.Text;
            str4 = tLowVelRatio_Y.Text;
            try
            {
                d0 = Convert.ToDouble(str1);
                d1 = Convert.ToDouble(str2);
                d2 = Convert.ToDouble(str3);
                d3 = Convert.ToDouble(str4);
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("输入数值有误！");
                }
                return;
            }
            VariableSys.dRatio_Axis_X_LowVel = d0;
            VariableSys.dRatio_Axis_Y_LowVel = d3;
            VariableSys.dRatio_Axis_R_LowVel = d2;
            VariableSys.dRatio_Axis_Turn_LowVel = d1;
            //写入到INI中
            Ini_Sys.IniWriteNumber("VelMode", "AxisRatio_X_LowVel", VariableSys.dRatio_Axis_X_LowVel);
            Ini_Sys.IniWriteNumber("VelMode", "AxisRatio_Y_LowVel", VariableSys.dRatio_Axis_Y_LowVel);
            Ini_Sys.IniWriteNumber("VelMode", "AxisRatio_Turn_LowVel", VariableSys.dRatio_Axis_Turn_LowVel);
            Ini_Sys.IniWriteNumber("VelMode", "AxisRatio_R_LowVel", VariableSys.dRatio_Axis_R_LowVel);
            X.SetSpeedRatio(VariableSys.dRatio_Axis_X_LowVel, VariableSys.dRatio_Axis_X_HighVel, VariableSys.dRatio_Axis_X_Acc, VariableSys.dRatio_Axis_X_Dec);
            Y.SetSpeedRatio(VariableSys.dRatio_Axis_Y_LowVel, VariableSys.dRatio_Axis_Y_HighVel, VariableSys.dRatio_Axis_Y_Acc, VariableSys.dRatio_Axis_Y_Dec);
            Turn.SetSpeedRatio(VariableSys.dRatio_Axis_Turn_LowVel, VariableSys.dRatio_Axis_Turn_HighVel, VariableSys.dRatio_Axis_Turn_Acc, VariableSys.dRatio_Axis_Turn_Dec);

            for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
            {
                this.R_RunParamMap[i].SetSpeedRatio(VariableSys.dRatio_Axis_R_LowVel, VariableSys.dRatio_Axis_R_HighVel, VariableSys.dRatio_Axis_R_Acc, VariableSys.dRatio_Axis_R_Dec);
                this.Z_RunParamMap[i].SetSpeedRatio(VariableSys.dRatio_Axis_R_LowVel, VariableSys.dRatio_Axis_R_HighVel, VariableSys.dRatio_Axis_R_Acc, VariableSys.dRatio_Axis_R_Dec);
            }

            bLowVelOK.BackColor = Color.GreenYellow;
        }

        private void bHighVelOK_Click(object sender, EventArgs e)
        {
            string str1, str2, str3, str4;//
            double d0, d1, d2, d3;
            str1 = tHighVelRatio_X.Text;
            str2 = tHighVelRatio_Turn.Text;
            str3 = tHighVelRatio_R.Text;
            str4 = tHighVelRatio_Y.Text;
            try
            {
                d0 = Convert.ToDouble(str1);
                d1 = Convert.ToDouble(str2);
                d2 = Convert.ToDouble(str3);
                d3 = Convert.ToDouble(str4);
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("输入数值有误！");
                }
                return;
            }
            VariableSys.dRatio_Axis_X_HighVel = d0;
            VariableSys.dRatio_Axis_Y_HighVel = d3;
            VariableSys.dRatio_Axis_Turn_HighVel = d1;
            VariableSys.dRatio_Axis_R_HighVel = d2;
            //写入到INI中
            Ini_Sys.IniWriteNumber("VelMode", "AxisRatio_X_HighVel", VariableSys.dRatio_Axis_X_HighVel);
            Ini_Sys.IniWriteNumber("VelMode", "AxisRatio_Y_HighVel", VariableSys.dRatio_Axis_Y_HighVel);
            Ini_Sys.IniWriteNumber("VelMode", "AxisRatio_Turn_HighVel", VariableSys.dRatio_Axis_Turn_HighVel);
            Ini_Sys.IniWriteNumber("VelMode", "AxisRatio_R_HighVel", VariableSys.dRatio_Axis_R_HighVel);

            X.SetSpeedRatio(VariableSys.dRatio_Axis_X_LowVel, VariableSys.dRatio_Axis_X_HighVel, VariableSys.dRatio_Axis_X_Acc, VariableSys.dRatio_Axis_X_Dec);
            Y.SetSpeedRatio(VariableSys.dRatio_Axis_Y_LowVel, VariableSys.dRatio_Axis_Y_HighVel, VariableSys.dRatio_Axis_Y_Acc, VariableSys.dRatio_Axis_Y_Dec);
            Turn.SetSpeedRatio(VariableSys.dRatio_Axis_Turn_LowVel, VariableSys.dRatio_Axis_Turn_HighVel, VariableSys.dRatio_Axis_Turn_Acc, VariableSys.dRatio_Axis_Turn_Dec);

            for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
            {
                this.R_RunParamMap[i].SetSpeedRatio(VariableSys.dRatio_Axis_R_LowVel, VariableSys.dRatio_Axis_R_HighVel, VariableSys.dRatio_Axis_R_Acc, VariableSys.dRatio_Axis_R_Dec);
                this.Z_RunParamMap[i].SetSpeedRatio(VariableSys.dRatio_Axis_R_LowVel, VariableSys.dRatio_Axis_R_HighVel, VariableSys.dRatio_Axis_R_Acc, VariableSys.dRatio_Axis_R_Dec);
            }

            bHighVelOK.BackColor = Color.GreenYellow;
        }

        private void bACCOK_Click(object sender, EventArgs e)
        {
            string str1, str2, str3, str4;//
            double d0, d1, d2, d3;
            str1 = tACCRatio_X.Text;
            str2 = tACCRatio_Turn.Text;
            str3 = tACCRatio_R.Text;
            str4 = tACCRatio_Y.Text;
            try
            {
                d0 = Convert.ToDouble(str1);
                d1 = Convert.ToDouble(str2);
                d2 = Convert.ToDouble(str3);
                d3 = Convert.ToDouble(str4);
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("输入数值有误！");
                }
                return;
            }
            VariableSys.dRatio_Axis_X_Acc = d0;
            VariableSys.dRatio_Axis_Y_Acc = d3;
            VariableSys.dRatio_Axis_R_Acc = d2;
            VariableSys.dRatio_Axis_Turn_Acc = d1;
            //写入到INI中
            Ini_Sys.IniWriteNumber("VelMode", "AxisRatio_X_Acc", VariableSys.dRatio_Axis_X_Acc);
            Ini_Sys.IniWriteNumber("VelMode", "AxisRatio_Y_Acc", VariableSys.dRatio_Axis_Y_Acc);
            Ini_Sys.IniWriteNumber("VelMode", "AxisRatio_Turn_Acc", VariableSys.dRatio_Axis_Turn_Acc);
            Ini_Sys.IniWriteNumber("VelMode", "AxisRatio_R_Acc", VariableSys.dRatio_Axis_R_Acc);
            X.SetSpeedRatio(VariableSys.dRatio_Axis_X_LowVel, VariableSys.dRatio_Axis_X_HighVel, VariableSys.dRatio_Axis_X_Acc, VariableSys.dRatio_Axis_X_Dec);
            Y.SetSpeedRatio(VariableSys.dRatio_Axis_Y_LowVel, VariableSys.dRatio_Axis_Y_HighVel, VariableSys.dRatio_Axis_Y_Acc, VariableSys.dRatio_Axis_Y_Dec);
            Turn.SetSpeedRatio(VariableSys.dRatio_Axis_Turn_LowVel, VariableSys.dRatio_Axis_Turn_HighVel, VariableSys.dRatio_Axis_Turn_Acc, VariableSys.dRatio_Axis_Turn_Dec);

            for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
            {
                this.R_RunParamMap[i].SetSpeedRatio(VariableSys.dRatio_Axis_R_LowVel, VariableSys.dRatio_Axis_R_HighVel, VariableSys.dRatio_Axis_R_Acc, VariableSys.dRatio_Axis_R_Dec);
                this.Z_RunParamMap[i].SetSpeedRatio(VariableSys.dRatio_Axis_R_LowVel, VariableSys.dRatio_Axis_R_HighVel, VariableSys.dRatio_Axis_R_Acc, VariableSys.dRatio_Axis_R_Dec);
            }
            bACCOK.BackColor = Color.GreenYellow;
        }

        private void bDECOK_Click(object sender, EventArgs e)
        {
            string str1, str2, str3, str4;//
            double d0, d1, d2, d3;
            str1 = tDECRatio_X.Text;
            str2 = tDECRatio_Turn.Text;
            str3 = tDECRatio_R.Text;
            str4 = tDECRatio_Y.Text;
            try
            {
                d0 = Convert.ToDouble(str1);
                d1 = Convert.ToDouble(str2);
                d2 = Convert.ToDouble(str3);
                d3 = Convert.ToDouble(str4);
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("输入数值有误！");
                }
                return;
            }
            VariableSys.dRatio_Axis_X_Dec = d0;
            VariableSys.dRatio_Axis_Y_Dec = d3;
            VariableSys.dRatio_Axis_R_Dec = d2;
            VariableSys.dRatio_Axis_Turn_Dec = d1;
            //写入到INI中
            Ini_Sys.IniWriteNumber("VelMode", "AxisRatio_X_Dec", VariableSys.dRatio_Axis_X_Dec);
            Ini_Sys.IniWriteNumber("VelMode", "AxisRatio_Y_Dec", VariableSys.dRatio_Axis_Y_Dec);
            Ini_Sys.IniWriteNumber("VelMode", "AxisRatio_Turn_Dec", VariableSys.dRatio_Axis_Turn_Dec);
            Ini_Sys.IniWriteNumber("VelMode", "AxisRatio_R_Dec", VariableSys.dRatio_Axis_R_Dec);

            X.SetSpeedRatio(VariableSys.dRatio_Axis_X_LowVel, VariableSys.dRatio_Axis_X_HighVel, VariableSys.dRatio_Axis_X_Acc, VariableSys.dRatio_Axis_X_Dec);
            Y.SetSpeedRatio(VariableSys.dRatio_Axis_Y_LowVel, VariableSys.dRatio_Axis_Y_HighVel, VariableSys.dRatio_Axis_Y_Acc, VariableSys.dRatio_Axis_Y_Dec);
            Turn.SetSpeedRatio(VariableSys.dRatio_Axis_Turn_LowVel, VariableSys.dRatio_Axis_Turn_HighVel, VariableSys.dRatio_Axis_Turn_Acc, VariableSys.dRatio_Axis_Turn_Dec);

            for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
            {
                this.R_RunParamMap[i].SetSpeedRatio(VariableSys.dRatio_Axis_R_LowVel, VariableSys.dRatio_Axis_R_HighVel, VariableSys.dRatio_Axis_R_Acc, VariableSys.dRatio_Axis_R_Dec);
                this.Z_RunParamMap[i].SetSpeedRatio(VariableSys.dRatio_Axis_R_LowVel, VariableSys.dRatio_Axis_R_HighVel, VariableSys.dRatio_Axis_R_Acc, VariableSys.dRatio_Axis_R_Dec);
            }
            bDECOK.BackColor = Color.GreenYellow;
        }

        private void bVelModeConfirm_Manual_Click(object sender, EventArgs e)
        {
            VariableSys.iVelMode_Current_NO_Manual = (short)(comboBox_VelMode_Manual.SelectedIndex + 1);
            Ini_Sys.IniWriteNumber("VelMode", "CurrentVel_Manual", VariableSys.iVelMode_Current_NO_Manual);
            switch (comboBox_VelMode_Manual.SelectedIndex)
            {
                case 0:
                    VariableSys.VelMode_Current_Manual.LowVel = VariableSys.VelMode_Run_Manual.LowVel;
                    VariableSys.VelMode_Current_Manual.HighVel = VariableSys.VelMode_Run_Manual.HighVel;
                    VariableSys.VelMode_Current_Manual.Acc = VariableSys.VelMode_Run_Manual.Acc;
                    VariableSys.VelMode_Current_Manual.Dec = VariableSys.VelMode_Run_Manual.Dec;
                    break;
                case 1:
                    VariableSys.VelMode_Current_Manual.LowVel = VariableSys.VelMode_Slow_Manual.LowVel;
                    VariableSys.VelMode_Current_Manual.HighVel = VariableSys.VelMode_Slow_Manual.HighVel;
                    VariableSys.VelMode_Current_Manual.Acc = VariableSys.VelMode_Slow_Manual.Acc;
                    VariableSys.VelMode_Current_Manual.Dec = VariableSys.VelMode_Slow_Manual.Dec;

                    break;
                case 2:
                    VariableSys.VelMode_Current_Manual.LowVel = VariableSys.VelMode_Debug_Manual.LowVel;
                    VariableSys.VelMode_Current_Manual.HighVel = VariableSys.VelMode_Debug_Manual.HighVel;
                    VariableSys.VelMode_Current_Manual.Acc = VariableSys.VelMode_Debug_Manual.Acc;
                    VariableSys.VelMode_Current_Manual.Dec = VariableSys.VelMode_Debug_Manual.Dec;
                    break;
            }
            bVelModeConfirm_Manual.BackColor = Color.GreenYellow;
        }

        private void comboBox_VelMode_Manual_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void comboBox_Vel_Manual_SelectedIndexChanged(object sender, EventArgs e)
        {
            switch (comboBox_Vel_Manual.SelectedIndex)
            {
                case 0:
                    tVM_Vel_Low_Manual.Text = VariableSys.VelMode_Run_Manual.LowVel.ToString();
                    tVM_Vel_High_Manual.Text = VariableSys.VelMode_Run_Manual.HighVel.ToString();
                    tVM_Acc_Manual.Text = VariableSys.VelMode_Run_Manual.Acc.ToString();
                    tVM_Dec_Manual.Text = VariableSys.VelMode_Run_Manual.Dec.ToString();
                    break;
                case 1:
                    tVM_Vel_Low_Manual.Text = VariableSys.VelMode_Slow_Manual.LowVel.ToString();
                    tVM_Vel_High_Manual.Text = VariableSys.VelMode_Slow_Manual.HighVel.ToString();
                    tVM_Acc_Manual.Text = VariableSys.VelMode_Slow_Manual.Acc.ToString();
                    tVM_Dec_Manual.Text = VariableSys.VelMode_Slow_Manual.Dec.ToString();
                    break;
                case 2:
                    tVM_Vel_Low_Manual.Text = VariableSys.VelMode_Debug_Manual.LowVel.ToString();
                    tVM_Vel_High_Manual.Text = VariableSys.VelMode_Debug_Manual.HighVel.ToString();
                    tVM_Acc_Manual.Text = VariableSys.VelMode_Debug_Manual.Acc.ToString();
                    tVM_Dec_Manual.Text = VariableSys.VelMode_Debug_Manual.Dec.ToString();
                    break;
            }
        }

        private void bVM_OK_Manual_Click(object sender, EventArgs e)
        {
            double temp_lowvel, temp_highvel, temp_acc, temp_dec;
            string str1, str2, str3, str4;
            str1 = tVM_Vel_Low_Manual.Text;
            str2 = tVM_Vel_High_Manual.Text;
            str3 = tVM_Acc_Manual.Text;
            str4 = tVM_Dec_Manual.Text;
            try
            {
                temp_lowvel = Convert.ToDouble(str1);
                temp_highvel = Convert.ToDouble(str2);
                temp_acc = Convert.ToDouble(str3);
                temp_dec = Convert.ToDouble(str4);
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("输入数值有误！");
                }
                return;
            }

            switch (comboBox_Vel_Manual.SelectedIndex)
            {
                case 0:
                    VariableSys.VelMode_Run_Manual.LowVel = temp_lowvel;
                    VariableSys.VelMode_Run_Manual.HighVel = temp_highvel;
                    VariableSys.VelMode_Run_Manual.Acc = temp_acc;
                    VariableSys.VelMode_Run_Manual.Dec = temp_dec;
                    Ini_Sys.IniWriteNumber("VelMode", "RunMode_LowVel_Manual", VariableSys.VelMode_Run_Manual.LowVel);
                    Ini_Sys.IniWriteNumber("VelMode", "RunMode_HighVel_Manual", VariableSys.VelMode_Run_Manual.HighVel);
                    Ini_Sys.IniWriteNumber("VelMode", "RunMode_Acc_Manual", VariableSys.VelMode_Run_Manual.Acc);
                    Ini_Sys.IniWriteNumber("VelMode", "RunMode_Dec_Manual", VariableSys.VelMode_Run_Manual.Dec);
                    if (VariableSys.iVelMode_Current_NO_Manual == 1)
                    {
                        VariableSys.VelMode_Current_Manual.LowVel = VariableSys.VelMode_Run_Manual.LowVel;
                        VariableSys.VelMode_Current_Manual.HighVel = VariableSys.VelMode_Run_Manual.HighVel;
                        VariableSys.VelMode_Current_Manual.Acc = VariableSys.VelMode_Run_Manual.Acc;
                        VariableSys.VelMode_Current_Manual.Dec = VariableSys.VelMode_Run_Manual.Dec;
                    }
                    break;
                case 1:
                    VariableSys.VelMode_Slow_Manual.LowVel = temp_lowvel;
                    VariableSys.VelMode_Slow_Manual.HighVel = temp_highvel;
                    VariableSys.VelMode_Slow_Manual.Acc = temp_acc;
                    VariableSys.VelMode_Slow_Manual.Dec = temp_dec;
                    Ini_Sys.IniWriteNumber("VelMode", "SlowMode_LowVel_Manual", VariableSys.VelMode_Slow_Manual.LowVel);
                    Ini_Sys.IniWriteNumber("VelMode", "SlowMode_HighVel_Manual", VariableSys.VelMode_Slow_Manual.HighVel);
                    Ini_Sys.IniWriteNumber("VelMode", "SlowMode_Acc_Manual", VariableSys.VelMode_Slow_Manual.Acc);
                    Ini_Sys.IniWriteNumber("VelMode", "SlowMode_Dec_Manual", VariableSys.VelMode_Slow_Manual.Dec);
                    if (VariableSys.iVelMode_Current_NO_Manual == 2)
                    {
                        VariableSys.VelMode_Current_Manual.LowVel = VariableSys.VelMode_Slow_Manual.LowVel;
                        VariableSys.VelMode_Current_Manual.HighVel = VariableSys.VelMode_Slow_Manual.HighVel;
                        VariableSys.VelMode_Current_Manual.Acc = VariableSys.VelMode_Slow_Manual.Acc;
                        VariableSys.VelMode_Current_Manual.Dec = VariableSys.VelMode_Slow_Manual.Dec;
                    }
                    break;
                case 2:
                    VariableSys.VelMode_Debug_Manual.LowVel = temp_lowvel;
                    VariableSys.VelMode_Debug_Manual.HighVel = temp_highvel;
                    VariableSys.VelMode_Debug_Manual.Acc = temp_acc;
                    VariableSys.VelMode_Debug_Manual.Dec = temp_dec;
                    Ini_Sys.IniWriteNumber("VelMode", "DebugMode_LowVel_Manual", VariableSys.VelMode_Debug_Manual.LowVel);
                    Ini_Sys.IniWriteNumber("VelMode", "DebugMode_HighVel_Manual", VariableSys.VelMode_Debug_Manual.HighVel);
                    Ini_Sys.IniWriteNumber("VelMode", "DebugMode_Acc_Manual", VariableSys.VelMode_Debug_Manual.Acc);
                    Ini_Sys.IniWriteNumber("VelMode", "DebugMode_Dec_Manual", VariableSys.VelMode_Debug_Manual.Dec);
                    if (VariableSys.iVelMode_Current_NO_Manual == 3)
                    {
                        VariableSys.VelMode_Current_Manual.LowVel = VariableSys.VelMode_Debug_Manual.LowVel;
                        VariableSys.VelMode_Current_Manual.HighVel = VariableSys.VelMode_Debug_Manual.HighVel;
                        VariableSys.VelMode_Current_Manual.Acc = VariableSys.VelMode_Debug_Manual.Acc;
                        VariableSys.VelMode_Current_Manual.Dec = VariableSys.VelMode_Debug_Manual.Dec;
                    }
                    break;
            }
            bVM_OK_Manual.BackColor = Color.GreenYellow;
        }

        private void bVM_OK_Test_Click(object sender, EventArgs e)
        {
            double temp_lowvel, temp_highvel, temp_acc, temp_dec;
            string str1, str2, str3, str4;
            str1 = tVM_Vel_Low_Test.Text;
            str2 = tVM_Vel_High_Test.Text;
            str3 = tVM_Acc_Test.Text;
            str4 = tVM_Dec_Test.Text;
            try
            {
                temp_lowvel = Convert.ToDouble(str1);
                temp_highvel = Convert.ToDouble(str2);
                temp_acc = Convert.ToDouble(str3);
                temp_dec = Convert.ToDouble(str4);
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("输入数值有误！");
                }
                return;
            }
            VariableSys.VelMode_Test.LowVel = temp_lowvel;
            VariableSys.VelMode_Test.HighVel = temp_highvel;
            VariableSys.VelMode_Test.Acc = temp_acc;
            VariableSys.VelMode_Test.Dec = temp_dec;
            Ini_Sys.IniWriteNumber("VelMode", "TESTMode_LowVel", VariableSys.VelMode_Test.LowVel);
            Ini_Sys.IniWriteNumber("VelMode", "TESTMode_HighVel", VariableSys.VelMode_Test.HighVel);
            Ini_Sys.IniWriteNumber("VelMode", "TESTMode_Acc", VariableSys.VelMode_Test.Acc);
            Ini_Sys.IniWriteNumber("VelMode", "TESTMode_Dec", VariableSys.VelMode_Test.Dec);
            bVM_OK_Test.BackColor = Color.GreenYellow;
        }

        private void bVelModeConfirm_MouseDown(object sender, MouseEventArgs e)
        {
            bVelModeConfirm.BackColor = Color.Transparent;
        }

        private void bVM_OK_MouseDown(object sender, MouseEventArgs e)
        {
            bVM_OK.BackColor = Color.Transparent;
        }

        private void bLowVelOK_MouseDown(object sender, MouseEventArgs e)
        {
            bLowVelOK.BackColor = Color.Transparent;
        }

        private void bHighVelOK_MouseDown(object sender, MouseEventArgs e)
        {
            bHighVelOK.BackColor = Color.Transparent;
        }

        private void bACCOK_MouseDown(object sender, MouseEventArgs e)
        {
            bACCOK.BackColor = Color.Transparent;
        }

        private void bDECOK_MouseDown(object sender, MouseEventArgs e)
        {
            bDECOK.BackColor = Color.Transparent;
        }

        private void bVelModeConfirm_Manual_MouseDown(object sender, MouseEventArgs e)
        {
            bVelModeConfirm_Manual.BackColor = Color.Transparent;
        }

        private void bVM_OK_Manual_MouseDown(object sender, MouseEventArgs e)
        {
            bVM_OK_Manual.BackColor = Color.Transparent;
        }

        private void bVM_OK_Test_MouseDown(object sender, MouseEventArgs e)
        {
            bVM_OK_Test.BackColor = Color.Transparent;
        }

        private void bVM_OK_Home_Click(object sender, EventArgs e)
        {
            double temp_lowvel, temp_highvel, temp_acc, temp_dec;
            string str1, str2, str3, str4;
            str1 = tVM_Vel_Low_Home.Text;
            str2 = tVM_Vel_High_Home.Text;
            str3 = tVM_Acc_Home.Text;
            str4 = tVM_Dec_Home.Text;
            try
            {
                temp_lowvel = Convert.ToDouble(str1);
                temp_highvel = Convert.ToDouble(str2);
                temp_acc = Convert.ToDouble(str3);
                temp_dec = Convert.ToDouble(str4);
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("输入数值有误！");
                }
                return;
            }

            switch (comboBox_Vel_Home.SelectedIndex)
            {
                case 0:
                    VariableSys.VelMode_Home_X.LowVel = temp_lowvel;
                    VariableSys.VelMode_Home_X.HighVel = temp_highvel;
                    VariableSys.VelMode_Home_X.Acc = temp_acc;
                    VariableSys.VelMode_Home_X.Dec = temp_dec;
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_LowVel_X", VariableSys.VelMode_Home_X.LowVel);
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_HighVel_X", VariableSys.VelMode_Home_X.HighVel);
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_Acc_X", VariableSys.VelMode_Home_X.Acc);
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_Dec_X", VariableSys.VelMode_Home_X.Dec);
                    break;
                case 1:
                    VariableSys.VelMode_Home_Y.LowVel = temp_lowvel;
                    VariableSys.VelMode_Home_Y.HighVel = temp_highvel;
                    VariableSys.VelMode_Home_Y.Acc = temp_acc;
                    VariableSys.VelMode_Home_Y.Dec = temp_dec;
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_LowVel_Y", VariableSys.VelMode_Home_Y.LowVel);
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_HighVel_Y", VariableSys.VelMode_Home_Y.HighVel);
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_Acc_Y", VariableSys.VelMode_Home_Y.Acc);
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_Dec_Y", VariableSys.VelMode_Home_Y.Dec);
                    break;
                case 2:
                    break;
                case 3:
                    break;
                case 4:
                    VariableSys.VelMode_Home_R1.LowVel = temp_lowvel;
                    VariableSys.VelMode_Home_R1.HighVel = temp_highvel;
                    VariableSys.VelMode_Home_R1.Acc = temp_acc;
                    VariableSys.VelMode_Home_R1.Dec = temp_dec;
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_LowVel_R1", VariableSys.VelMode_Home_R1.LowVel);
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_HighVel_R1", VariableSys.VelMode_Home_R1.HighVel);
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_Acc_R1", VariableSys.VelMode_Home_R1.Acc);
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_Dec_R1", VariableSys.VelMode_Home_R1.Dec);
                    break;
                case 5:
                    VariableSys.VelMode_Home_R2.LowVel = temp_lowvel;
                    VariableSys.VelMode_Home_R2.HighVel = temp_highvel;
                    VariableSys.VelMode_Home_R2.Acc = temp_acc;
                    VariableSys.VelMode_Home_R2.Dec = temp_dec;
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_LowVel_R2", VariableSys.VelMode_Home_R2.LowVel);
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_HighVel_R2", VariableSys.VelMode_Home_R2.HighVel);
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_Acc_R2", VariableSys.VelMode_Home_R2.Acc);
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_Dec_R2", VariableSys.VelMode_Home_R2.Dec);
                    break;
                case 6:
                    VariableSys.VelMode_Home_Wide.LowVel = temp_lowvel;
                    VariableSys.VelMode_Home_Wide.HighVel = temp_highvel;
                    VariableSys.VelMode_Home_Wide.Acc = temp_acc;
                    VariableSys.VelMode_Home_Wide.Dec = temp_dec;
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_LowVel_Wide", VariableSys.VelMode_Home_Wide.LowVel);
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_HighVel_Wide", VariableSys.VelMode_Home_Wide.HighVel);
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_Acc_Wide", VariableSys.VelMode_Home_Wide.Acc);
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_Dec_Wide", VariableSys.VelMode_Home_Wide.Dec);
                    break;
                case 7:
                    VariableSys.VelMode_Home_XY.LowVel = temp_lowvel;
                    VariableSys.VelMode_Home_XY.HighVel = temp_highvel;
                    VariableSys.VelMode_Home_XY.Acc = temp_acc;
                    VariableSys.VelMode_Home_XY.Dec = temp_dec;
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_LowVel_XY", VariableSys.VelMode_Home_XY.LowVel);
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_HighVel_XY", VariableSys.VelMode_Home_XY.HighVel);
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_Acc_XY", VariableSys.VelMode_Home_XY.Acc);
                    Ini_Sys.IniWriteNumber("VelMode", "HomeMode_Dec_XY", VariableSys.VelMode_Home_XY.Dec);
                    break;
                case 8:
                    break;
            }
            bVM_OK_Home.BackColor = Color.GreenYellow;
        }

        private void bVM_OK_Home_MouseDown(object sender, MouseEventArgs e)
        {
            bVM_OK_Home.BackColor = Color.Transparent;
        }

        private void comboBox_Vel_Home_SelectedIndexChanged(object sender, EventArgs e)
        {
            switch (comboBox_Vel_Home.SelectedIndex)
            {
                case 0:
                    tVM_Vel_Low_Home.Text = VariableSys.VelMode_Home_X.LowVel.ToString();
                    tVM_Vel_High_Home.Text = VariableSys.VelMode_Home_X.HighVel.ToString();
                    tVM_Acc_Home.Text = VariableSys.VelMode_Home_X.Acc.ToString();
                    tVM_Dec_Home.Text = VariableSys.VelMode_Home_X.Dec.ToString();
                    break;
                case 1:
                    tVM_Vel_Low_Home.Text = VariableSys.VelMode_Home_Y.LowVel.ToString();
                    tVM_Vel_High_Home.Text = VariableSys.VelMode_Home_Y.HighVel.ToString();
                    tVM_Acc_Home.Text = VariableSys.VelMode_Home_Y.Acc.ToString();
                    tVM_Dec_Home.Text = VariableSys.VelMode_Home_Y.Dec.ToString();
                    break;
                case 2:
                    break;
                case 3:
                    break;
                case 4:
                    tVM_Vel_Low_Home.Text = VariableSys.VelMode_Home_R1.LowVel.ToString();
                    tVM_Vel_High_Home.Text = VariableSys.VelMode_Home_R1.HighVel.ToString();
                    tVM_Acc_Home.Text = VariableSys.VelMode_Home_R1.Acc.ToString();
                    tVM_Dec_Home.Text = VariableSys.VelMode_Home_R1.Dec.ToString();
                    break;
                case 5:
                    tVM_Vel_Low_Home.Text = VariableSys.VelMode_Home_R2.LowVel.ToString();
                    tVM_Vel_High_Home.Text = VariableSys.VelMode_Home_R2.HighVel.ToString();
                    tVM_Acc_Home.Text = VariableSys.VelMode_Home_R2.Acc.ToString();
                    tVM_Dec_Home.Text = VariableSys.VelMode_Home_R2.Dec.ToString();
                    break;
                case 6:
                    tVM_Vel_Low_Home.Text = VariableSys.VelMode_Home_Wide.LowVel.ToString();
                    tVM_Vel_High_Home.Text = VariableSys.VelMode_Home_Wide.HighVel.ToString();
                    tVM_Acc_Home.Text = VariableSys.VelMode_Home_Wide.Acc.ToString();
                    tVM_Dec_Home.Text = VariableSys.VelMode_Home_Wide.Dec.ToString();
                    break;
                case 7:
                    tVM_Vel_Low_Home.Text = VariableSys.VelMode_Home_XY.LowVel.ToString();
                    tVM_Vel_High_Home.Text = VariableSys.VelMode_Home_XY.HighVel.ToString();
                    tVM_Acc_Home.Text = VariableSys.VelMode_Home_XY.Acc.ToString();
                    tVM_Dec_Home.Text = VariableSys.VelMode_Home_XY.Dec.ToString();
                    break;
                case 8:
                    break;
            }
        }

        private void bScan_Click(object sender, EventArgs e)
        {
            if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
            {
                tPath_PicSave.Text = folderBrowserDialog.SelectedPath;
                tPath_PicSave.BackColor = Color.Yellow;
            }
        }

        private void bSaveOK_Click(object sender, EventArgs e)
        {
            VariableSys.sPath_PicSave = tPath_PicSave.Text;
            if (rB_None.Checked)
            {
                VariableSys.iPic_SaveIndex = 0;
            }
            if (rB_OK.Checked)
            {
                VariableSys.iPic_SaveIndex = 1;
            }
            if (rB_NG.Checked)
            {
                VariableSys.iPic_SaveIndex = 2;
            }
            if (rB_All.Checked)
            {
                VariableSys.iPic_SaveIndex = 3;
            }
            //记录到INI
            Ini_Sys.IniWriteValue("SaveFile", "PicPath", VariableSys.sPath_PicSave);
            Ini_Sys.IniWriteNumber("SaveFile", "PicSaveIndex", VariableSys.iPic_SaveIndex);
            tPath_PicSave.BackColor = Color.White;
            bSaveOK.BackColor = Color.GreenYellow;
        }

        private void b_P_Manager_Click(object sender, EventArgs e)
        {
            RegistryKey openregedit = Registry.LocalMachine;
            RegistryKey opensystem = openregedit.OpenSubKey("SYSTEM", true);
            RegistryKey opengHostar = opensystem.OpenSubKey("hostar", true);
            String sss1;
            String sss = "";
            if (VariableSys.LanguageFlag == 1)
            {
                sss = Microsoft.VisualBasic.Interaction.InputBox("Input your new password!", "Password Change", "PassWord", 400, 320);
            }
            else
            {
                sss = Microsoft.VisualBasic.Interaction.InputBox("输入您要更改的密码!", "密码更改", "密码", 400, 320);
            }
            if (sss == "")
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Password can not be empty!", "Info");
                }
                else
                {
                    MessageBox.Show("密码输入不能为空", "提示");
                }
                return;
            }
            else
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    sss1 = Microsoft.VisualBasic.Interaction.InputBox("Input your Password again!", "Password Change", "Password", 400, 320);
                }
                else
                {
                    sss1 = Microsoft.VisualBasic.Interaction.InputBox("请再次输入您要更改的密码!", "密码更改", "密码", 400, 320);
                }
                if (sss1 == "")
                {
                    if (VariableSys.LanguageFlag == 1)
                    {
                        MessageBox.Show("Password can not be empty!", "Info");
                    }
                    else
                    {
                        MessageBox.Show("密码输入不能为空,请确认好新密码再次更改！", "提示");
                    }
                    return;
                }
                else
                {
                    if (sss == sss1)//成功
                    {
                        opengHostar.SetValue("admin", sss);
                        if (VariableSys.LanguageFlag == 1)
                        {
                            MessageBox.Show("Change Successfully!", "Info");
                        }
                        else
                        {
                            MessageBox.Show("修改成功！", "提示");
                        }
                    }
                    else
                    {
                        if (VariableSys.LanguageFlag == 1)
                        {
                            MessageBox.Show("Not same Password!", "Info");
                        }
                        else
                        {
                            MessageBox.Show("两次密码输入不一致，请确认好新密码再次更改！", "提示");
                        }
                    }
                }
            }
        }

        private void b_P_OP_Click(object sender, EventArgs e)
        {
            RegistryKey openregedit = Registry.LocalMachine;
            RegistryKey opensystem = openregedit.OpenSubKey("SYSTEM", true);
            RegistryKey opengHostar = opensystem.OpenSubKey("hostar", true);
            String sss1;
            String sss = "";
            if (VariableSys.LanguageFlag == 1)
            {
                sss = Microsoft.VisualBasic.Interaction.InputBox("Input your new password!", "Password Change", "PassWord", 400, 320);
            }
            else
            {
                sss = Microsoft.VisualBasic.Interaction.InputBox("输入您要更改的密码!", "密码更改", "密码", 400, 320);
            }
            if (sss == "")
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Password can not be empty!", "Info");
                }
                else
                {
                    MessageBox.Show("密码输入不能为空", "提示");
                }
                return;
            }
            else
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    sss1 = Microsoft.VisualBasic.Interaction.InputBox("Input your Password again!", "Password Change", "Password", 400, 320);
                }
                else
                {
                    sss1 = Microsoft.VisualBasic.Interaction.InputBox("请再次输入您要更改的密码!", "密码更改", "密码", 400, 320);
                }
                if (sss1 == "")
                {
                    if (VariableSys.LanguageFlag == 1)
                    {
                        MessageBox.Show("Password can not be empty!", "Info");
                    }
                    else
                    {
                        MessageBox.Show("密码输入不能为空,请确认好新密码再次更改！", "提示");
                    }
                    return;
                }
                else
                {
                    if (sss == sss1)//成功
                    {
                        opengHostar.SetValue("OP", sss);
                        if (VariableSys.LanguageFlag == 1)
                        {
                            MessageBox.Show("Change Successfully!", "Info");
                        }
                        else
                        {
                            MessageBox.Show("修改成功！", "提示");
                        }
                    }
                    else
                    {
                        if (VariableSys.LanguageFlag == 1)
                        {
                            MessageBox.Show("Not same Password!", "Info");
                        }
                        else
                        {
                            MessageBox.Show("两次密码输入不一致，请确认好新密码再次更改！", "提示");
                        }
                    }
                }
            }
        }

        private void b_P_Engineer_Click(object sender, EventArgs e)
        {
            RegistryKey openregedit = Registry.LocalMachine;
            RegistryKey opensystem = openregedit.OpenSubKey("SYSTEM", true);
            RegistryKey opengHostar = opensystem.OpenSubKey("hostar", true);
            String sss1;
            String sss = "";
            if (VariableSys.LanguageFlag == 1)
            {
                sss = Microsoft.VisualBasic.Interaction.InputBox("Input your new password!", "Password Change", "PassWord", 400, 320);
            }
            else
            {
                sss = Microsoft.VisualBasic.Interaction.InputBox("输入您要更改的密码!", "密码更改", "密码", 400, 320);
            }
            if (sss == "")
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Password can not be empty!", "Info");
                }
                else
                {
                    MessageBox.Show("密码输入不能为空", "提示");
                }
                return;
            }
            else
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    sss1 = Microsoft.VisualBasic.Interaction.InputBox("Input your Password again!", "Password Change", "Password", 400, 320);
                }
                else
                {
                    sss1 = Microsoft.VisualBasic.Interaction.InputBox("请再次输入您要更改的密码!", "密码更改", "密码", 400, 320);
                }
                if (sss1 == "")
                {
                    if (VariableSys.LanguageFlag == 1)
                    {
                        MessageBox.Show("Password can not be empty!", "Info");
                    }
                    else
                    {
                        MessageBox.Show("密码输入不能为空,请确认好新密码再次更改！", "提示");
                    }
                    return;
                }
                else
                {
                    if (sss == sss1)//成功
                    {
                        opengHostar.SetValue("engineer", sss);
                        if (VariableSys.LanguageFlag == 1)
                        {
                            MessageBox.Show("Change Successfully!", "Info");
                        }
                        else
                        {
                            MessageBox.Show("修改成功！", "提示");
                        }
                    }
                    else
                    {
                        if (VariableSys.LanguageFlag == 1)
                        {
                            MessageBox.Show("Not same Password!", "Info");
                        }
                        else
                        {
                            MessageBox.Show("两次密码输入不一致，请确认好新密码再次更改！", "提示");
                        }
                    }
                }
            }
        }

        private void bRecord1_Click(object sender, EventArgs e)
        {
            int selectR = this.cbxSelectR.SelectedIndex;
            R_RunParam rParam = this.R_RunParamMap[(uint)selectR];
            tR1InitDeg.Text = rParam.Pos.ToString();
            rParam.InitPos = rParam.Pos;
        }

        private void bRecrodZ_Click(object sender, EventArgs e)
        {
            int selectR = this.cbxSelectR.SelectedIndex;
            Z_RunParam zParam = this.Z_RunParamMap[(uint)selectR];
            tZSafeHeight.Text = zParam.Pos.ToString();
            zParam.SafeHeigh = zParam.Pos;
        }

        private void bRecrod3_Click(object sender, EventArgs e)
        {
            if (tSSL_UserStatus.Text != "Manager" && tSSL_UserStatus.Text != "管理")
            {
                Form_Password fm_Password = new Form_Password();//密码提示
                Variable.PassWordOK = 1;//密码确认 1-密码错误 2-管理员密码正确 3-工程师密码正确 4-操作员密码正确
                //当前产品统计
                fm_Password.StartPosition = FormStartPosition.CenterScreen;
                fm_Password.TopMost = true;
                fm_Password.ShowDialog();//模式对话框打开
                if (Variable.PassWordOK != 2)
                {
                    return;
                }
                else
                {
                    if (VariableSys.LanguageFlag == 1)
                    {
                        PutInLog("Manager log in");
                        tSSL_UserStatus.Text = "Manager";
                    }
                    else
                    {
                        PutInLog("进入管理模式");
                        tSSL_UserStatus.Text = "管理";
                    }
                    gB_Manage.Visible = true;
                    lSafeDoorEN.Visible = true;
                    int selectR = this.cbxSelectR.SelectedIndex;
                    Z_RunParam zParam = this.Z_RunParamMap[(uint)selectR];
                    tPasteHeight.Text = zParam.Pos.ToString();
                    zParam.PasteHeight = zParam.Pos;
                    this.bRecrod3.BackColor = Color.GreenYellow;
                }
            }
            else
            {
                int selectR = this.cbxSelectR.SelectedIndex;
                Z_RunParam zParam = this.Z_RunParamMap[(uint)selectR];
                tPasteHeight.Text = zParam.Pos.ToString();
                zParam.PasteHeight = zParam.Pos;
                this.bRecrod3.BackColor = Color.GreenYellow;
            }

        }

        private void bRecrodCamZPos_Click(object sender, EventArgs e)
        {
            int selectR = this.cbxSelectR.SelectedIndex;
            Z_RunParam zParam = this.Z_RunParamMap[(uint)selectR];
            tCamZPos.Text = zParam.Pos.ToString();
            zParam.CamHeigh = zParam.Pos;
        }

        private void bConfirmOption_Click(object sender, EventArgs e)
        {
            if (!PasswdCheck()) return;

            string s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;
            string s12, s13, s14, s15, s16, s17, s18, s19;
            double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11;
            double d12, d13, d14, d15, d16, d17, d18, d19;
            double d20, d21, d22, d23, d24, d25, d26, d27;
            short ThrowTime = 0;
            #region GetValue
            s14 = tThrowPoint1X.Text;
            s15 = tThrowPoint1Y.Text;

            s19 = tReachDelay.Text;
            s4 = tXI2OKDelay.Text;
            s5 = tXIOKDelay.Text;
            s6 = tXIRetryTime.Text;

            s7 = tTimeOut_Feeder.Text;
            s8 = tTimeOut_Flow.Text;
            s9 = tVisionMaxOffsetX.Text;
            s10 = tVisionMaxOffsetY.Text;
            s11 = tVisionMaxOffsetR.Text;

            #endregion
            try
            {
                ThrowTime = short.Parse(tThrowTime.Text);

                d4 = double.Parse(s4);
                d5 = double.Parse(s5);
                d6 = double.Parse(s6);
                d7 = double.Parse(s7);
                d8 = double.Parse(s8);
                d9 = double.Parse(s9);
                d10 = double.Parse(s10);
                d11 = double.Parse(s11);

                d14 = double.Parse(s14);
                d15 = double.Parse(s15);

                d19 = double.Parse(s19);
                VariableSys.dTurnPasteAngle = double.Parse(this.tTurnPasteAngle.Text);
                VariableSys.dTurnXIAngle = double.Parse(this.tTurnXIAngle.Text);

                VariableSys.dXSafeMinX = double.Parse(this.tMinXSafe.Text);
                VariableSys.dXSafeMaxX = double.Parse(this.tMaxXSafe.Text);

                //Pressure
                VariableSys.iUpCamDelay = short.Parse(tUpCamDelay.Text);
                VariableSys.iDownCamDelay = short.Parse(tDownCamDelay.Text);
                VariableSys.iDelayReached = int.Parse(tReachedDelay.Text);
                VariableSys.iThrowAlarmTime = short.Parse(tThrowAlarmTime.Text);
                VariableSys.iThrowAlarmAddTime = int.Parse(tThrowAlarmAddTime.Text);
                VariableSys.iSuckAlarmTime = int.Parse(tSuckAlarmTime.Text);
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("输入数值有误！");
                }
                return;
            }
            #region setvalue
            VariableSys.iThrowTime = ThrowTime;

            VariableSys.iDelayReach = (short)d19;
            VariableSys.iDelay_BeforeXI = (short)d4;
            VariableSys.iDelay_XIOK = (short)d5;
            VariableSys.iXIRetry = (short)d6;

            VariableSys.iTimeOut_Feeder = d7;
            VariableSys.iTimeOut_Normal = d8;
            VariableSys.dMaxOffsetX = d9;
            VariableSys.dMaxOffsetY = d10;
            VariableSys.dMaxOffsetR = d11;

            VariableSys.bEnableAsyncXI = this.cbxEnableAnscXI.Checked;
            VariableSys.bEnableGlassOffset = this.cb_EnableGlassOffset.Checked;
            VariableSys.bEnableVaccumCheck = this.cb_EnableCheck.Checked;
            VariableSys.bEnableLineOffset = this.cbLineOffset.Checked;
            VariableSys.bEnableThrowPut = this.cbThrowPut.Checked;

            for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
            {
                this.Z_RunParamMap[i].ThrowPoint1.X = (float)d14;
                this.Z_RunParamMap[i].ThrowPoint1.Y = (float)d15;
            }

            #endregion

            #region write ini
            Ini_Sys.IniWriteNumber("TimeOut", "ThrowKeepTime", VariableSys.iThrowTime);

            Ini_Sys.IniWriteNumber("TurnConfig", "PasteAngle", VariableSys.dTurnPasteAngle);
            Ini_Sys.IniWriteNumber("TurnConfig", "XIAngle", VariableSys.dTurnXIAngle);
            Ini_Sys.IniWriteNumber("TurnConfig", "XSafeMinX", VariableSys.dXSafeMinX);
            Ini_Sys.IniWriteNumber("TurnConfig", "XSafeMaxX", VariableSys.dXSafeMaxX);

            for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
            {
                Z_RunParam zParam = this.Z_RunParamMap[i];
                Ini_Sys.IniWriteNumber("Position", string.Format("ThrowPoint{0}_1X", i + 1), zParam.ThrowPoint1.X);
                Ini_Sys.IniWriteNumber("Position", string.Format("ThrowPoint{0}_1Y", i + 1), zParam.ThrowPoint1.Y);

                Ini_Sys.IniWriteNumber("Position", string.Format("Init_R{0}_Deg", i + 1), this.R_RunParamMap[i].InitPos);
                Ini_Sys.IniWriteNumber("Position", $"SafeHeightZ{i + 1}", this.Z_RunParamMap[i].SafeHeigh);
                Ini_Sys.IniWriteNumber("Position", $"CamHeightZ{i + 1}", this.Z_RunParamMap[i].CamHeigh);
                Ini_Sys.IniWriteNumber("Position", $"PasteHeightZ{i + 1}", this.Z_RunParamMap[i].PasteHeight);
                Ini_Sys.IniWriteNumber("Position", $"ThrowHeightZ{i + 1}", this.Z_RunParamMap[i].ThrowHeight);
            }

            Ini_Sys.IniWriteNumber("TimeOut", "ReachDelay", VariableSys.iDelayReach);
            Ini_Sys.IniWriteNumber("TimeOut", "XIdelay", VariableSys.iDelay_BeforeXI);
            Ini_Sys.IniWriteNumber("TimeOut", "XIOKdelay", VariableSys.iDelay_XIOK);
            Ini_Sys.IniWriteNumber("TimeOut", "XIRetry", VariableSys.iXIRetry);
            Ini_Sys.IniWriteNumber("TimeOut", "FeederTimeout", VariableSys.iTimeOut_Feeder);
            Ini_Sys.IniWriteNumber("TimeOut", "NormalTimeout", VariableSys.iTimeOut_Normal);
            Ini_Sys.IniWriteNumber("TimeOut", "ReachedDelay", VariableSys.iDelayReached);
            Ini_Sys.IniWriteNumber("TimeOut", "UpCamDelay", VariableSys.iUpCamDelay);
            Ini_Sys.IniWriteNumber("TimeOut", "DownCamDelay", VariableSys.iDownCamDelay);
            Ini_Sys.IniWriteNumber("TimeOut", "ThrowAlarmTime", VariableSys.iThrowAlarmTime);
            Ini_Sys.IniWriteNumber("TimeOut", "ThrowAlarmAddTime", VariableSys.iThrowAlarmAddTime);
            Ini_Sys.IniWriteNumber("TimeOut", "SuckAlarmTime", VariableSys.iSuckAlarmTime);

            Ini_Sys.IniWriteNumber("RunOption", "MaxOffsetX", VariableSys.dMaxOffsetX);
            Ini_Sys.IniWriteNumber("RunOption", "MaxOffsetY", VariableSys.dMaxOffsetY);
            Ini_Sys.IniWriteNumber("RunOption", "MaxOffsetR", VariableSys.dMaxOffsetR);

            Ini_Sys.IniWriteValue("RunOption", "EnableAsyncXI", VariableSys.bEnableAsyncXI.ToString());
            Ini_Sys.IniWriteValue("RunOption", "EnableGlassOffset", VariableSys.bEnableGlassOffset.ToString());
            Ini_Sys.IniWriteValue("RunOption", "EnableVacuumCheck", VariableSys.bEnableVaccumCheck.ToString());
            Ini_Sys.IniWriteBool("RunOption", "EnableLineOffset", VariableSys.bEnableLineOffset);
            Ini_Sys.IniWriteBool("RunOption", "EnableThrowPut", VariableSys.bEnableThrowPut);

            Ini_Sys.IniWriteNumber("RunOption", "SafeDoorEN", VariableSys.bSafeDoorEN == false ? 0 : 1);
            Ini_Sys.IniWriteNumber("RunOption", "AfterBreakEN", VariableSys.bAfterBreakEN == false ? 0 : 1);
            Ini_Sys.IniWriteNumber("RunOption", "SystemIsOnLine", VariableSys.bSystemIsOnLine == false ? 0 : 1);
            Ini_Sys.IniWriteNumber("RunOption", "FlowIN_OUT", VariableSys.dFlowIN_OUT);
            Ini_Sys.IniWriteNumber("RunOption", "OutSideBadMarkEN", VariableSys.iOutSideBadMark);

            Ini_Sys.IniWriteNumber("RunOption", "PressureEN", VariableSys.bPressureEN == false ? 0 : 1);
            Ini_Sys.IniWriteNumber("RunOption", "AxisPosSource", VariableSys.iAxisSource);
            #endregion

            bConfirmOption.BackColor = Color.GreenYellow;
            this.bRecrod3.BackColor = Color.White;
        }

        private void bConfirmOption_MouseDown(object sender, MouseEventArgs e)
        {
            bConfirmOption.BackColor = Color.Transparent;
        }

        private void bthrow1_Click(object sender, EventArgs e)
        {
            tThrowPoint1X.Text = this.XYPos.X.ToString();
            tThrowPoint1Y.Text = this.XYPos.Y.ToString();
        }

        private void bVM_OK_Con_Click(object sender, EventArgs e)
        {
            double temp_lowvel, temp_highvel, temp_acc, temp_dec;
            string str1, str2, str3, str4;
            str1 = tVM_Vel_Low_Con.Text;
            str2 = tVM_Vel_High_Con.Text;
            str3 = tVM_Acc_Con.Text;
            str4 = tVM_Dec_Con.Text;
            try
            {
                temp_lowvel = Convert.ToDouble(str1);
                temp_highvel = Convert.ToDouble(str2);
                temp_acc = Convert.ToDouble(str3);
                temp_dec = Convert.ToDouble(str4);
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("输入数值有误！");
                }
                return;
            }

            switch (comboBox_Vel_Con.SelectedIndex)
            {
                case 0:
                    VariableSys.VelMode_Conveyor.LowVel = temp_lowvel;
                    VariableSys.VelMode_Conveyor.HighVel = temp_highvel;
                    VariableSys.VelMode_Conveyor.Acc = temp_acc;
                    VariableSys.VelMode_Conveyor.Dec = temp_dec;
                    Ini_Sys.IniWriteNumber("VelMode", "RunMode_LowVel_Con", VariableSys.VelMode_Conveyor.LowVel);
                    Ini_Sys.IniWriteNumber("VelMode", "RunMode_HighVel_Con", VariableSys.VelMode_Conveyor.HighVel);
                    Ini_Sys.IniWriteNumber("VelMode", "RunMode_Acc_Con", VariableSys.VelMode_Conveyor.Acc);
                    Ini_Sys.IniWriteNumber("VelMode", "RunMode_Dec_Con", VariableSys.VelMode_Conveyor.Dec);
                    break;
                case 1:
                    VariableSys.VelMode_Conveyor_SlowDown.LowVel = temp_lowvel;
                    VariableSys.VelMode_Conveyor_SlowDown.HighVel = temp_highvel;
                    VariableSys.VelMode_Conveyor_SlowDown.Acc = temp_acc;
                    VariableSys.VelMode_Conveyor_SlowDown.Dec = temp_dec;
                    Ini_Sys.IniWriteNumber("VelMode", "SlowMode_LowVel_Con", VariableSys.VelMode_Conveyor_SlowDown.LowVel);
                    Ini_Sys.IniWriteNumber("VelMode", "SlowMode_HighVel_Con", VariableSys.VelMode_Conveyor_SlowDown.HighVel);
                    Ini_Sys.IniWriteNumber("VelMode", "SlowMode_Acc_Con", VariableSys.VelMode_Conveyor_SlowDown.Acc);
                    Ini_Sys.IniWriteNumber("VelMode", "SlowMode_Dec_Con", VariableSys.VelMode_Conveyor_SlowDown.Dec);
                    break;
            }
            bVM_OK_Con.BackColor = Color.GreenYellow;
        }

        private void comboBox_Vel_Con_SelectedIndexChanged(object sender, EventArgs e)
        {
            switch (comboBox_Vel_Con.SelectedIndex)
            {
                case 0:
                    tVM_Vel_Low_Con.Text = VariableSys.VelMode_Conveyor.LowVel.ToString();
                    tVM_Vel_High_Con.Text = VariableSys.VelMode_Conveyor.HighVel.ToString();
                    tVM_Acc_Con.Text = VariableSys.VelMode_Conveyor.Acc.ToString();
                    tVM_Dec_Con.Text = VariableSys.VelMode_Conveyor.Dec.ToString();
                    break;
                case 1:
                    tVM_Vel_Low_Con.Text = VariableSys.VelMode_Conveyor_SlowDown.LowVel.ToString();
                    tVM_Vel_High_Con.Text = VariableSys.VelMode_Conveyor_SlowDown.HighVel.ToString();
                    tVM_Acc_Con.Text = VariableSys.VelMode_Conveyor_SlowDown.Acc.ToString();
                    tVM_Dec_Con.Text = VariableSys.VelMode_Conveyor_SlowDown.Dec.ToString();
                    break;
            }
        }

        #endregion

        #region 烧机模式
        private void bSet1_Click(object sender, EventArgs e)
        {
            VariableSys.pTest1 = this.XYPos;
            tTest1X.Text = VariableSys.pTest1.X.ToString();
            tTest1Y.Text = VariableSys.pTest1.Y.ToString();
            Ini_Sys.IniWriteNumber("Position", "TestP1X", VariableSys.pTest1.X);
            Ini_Sys.IniWriteNumber("Position", "TestP1Y", VariableSys.pTest1.Y);
        }

        private void bSet2_Click(object sender, EventArgs e)
        {
            VariableSys.pTest2 = this.XYPos;
            tTest2X.Text = VariableSys.pTest2.X.ToString();
            tTest2Y.Text = VariableSys.pTest2.Y.ToString();
            Ini_Sys.IniWriteNumber("Position", "TestP2X", VariableSys.pTest2.X);
            Ini_Sys.IniWriteNumber("Position", "TestP2Y", VariableSys.pTest2.Y);
        }

        private void bSet3_Click(object sender, EventArgs e)
        {
            VariableSys.pTest3 = this.XYPos;
            tTest3X.Text = VariableSys.pTest3.X.ToString();
            tTest3Y.Text = VariableSys.pTest3.Y.ToString();

            Ini_Sys.IniWriteNumber("Position", "TestP3X", VariableSys.pTest3.X);
            Ini_Sys.IniWriteNumber("Position", "TestP3Y", VariableSys.pTest3.Y);
        }

        private void bSet4_Click(object sender, EventArgs e)
        {
            VariableSys.pTest4 = this.XYPos;
            tTest4X.Text = VariableSys.pTest4.X.ToString();
            tTest4Y.Text = VariableSys.pTest4.Y.ToString();

            Ini_Sys.IniWriteNumber("Position", "TestP4X", VariableSys.pTest4.X);
            Ini_Sys.IniWriteNumber("Position", "TestP4Y", VariableSys.pTest4.Y);
        }

        private void bTestON_Click(object sender, EventArgs e)
        {
            if (this.All_ZGoSafeTillStop(2000, VariableSys.VelMode_Debug_Manual))
            {
                if (XYGoPosTillStop(30000, VariableSys.pReadyPoint, VariableSys.VelMode_Current_Manual) == 0)
                {
                    if (Turn.GoPosTillStop(30000, VariableSys.dTurnXIAngle, VariableSys.VelMode_Current_Manual) == 0)
                    {
                        bTest = true;
                        Thread Thread_DryRun = new Thread(new ThreadStart(thread_DryRun));
                        Thread_DryRun.Start();
                    }
                    else
                    {
                        MessageBox.Show("翻转轴 放下 超时!!!");
                    }
                }
                else
                {
                    MessageBox.Show("XY到翻转位 超时!!!");
                }
            }
            else
            {
                MessageBox.Show("Z轴回原点超时!!!");
            }
        }

        private void bTestPathON_Click(object sender, EventArgs e)
        {
            bTest = true;
            Thread Thread_DryRun = new Thread(new ThreadStart(thread_DryPathRun));
            Thread_DryRun.Start();
        }

        private void bTestOFF_Click(object sender, EventArgs e)
        {
            bTest = false;
        }
        #endregion

        #region 主界面操作
        //private void bClearData_Click(object sender, EventArgs e)
        //{
        //    //VariableSys.iProductCount = 0;//产品总数
        //    //VariableSys.iUpCCD_OK = 0;//上相机OK数目
        //    //VariableSys.iUpCCD_Total = 0;//上相机总数目
        //    //VariableSys.iDownCCD_OK = 0;//下相机OK数目
        //    //VariableSys.iDownCCD_Total = 0;//下相机总数目

        //    //Ini_Sys.IniWriteNumber("Statistics", "Total", VariableSys.iProductCount);
        //    //Ini_Sys.IniWriteNumber("Statistics", "UpCCDTotal", VariableSys.iUpCCD_Total);
        //    //Ini_Sys.IniWriteNumber("Statistics", "UpCCDOK", VariableSys.iUpCCD_OK);
        //    //Ini_Sys.IniWriteNumber("Statistics", "DownCCDTotal", VariableSys.iDownCCD_Total);
        //    //Ini_Sys.IniWriteNumber("Statistics", "DownCCDOK", VariableSys.iDownCCD_OK);
        //}

        private void bExit_Click(object sender, EventArgs e)
        {
            StatisticsHelper.Instance.Refresh();
            //Ini_Sys.IniWriteNumber("Statistics", "Total", VariableSys.iProductCount);
            //Ini_Sys.IniWriteNumber("Statistics", "UpCCDTotal", VariableSys.iUpCCD_Total);
            //Ini_Sys.IniWriteNumber("Statistics", "UpCCDOK", VariableSys.iUpCCD_OK);
            //Ini_Sys.IniWriteNumber("Statistics", "DownCCDTotal", VariableSys.iDownCCD_Total);
            //Ini_Sys.IniWriteNumber("Statistics", "DownCCDOK", VariableSys.iDownCCD_OK);
            DialogResult dialogresult;
            if (VariableSys.LanguageFlag == 1)
            {
                dialogresult = MessageBox.Show("Quit？", "Quit", MessageBoxButtons.OKCancel, MessageBoxIcon.Information);
            }
            else
            {
                dialogresult = MessageBox.Show("确定要退出程序吗？", "退出程序", MessageBoxButtons.OKCancel, MessageBoxIcon.Information);
            }

            if (dialogresult == DialogResult.Cancel)
            {
                return;
            }
            bSystemExit = true;
            Thread.Sleep(200);
            Ini_Sys.IniWriteNumber("RunOption", "XI_LeftIndex", XI_IndexG[0]);
            Ini_Sys.IniWriteNumber("RunOption", "XI_RightIndex", XI_IndexG[1]);
            try
            {
                LightOFF_D();
                LightOFF_U();
                Close_LightUp(VariableSys.LightUpVendor);
                Close_LightDown(VariableSys.LightDownVendor);
                LightOFF_D();
                LightOFF_U();
                CloseBtnLight(0);
                CloseBtnLight(1);
                CloseBtnLight(2);
                CloseBtnLight(3);

                this.Close_ConveyorXI();
                this.StopAllAxis();
                this.CarryProduct_OFF();
                this.StopProduct_OFF();
                for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
                {
                    this.Z_RunParamMap[i].XI_vaccum.ResetIO();
                    this.Z_RunParamMap[i].PO_vaccum.ResetIO();
                }

                IO.IOManager.Instance.ResetAllOut();
                Axis_RunParam.CardInit(Variable.sPath_Adt_Configure, Variable.sPath_Adt_Configure2);
                Axis_RunParam.CardClose();
                CameraDefine.Instance[CAM.Bottom1]._Session.Dispose();
                CameraDefine.Instance[CAM.Top]._Session.Dispose();
            }
            catch
            { }

            fm.Close();
            Application.Exit();
            Environment.Exit(0);
        }

        private void cB_Alarm_CheckedChanged(object sender, EventArgs e)
        {
            Ini_Sys.IniWriteValue("RunOption", "NoiseIgnore", bAlrmIgnore == true ? "1" : "0");
        }

        private bool CycleStop = false;
        private bool CycleRun = false;
        //todo 运行按钮
        private void bAutoRun_Click(object sender, EventArgs e)
        {
            this.CloseBtnLight(0);
            if (VariableSys.sProgramName == "")
            {
                MessageBox.Show("请加载程序！", "提示");
                return;
            }

            if (VariableSys.bEnableGlassOffset && !GlassHelper.IsLoaded)
            {
                MessageBox.Show("请等待机械校验数据加载完成再运行!!!");
                return;
            }

            if (this.FlowIndex <= 100 && bArr_IO_IN_Status.bIN_WorkSpace_Out)
            {
                MessageBox.Show("出板口有板，不可重新进板!!!");
                return;
            }

            this.ClosedFD[0] = this.cbLeftFD.Checked;
            this.ClosedFD[1] = this.cbRightFD.Checked;

            VariableSys.bSafeDoorEN = true;

            if (bMachineAlarm)
            {
                MessageBox.Show("机台报警,请复位后再试！", "提示");
                return;
            }

            this.WhetherStartPoint = false;

            if (FlowIndex == 0 && MessageBox.Show("是否 指定 贴附 起始位置", "提示", MessageBoxButtons.YesNo) == DialogResult.Yes)
            {
                //! frm show
                fmIputStartPos fmInput = new fmIputStartPos(ref JOB);
                if (fmInput.ShowDialog() == DialogResult.Yes)
                {
                    this.WhetherStartPoint = true;
                    this.StartPanel = fmInput.StartPanel;
                    this.StartPaste = fmInput.StartPaste;
                    fmInput.Dispose();
                }
                else
                {
                    fmInput.Dispose();
                    return;
                }

                this.FlowDoneIndex = 0;
            }

            // 如果暂停在飞拍的时候 重飞
            if (this.FlowIndex == 20020 || this.FlowIndex == 20021)
            {
                this.FlowIndex = 20000;
                this.FlowInit = false;
            }

            // 翻转轴到
            if (VariableSys.machineVersion == 2)
                this.FlowIndex = 10100;

            //安全位置
            if (!this.All_ZReachOrg())
            {
                this.All_ZGoSafe(VariableSys.VelMode_Debug_Manual);
                MessageBox.Show("待 Z1Z2 复位到安全位置停止后再启动", "提示");
                return;
            }

            foreach (CAM cam in Enum.GetValues(typeof(CAM)))
            {
                if (cam == CAM.Bottom1 || cam == CAM.Bottom2)
                {
                    try
                    {
                        CameraDefine.Instance[cam]._Session.Acquisition.Unconfigure();
                        CameraDefine.Instance[cam]._Session.ConfigureGrab();
                    }
                    catch
                    {
                        MessageBox.Show($"${cam} 相机打开失败!!! 请检查软件内存");
                        return;
                    }
                }
            }

            gB_FeederLeft.Enabled = false;
            gB_FeederRight.Enabled = false;
            gB_Reset.Enabled = false;
            bExit.Enabled = false;
            pMode_Login.Enabled = false;
            pMode_Calibration.Enabled = false;
            pMode_PASTE.Enabled = true;
            pMode_Manual.Enabled = false;
            pMode_SysSet.Enabled = false;
            this.panel29.Enabled = false;
            this.bSelectPasteRegion.Enabled = false;
            bAutoRun.BackColor = Color.Green;
            bAutoSinglePause.BackColor = Color.Transparent;
            bAutoRun.Enabled = false;
            bAutoSinglePause.Enabled = true;
            bByPASS.Enabled = false;
            bByPASS.BackColor = Color.Transparent;
            if (cbCycleRun.Checked)
            {
                cB_EnableReset.Checked = false;
            }
            RestartStopwatch();

            StopWatch_FlowIndex.Start();
            StopWatch_FlowIndex_Conveyor.Start();

            // 上视觉是否要飞拍
            if (JOB.bUpFly)
            {
                if (RUN_PASTEInfo.Length > 0)
                {
                    this.SetTrigger(true, CAM.Top);
                    this.SetShutter((int)RUN_PASTEInfo[0].Shutter1, CAM.Top);
                    this.RUN_UpFlyMark = OptimizePath();
                }
                else
                {
                    MessageBox.Show("上视觉飞拍程序错误，请检查！！！");
                    return;
                }
            }

            CycleStop = this.bCycleStop.Checked;
            CycleRun = this.cbCycleRun.Checked;
            if(this.FlowIndex_Conveyor == 100)
                this.InformBeforeGive();
            
            if (this.FlowIndex_Conveyor != 100 && this.T_ConveyorIsRun) // 继续激活轨道 根据上一次暂停前状态
                ConveyorJog(this.T_ConveyorRunDir);

            StatisticsHelper.Instance.Reoprt.Start(TimeDefine.ProductTime, $"生产[{VariableSys.sProgramName}]");
            RunMode = 1;
            
            this.OpenBtnLight(3);
        }

        public bool PasswdCheck()
        {
            fmPasswdCheck fmPasswd = new fmPasswdCheck();
            if (fmPasswd.ShowDialog() == DialogResult.OK)
                return true;
            else
            {
                MessageBox.Show("密码错误操作失败!!!");
                return false;
            }
        }

        private void bByPASS_Click(object sender, EventArgs e)
        {
            if (!PasswdCheck()) return;

             //在安全位置时候 BYPASS
            if (this.All_ZReachOrg())
            {
                if (VariableSys.dFlowIN_OUT != 1 && VariableSys.dFlowIN_OUT != 2)
                {
                    MessageBox.Show("ByPass 模式下必须为 左进右出 或者 右进左出!", "提示");
                    return;
                }

                if(this.FlowIndex_Conveyor != 100 && this.T_ConveyorRunDir)
                {
                    this.ConveyorJog(this.T_ConveyorRunDir);
                }

                //FlowInit_Conveyor = false;
                FlowIndex_Conveyor = this.FlowIndex_Conveyor_Done;
                RunMode = 3;
                bExit.Enabled = true;
                pMode_Login.Enabled = true;
                pMode_Calibration.Enabled = true;
                pMode_PASTE.Enabled = true;
                pMode_Manual.Enabled = true;
                pMode_SysSet.Enabled = true;

                bAutoRun.BackColor = Color.Transparent;
                bAutoSinglePause.BackColor = Color.Transparent;
                bAutoRun.Enabled = false;
                bAutoSinglePause.Enabled = true;
                bByPASS.Enabled = false;
                bByPASS.BackColor = Color.Green;
                gB_Reset.Enabled = false;
                gB_FeederLeft.Enabled = true;
                gB_FeederRight.Enabled = true;

                GC.Collect();
            }
            else
            {
                MessageBox.Show("请先清料或等待清料完成", "提示");
            }
        }

        private void bReset_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("是否开始机器 回原点!", "提示", MessageBoxButtons.YesNo) == DialogResult.Yes)
            {
                if (MessageBox.Show("翻转头 是否 在安全位置!!", "提示", MessageBoxButtons.YesNo) == DialogResult.Yes)
                {
                    JOB.bCalMark = false;
                    this.PanelAlarmed = false;

                    #region 回原点
                    //轨道停止
                    ConveyorStop();
                    //Stop上升
                    StopProduct_OFF();
                    //夹板上升
                    CarryProduct_OFF();
                    if (VariableSys.LanguageFlag == 1)
                    {
                        MessageBox.Show("Pls confirm no product inside the Machine!", "Info");
                        MessageBox.Show("Start reseting!", "Info");
                    }
                    else
                    {
                        MessageBox.Show("请确认机台轨道内无产品!", "提示");
                        MessageBox.Show("机台开始回零!", "提示");
                    }

                    rtn = AxisGoHome(5 * 60 * 1000);

                    if (rtn != 0)
                    {
                        if (VariableSys.LanguageFlag == 1)
                        {
                            MessageBox.Show("Reset Fail!", "Info");
                            PutInLog("Machine Reset Fail");
                        }
                        else
                        {
                            MessageBox.Show("机台回零失败!", "提示");
                            PutInLog("机台回零失败");
                        }
                        return;
                    }
                    else
                    {
                        //走到待料位置
                        XYGoPosTillStopNoSafeHeight(30000, VariableSys.pReadyPoint, VariableSys.VelMode_Slow_Manual);

                        this.All_ZResetVaccm();
                        this.All_ZReachOrg();
                        XI_IndexG[0] = 0;
                        XI_IndexG[1] = 0;

                        RUN_bPasteOK = false;
                        RUN_bReachOK = false;

                        for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
                        {
                            this.Z_RunParamMap[i].ResetAutoRunParam();
                        }

                        FlowIndex = 0;
                        FlowDoneIndex = 0;
                        FlowIndex_Conveyor = 100;
                        FlowIndex_Conveyor_Done = 100;
                        FlowInit = false;
                        FlowInit_Conveyor = false;
                        bMachineAlarm = false;
                    }
                    #endregion
                }
            }
        }

        private void bClear_Click(object sender, EventArgs e)
        {
            if (bMachineAlarm)
            {
                return;
            }
            if (MessageBox.Show("是否开始清料!", "提示", MessageBoxButtons.YesNo) == DialogResult.Yes)
            {
                this.PanelAlarmed = false;
                #region 清零
                RUN_bPasteOK = false;
                RUN_bReachOK = false;
                JOB.bCalMark = false;
                this.ResetInformBeforeGive();
                for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
                {
                    this.Z_RunParamMap[i].ResetAutoRunParam();
                }

                FlowIndex = 0;
                FlowDoneIndex = 0;
                FlowIndex_Conveyor = 100;
                FlowIndex_Conveyor_Done = 100;

                FlowInit = false;
                FlowInit_Conveyor = false;
                //轨道停止
                ConveyorStop();

                //关闭轨道吹气
                Close_ConveyorXI();

                //Stop 下来
                StopProduct_OFF();
                //夹板 下来
                CarryProduct_OFF();
                MessageBox.Show("Pls be outside!");
                Thread Thread_Clear = new Thread(new ThreadStart(thread_Clear));
                Thread_Clear.Start();
                #endregion
            }
        }

        private void cB_EnableReset_CheckedChanged(object sender, EventArgs e)
        {
            bReset.Enabled = cB_EnableReset.Checked;
            bClear.Enabled = cB_EnableReset.Checked;
            cbCycleRun.Enabled = cB_EnableReset.Checked;
        }
        //todo 暂停按钮
        private void bAutoSinglePause_Click(object sender, EventArgs e)
        {
            RunMode = 2;
            if (RUN_AlarmInfo[0] == 0)
                StatisticsHelper.Instance.Reoprt.Start(TimeDefine.PauseTime, "暂停");
            this.T_ConveyorIsRun = this.ConveyorIsRun;
            this.T_ConveyorRunDir = this.ConveyorRunDir;

            ConveyorStop();

           this.ResetInformBeforeGive();
            
            StopWatch_FlowIndex.Stop();
            StopWatch_FlowIndex_Conveyor.Stop();
            this.CloseBtnLight(3);

            if (this.FlowIndex != 10100 && this.FlowIndex != 10101)
            {
                this.FlowDoneIndex = this.FlowIndex;
            }

            bExit.Enabled = true;
            pMode_Login.Enabled = true;
            pMode_Calibration.Enabled = true;
            pMode_PASTE.Enabled = true;
            pMode_Manual.Enabled = true;
            pMode_SysSet.Enabled = true;

            bAutoRun.BackColor = Color.Transparent;
            bAutoSinglePause.BackColor = Color.Red;
            bAutoRun.Enabled = true;
            bAutoSinglePause.Enabled = false;
            bByPASS.Enabled = true;
            bByPASS.BackColor = Color.Transparent;
            gB_Reset.Enabled = true;
            gB_FeederLeft.Enabled = true;
            gB_FeederRight.Enabled = true;
            this.panel29.Enabled = true;
            this.bSelectPasteRegion.Enabled = true;

            foreach (CAM camera in Enum.GetValues(typeof(CAM)))
            {
                if (CameraDefine.Instance.Config.ContainsKey(camera))
                {
                    this.SetTrigger(false, camera);
                    CameraDefine.Instance[camera]._Session.Acquisition.Unconfigure();
                }
            }

            GC.Collect();

            this.OpenBtnLight(0);

            X.SetComapreData(0, 1, 0, 0, 0, 5);//取消飞拍
            Y.SetComapreData(0, 1, 0, 0, 0, 5);//取消飞拍
        }

        private void bLabelLeftClear_Click(object sender, EventArgs e)
        {
            XI_IndexG[0] = 0;
            Ini_Sys.IniWriteNumber("RunOption", "XI_LeftIndex", XI_IndexG[0]);
        }

        private void bLabelRightClear_Click(object sender, EventArgs e)
        {
            XI_IndexG[1] = 0;
            Ini_Sys.IniWriteNumber("RunOption", "XI_RightIndex", XI_IndexG[1]);
        }

        private void bLabelLeftSet_Click(object sender, EventArgs e)
        {
            double a = 0;
            try
            {
                a = double.Parse(tLabelLeftIndex.Text);
            }
            catch
            {
                tLabelLeftIndex.BackColor = Color.Yellow;
                return;
            }
            if (a < 0 || a >= Feeder[0].PointCount)
            {
                tLabelLeftIndex.BackColor = Color.Yellow;
            }
            else
            {
                XI_IndexG[0] = (short)a;
                tLabelLeftIndex.BackColor = Color.White;
            }
        }

        private void bLabelRightSet_Click(object sender, EventArgs e)
        {
            double a = 0;
            try
            {
                a = double.Parse(tLabelRightIndex.Text);
            }
            catch
            {
                tLabelRightIndex.BackColor = Color.Yellow;
                return;
            }
            if (a < 0 || a >= Feeder[1].PointCount)
            {
                tLabelRightIndex.BackColor = Color.Yellow;
            }
            else
            {
                XI_IndexG[1] = (short)a;
                tLabelRightIndex.BackColor = Color.White;
            }
        }
        #endregion

        #region 贴附信息界面
        //MARK点
        private void bCreateProgram_Click(object sender, EventArgs e)
        {
            tabControl1.TabPages.Remove(tP_Paste);
            string productTempName = "";

            productTempName = Microsoft.VisualBasic.Interaction.InputBox("输入您要增加贴附信息(PCB或者标签)的名称!", "新增贴附信息", "贴附信息", 400, 320);
            if (productTempName == "")
            {
                MessageBox.Show("贴附信息不能为空!", "提示");
                return;
            }
            else
            {
                cB_PasteType.Enabled = false;
                //根据选择的模式
                if (cB_PasteType.SelectedIndex == 0)//PCB Up
                {
                    panel_Label.Visible = false;
                    panel_PCB.Visible = true;
                    tP_Paste.Show();
                    bLight.Show();
                    bLightDown.Hide();
                    tabControl1.TabPages.Add(tP_Paste);
                    lPasteInfo.Text = Variable.sPath_SYS_PASTE + "\\" + productTempName;
                    this.gbBaseAngle.Visible = true;
                    dGV_Mark.Rows.Clear();
                    dGV_Mark.Rows.Add(2);
                }
                if (cB_PasteType.SelectedIndex == 1)//Label Down
                {
                    panel_Label.Visible = true;
                    panel_PCB.Visible = false;
                    tP_Paste.Hide();
                    bLight.Hide();
                    bLightDown.Show();
                    lPasteInfo.Text = Variable.sPath_SYS_LABEL + "\\" + productTempName;
                    dGV_Mark.Rows.Clear();
                    dGV_Mark.Rows.Add(2);
                    this.gbBaseAngle.Visible = false;
                }
                if (cB_PasteType.SelectedIndex == 2)//Label Up
                {
                    panel_Label.Visible = true;
                    panel_PCB.Visible = false;
                    tP_Paste.Hide();
                    bLight.Show();
                    bLightDown.Hide();
                    lPasteInfo.Text = Variable.sPath_SYS_LABEL_UP + "\\" + productTempName;
                }
                for (int i = 0; i < dGV_Mark.ColumnCount; i++)
                {
                    dGV_Mark.Rows[0].Cells[i].Value = "0";
                    dGV_Mark.Rows[1].Cells[i].Value = "0";
                }
                dGV_Mark.Rows[0].Cells[3].Value = "0";
                dGV_Mark.Rows[1].Cells[3].Value = "0";
                //
                dGV_Mark.Rows[0].Cells[15].Value = "500";
                dGV_Mark.Rows[1].Cells[15].Value = "500";
                dGV_Mark.Rows[0].Cells[16].Value = "-20";
                dGV_Mark.Rows[1].Cells[16].Value = "-20";
                dGV_Mark.Rows[0].Cells[17].Value = "20";
                dGV_Mark.Rows[1].Cells[17].Value = "20";
                //
                dGV_Mark.Rows[0].Cells[44].Value = "500";
                dGV_Mark.Rows[1].Cells[44].Value = "500";
                dGV_Mark.Rows[0].Cells[45].Value = "-20";
                dGV_Mark.Rows[1].Cells[45].Value = "-20";
                dGV_Mark.Rows[0].Cells[46].Value = "20";
                dGV_Mark.Rows[1].Cells[46].Value = "20";
                //
                dGV_Mark.Rows[0].Cells[51].Value = "40";
                dGV_Mark.Rows[1].Cells[51].Value = "40";
                dGV_Mark.Rows[0].Cells[52].Value = "Left2Right";
                dGV_Mark.Rows[1].Cells[52].Value = "Left2Right";
                dGV_Mark.Rows[0].Cells[53].Value = "Dark2Light";
                dGV_Mark.Rows[1].Cells[53].Value = "Dark2Light";
                //
                dGV_Mark.Rows[0].Cells[72].Value = "500";
                dGV_Mark.Rows[1].Cells[72].Value = "500";
                dGV_Mark.Rows[0].Cells[73].Value = "-20";
                dGV_Mark.Rows[1].Cells[73].Value = "-20";
                dGV_Mark.Rows[0].Cells[74].Value = "20";
                dGV_Mark.Rows[1].Cells[74].Value = "20";
                //
                dGV_Mark.Rows[0].Cells[79].Value = "40";
                dGV_Mark.Rows[1].Cells[79].Value = "40";
                dGV_Mark.Rows[0].Cells[80].Value = "Left2Right";
                dGV_Mark.Rows[1].Cells[80].Value = "Left2Right";
                dGV_Mark.Rows[0].Cells[81].Value = "Dark2Light";
                dGV_Mark.Rows[1].Cells[81].Value = "Dark2Light";
                //
                dGV_Mark.Rows[0].Cells[100].Value = "500";
                dGV_Mark.Rows[1].Cells[100].Value = "500";
                dGV_Mark.Rows[0].Cells[101].Value = "-20";
                dGV_Mark.Rows[1].Cells[101].Value = "-20";
                dGV_Mark.Rows[0].Cells[102].Value = "20";
                dGV_Mark.Rows[1].Cells[102].Value = "20";
                //
                dGV_Mark.Rows[0].Cells[107].Value = "40";
                dGV_Mark.Rows[1].Cells[107].Value = "40";
                dGV_Mark.Rows[0].Cells[108].Value = "Up2Bottom";
                dGV_Mark.Rows[1].Cells[108].Value = "Up2Bottom";
                dGV_Mark.Rows[0].Cells[109].Value = "Dark2Light";
                dGV_Mark.Rows[1].Cells[109].Value = "Dark2Light";
                //
                dGV_Mark.Rows[0].Cells[128].Value = "500";
                dGV_Mark.Rows[1].Cells[128].Value = "500";
                dGV_Mark.Rows[0].Cells[129].Value = "-20";
                dGV_Mark.Rows[1].Cells[129].Value = "-20";
                dGV_Mark.Rows[0].Cells[130].Value = "20";
                dGV_Mark.Rows[1].Cells[130].Value = "20";
                //
                dGV_Mark.Rows[0].Cells[135].Value = "40";
                dGV_Mark.Rows[1].Cells[135].Value = "40";
                dGV_Mark.Rows[0].Cells[136].Value = "Up2Bottom";
                dGV_Mark.Rows[1].Cells[136].Value = "Up2Bottom";
                dGV_Mark.Rows[0].Cells[137].Value = "Dark2Light";
                dGV_Mark.Rows[1].Cells[137].Value = "Dark2Light";

                dGV_Mark.Rows[0].Cells[147].Value = "1";
                dGV_Mark.Rows[1].Cells[147].Value = "1";
                dGV_Mark.Rows[0].Cells[148].Value = "0";
                dGV_Mark.Rows[1].Cells[148].Value = "0";
                dGV_Mark.Rows[0].Cells[149].Value = "1";
                dGV_Mark.Rows[1].Cells[149].Value = "1";
                dGV_Mark.Rows[0].Cells[150].Value = "0";
                dGV_Mark.Rows[1].Cells[150].Value = "0";
                dGV_Mark.Rows[0].Cells[151].Value = "1";
                dGV_Mark.Rows[1].Cells[151].Value = "1";
                dGV_Mark.Rows[0].Cells[152].Value = "0";
                dGV_Mark.Rows[1].Cells[152].Value = "0";
                dGV_Mark.Rows[0].Cells[153].Value = "1";
                dGV_Mark.Rows[1].Cells[153].Value = "1";
                dGV_Mark.Rows[0].Cells[154].Value = "0";
                dGV_Mark.Rows[1].Cells[154].Value = "0";
                dGV_Mark.Rows[0].Cells[155].Value = "1";
                dGV_Mark.Rows[1].Cells[155].Value = "1";
                dGV_Mark.Rows[0].Cells[156].Value = "0";
                dGV_Mark.Rows[1].Cells[156].Value = "0";
                dGV_Mark.Rows[0].Cells[157].Value = "1";
                dGV_Mark.Rows[1].Cells[157].Value = "1";
                dGV_Mark.Rows[0].Cells[158].Value = "0";
                dGV_Mark.Rows[1].Cells[158].Value = "0";

                dGV_Mark.Rows[0].Cells[159].Value = "0";
                dGV_Mark.Rows[1].Cells[159].Value = "0";
                dGV_Mark.Rows[0].Cells[160].Value = "0";
                dGV_Mark.Rows[1].Cells[160].Value = "0";
                dGV_Mark.Rows[0].Cells[161].Value = "128";
                dGV_Mark.Rows[1].Cells[161].Value = "128";
                dGV_Mark.Rows[0].Cells[162].Value = "1";
                dGV_Mark.Rows[0].Cells[163].Value = "75";
                dGV_Mark.Rows[0].Cells[164].Value = "1";
                dGV_Mark.Rows[0].Cells[165].Value = "1";
                dGV_Mark.Rows[0].Cells[166].Value = "0,0,100,100";
                dGV_Mark.Rows[0].Cells[167].Value = "0";
                dGV_Mark.Rows[1].Cells[163].Value = "75";
                dGV_Mark.Rows[1].Cells[164].Value = "1";
                dGV_Mark.Rows[1].Cells[165].Value = "1";
                dGV_Mark.Rows[1].Cells[166].Value = "0,0,100,100";
                dGV_Mark.Rows[1].Cells[167].Value = "0";

                this.baseAngle.Value = 0;
                gB_PasteInfo.Visible = true;
                PasteInfo = new Variable.PASTAE();
                PasteInfo.PasteName = productTempName;
                #region Dispose Template
                try
                {
                    PasteInfo.Align1.Dispose();
                }
                catch
                { }
                try
                {
                    PasteInfo.Align2.Dispose();
                }
                catch
                { }
                try
                {
                    PasteInfo.BadMark_Image.Dispose();
                }
                catch
                { }
                try
                {
                    PasteInfo.Corner_H1_Align1.Dispose();
                }
                catch
                { }
                try
                {
                    PasteInfo.Corner_H2_Align1.Dispose();
                }
                catch
                { }
                try
                {
                    PasteInfo.Corner_V1_Align1.Dispose();
                }
                catch
                { }
                try
                {
                    PasteInfo.Corner_V2_Align1.Dispose();
                }
                catch
                { }
                try
                {
                    PasteInfo.Corner_H1_Align2.Dispose();
                }
                catch
                { }
                try
                {
                    PasteInfo.Corner_H2_Align2.Dispose();
                }
                catch
                { }
                try
                {
                    PasteInfo.Corner_V1_Align2.Dispose();
                }
                catch
                { }
                try
                {
                    PasteInfo.Corner_V2_Align2.Dispose();
                }
                catch
                { }
                #endregion
                PasteInfo.Align1 = new VisionImage();
                PasteInfo.Align2 = new VisionImage();
                dGV_Mark.Rows[0].Selected = true;
            }
        }

        private void bOpenProgram_Click(object sender, EventArgs e)
        {
            bool OKNG = false;
            //根据选择的模式
            tabControl1.TabPages.Remove(tP_Paste);
            if (cB_PasteType.SelectedIndex == 0)//PCB Up
            {
                folderBrowserDialog.SelectedPath = Variable.sPath_SYS_PASTE;
                panel_Label.Visible = false;
                panel_PCB.Visible = true;
                tP_Paste.Show();
                bLight.Show();
                bLightDown.Hide();
                tabControl1.TabPages.Add(tP_Paste);
                gbBaseAngle.Visible = true;
            }
            if (cB_PasteType.SelectedIndex == 1)//Label Down
            {
                folderBrowserDialog.SelectedPath = Variable.sPath_SYS_LABEL;
                panel_Label.Visible = true;
                panel_PCB.Visible = false;
                tP_Paste.Hide();
                bLight.Hide();
                bLightDown.Show();
                gbBaseAngle.Visible = false;
            }
            if (cB_PasteType.SelectedIndex == 2)//Label Up
            {
                folderBrowserDialog.SelectedPath = Variable.sPath_SYS_LABEL_UP;
                panel_Label.Visible = true;
                panel_PCB.Visible = false;
                tP_Paste.Hide();
                bLight.Show();
                bLightDown.Hide();
            }
            if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
            {
                if (cB_PasteType.SelectedIndex == 0)//PCB Up
                {
                    PasteInfo = ReadXls2Paste(folderBrowserDialog.SelectedPath, ref OKNG);
                }
                if (cB_PasteType.SelectedIndex == 1)//Label Down
                {
                    PasteInfo = ReadXls2Label(folderBrowserDialog.SelectedPath, ref OKNG);
                }
                if (cB_PasteType.SelectedIndex == 2)//Label Up
                {
                    PasteInfo = ReadXls2Label(folderBrowserDialog.SelectedPath, ref OKNG);
                }

                lPasteInfo.Text = folderBrowserDialog.SelectedPath;

                if (OKNG)
                {

                    #region MARK1
                    dGV_Mark.Rows[0].Cells[0].Value = PasteInfo.CamPoint1.X.ToString("F3");
                    dGV_Mark.Rows[0].Cells[1].Value = PasteInfo.CamPoint1.Y.ToString("F3");
                    dGV_Mark.Rows[0].Cells[2].Value = PasteInfo.Shutter1.ToString();
                    dGV_Mark.Rows[0].Cells[3].Value = PasteInfo.AlinIndex1.ToString();

                    dGV_Mark.Rows[0].Cells[6].Value = PasteInfo.Init_ROI_Top1.ToString();
                    dGV_Mark.Rows[0].Cells[7].Value = PasteInfo.Init_ROI_Left1.ToString();
                    dGV_Mark.Rows[0].Cells[8].Value = PasteInfo.Init_ROI_Width1.ToString();
                    dGV_Mark.Rows[0].Cells[9].Value = PasteInfo.Init_ROI_Height1.ToString();
                    dGV_Mark.Rows[0].Cells[10].Value = PasteInfo.Init_OffsetX1.ToString();
                    dGV_Mark.Rows[0].Cells[11].Value = PasteInfo.Init_OffsetY1.ToString();
                    dGV_Mark.Rows[0].Cells[12].Value = PasteInfo.Init_Point1.X.ToString("F3");
                    dGV_Mark.Rows[0].Cells[13].Value = PasteInfo.Init_Point1.Y.ToString("F3");
                    dGV_Mark.Rows[0].Cells[14].Value = PasteInfo.Init_Angle1.ToString("F3");
                    dGV_Mark.Rows[0].Cells[15].Value = PasteInfo.Score1.ToString();
                    dGV_Mark.Rows[0].Cells[16].Value = PasteInfo.MinAngle1.ToString();
                    dGV_Mark.Rows[0].Cells[17].Value = PasteInfo.MaxAngle1.ToString();
                    dGV_Mark.Rows[0].Cells[18].Value = PasteInfo.S_ROI_Top1.ToString();
                    dGV_Mark.Rows[0].Cells[19].Value = PasteInfo.S_ROI_Left1.ToString();
                    dGV_Mark.Rows[0].Cells[20].Value = PasteInfo.S_ROI_Width1.ToString();
                    dGV_Mark.Rows[0].Cells[21].Value = PasteInfo.S_ROI_Height1.ToString();
                    dGV_Mark.Rows[0].Cells[22].Value = PasteInfo.S_MinR1.ToString();
                    dGV_Mark.Rows[0].Cells[23].Value = PasteInfo.S_MaxR1.ToString();

                    dGV_Mark.Rows[0].Cells[24].Value = PasteInfo.S_Center1.X.ToString("F3");
                    dGV_Mark.Rows[0].Cells[25].Value = PasteInfo.S_Center1.Y.ToString("F3");
                    //H1************************************************
                    dGV_Mark.Rows[0].Cells[26].Value = PasteInfo.Corner_H1_Point1.X.ToString("F3");
                    dGV_Mark.Rows[0].Cells[27].Value = PasteInfo.Corner_H1_Point1.Y.ToString("F3");
                    dGV_Mark.Rows[0].Cells[28].Value = PasteInfo.Corner_H1_CamPoint1.X.ToString("F3");
                    dGV_Mark.Rows[0].Cells[29].Value = PasteInfo.Corner_H1_CamPoint1.Y.ToString("F3");
                    dGV_Mark.Rows[0].Cells[30].Value = PasteInfo.Corner_H1_Shutter1.ToString();
                    //H1初定位打光
                    dGV_Mark.Rows[0].Cells[31].Value = (PasteInfo.bCorner_H1_Red1 == true ? "1" : "0");
                    dGV_Mark.Rows[0].Cells[32].Value = (PasteInfo.bCorner_H1_Green1 == true ? "1" : "0");
                    dGV_Mark.Rows[0].Cells[33].Value = (PasteInfo.bCorner_H1_Blue1 == true ? "1" : "0");
                    dGV_Mark.Rows[0].Cells[34].Value = PasteInfo.dCorner_H1_RedValue1.ToString();
                    dGV_Mark.Rows[0].Cells[35].Value = PasteInfo.dCorner_H1_GreenValue1.ToString();
                    dGV_Mark.Rows[0].Cells[36].Value = PasteInfo.dCorner_H1_BlueValue1.ToString();
                    //H1初定位ROI
                    dGV_Mark.Rows[0].Cells[37].Value = PasteInfo.Corner_H1_Init_Top1.ToString();
                    dGV_Mark.Rows[0].Cells[38].Value = PasteInfo.Corner_H1_Init_Left1.ToString();
                    dGV_Mark.Rows[0].Cells[39].Value = PasteInfo.Corner_H1_Init_Width1.ToString();
                    dGV_Mark.Rows[0].Cells[40].Value = PasteInfo.Corner_H1_Init_Height1.ToString();
                    //H1初定位侦测的点
                    dGV_Mark.Rows[0].Cells[41].Value = PasteInfo.Corner_H1_Init_Point1.X.ToString("F3");
                    dGV_Mark.Rows[0].Cells[42].Value = PasteInfo.Corner_H1_Init_Point1.Y.ToString("F3");
                    dGV_Mark.Rows[0].Cells[43].Value = PasteInfo.Corner_H1_Init_Angle1.ToString();
                    dGV_Mark.Rows[0].Cells[44].Value = PasteInfo.Corner_H1_Init_Score1.ToString();
                    dGV_Mark.Rows[0].Cells[45].Value = PasteInfo.Corner_H1_Init_MinAngle1.ToString();
                    dGV_Mark.Rows[0].Cells[46].Value = PasteInfo.Corner_H1_Init_MaxAngle1.ToString();

                    dGV_Mark.Rows[0].Cells[47].Value = PasteInfo.Corner_H1_Top1.ToString();
                    dGV_Mark.Rows[0].Cells[48].Value = PasteInfo.Corner_H1_Left1.ToString();
                    dGV_Mark.Rows[0].Cells[49].Value = PasteInfo.Corner_H1_Width1.ToString();
                    dGV_Mark.Rows[0].Cells[50].Value = PasteInfo.Corner_H1_Height1.ToString();
                    dGV_Mark.Rows[0].Cells[51].Value = PasteInfo.Corner_H1_EdgeStrength1.ToString();
                    dGV_Mark.Rows[0].Cells[52].Value = PasteInfo.Corner_H1_PicDir1;
                    dGV_Mark.Rows[0].Cells[53].Value = PasteInfo.Corner_H1_GrayValueDir1;

                    dGV_Mark.Rows[0].Cells[54].Value = PasteInfo.Corner_H2_Point1.X.ToString("F3");
                    dGV_Mark.Rows[0].Cells[55].Value = PasteInfo.Corner_H2_Point1.Y.ToString("F3");

                    dGV_Mark.Rows[0].Cells[56].Value = PasteInfo.Corner_H2_CamPoint1.X.ToString("F3");
                    dGV_Mark.Rows[0].Cells[57].Value = PasteInfo.Corner_H2_CamPoint1.Y.ToString("F3");
                    dGV_Mark.Rows[0].Cells[58].Value = PasteInfo.Corner_H2_Shutter1.ToString();
                    //H2初定位打光
                    dGV_Mark.Rows[0].Cells[59].Value = PasteInfo.bCorner_H2_Red1 == true ? "1" : "0";
                    dGV_Mark.Rows[0].Cells[60].Value = PasteInfo.bCorner_H2_Green1 == true ? "1" : "0";
                    dGV_Mark.Rows[0].Cells[61].Value = PasteInfo.bCorner_H2_Blue1 == true ? "1" : "0";
                    dGV_Mark.Rows[0].Cells[62].Value = PasteInfo.dCorner_H2_RedValue1.ToString();
                    dGV_Mark.Rows[0].Cells[63].Value = PasteInfo.dCorner_H2_GreenValue1.ToString();
                    dGV_Mark.Rows[0].Cells[64].Value = PasteInfo.dCorner_H2_BlueValue1.ToString();
                    //H2初定位ROI
                    dGV_Mark.Rows[0].Cells[65].Value = PasteInfo.Corner_H2_Init_Top1.ToString();
                    dGV_Mark.Rows[0].Cells[66].Value = PasteInfo.Corner_H2_Init_Left1.ToString();
                    dGV_Mark.Rows[0].Cells[67].Value = PasteInfo.Corner_H2_Init_Width1.ToString();
                    dGV_Mark.Rows[0].Cells[68].Value = PasteInfo.Corner_H2_Init_Height1.ToString();
                    //H2初定位侦测的点
                    dGV_Mark.Rows[0].Cells[69].Value = PasteInfo.Corner_H2_Init_Point1.X.ToString("F3");
                    dGV_Mark.Rows[0].Cells[70].Value = PasteInfo.Corner_H2_Init_Point1.Y.ToString("F3");
                    dGV_Mark.Rows[0].Cells[71].Value = PasteInfo.Corner_H2_Init_Angle1.ToString();
                    dGV_Mark.Rows[0].Cells[72].Value = PasteInfo.Corner_H2_Init_Score1.ToString();
                    dGV_Mark.Rows[0].Cells[73].Value = PasteInfo.Corner_H2_Init_MinAngle1.ToString();
                    dGV_Mark.Rows[0].Cells[74].Value = PasteInfo.Corner_H2_Init_MaxAngle1.ToString();

                    dGV_Mark.Rows[0].Cells[75].Value = PasteInfo.Corner_H2_Top1.ToString();
                    dGV_Mark.Rows[0].Cells[76].Value = PasteInfo.Corner_H2_Left1.ToString();
                    dGV_Mark.Rows[0].Cells[77].Value = PasteInfo.Corner_H2_Width1.ToString();
                    dGV_Mark.Rows[0].Cells[78].Value = PasteInfo.Corner_H2_Height1.ToString();
                    dGV_Mark.Rows[0].Cells[79].Value = PasteInfo.Corner_H2_EdgeStrength1.ToString();
                    dGV_Mark.Rows[0].Cells[80].Value = PasteInfo.Corner_H2_PicDir1;
                    dGV_Mark.Rows[0].Cells[81].Value = PasteInfo.Corner_H2_GrayValueDir1;

                    dGV_Mark.Rows[0].Cells[82].Value = PasteInfo.Corner_V1_Point1.X.ToString("F3");
                    dGV_Mark.Rows[0].Cells[83].Value = PasteInfo.Corner_V1_Point1.Y.ToString("F3");

                    dGV_Mark.Rows[0].Cells[84].Value = PasteInfo.Corner_V1_CamPoint1.X.ToString("F3");
                    dGV_Mark.Rows[0].Cells[85].Value = PasteInfo.Corner_V1_CamPoint1.Y.ToString("F3");
                    dGV_Mark.Rows[0].Cells[86].Value = PasteInfo.Corner_V1_Shutter1.ToString();
                    //V1初定位打光
                    dGV_Mark.Rows[0].Cells[87].Value = PasteInfo.bCorner_V1_Red1 == true ? "1" : "0";
                    dGV_Mark.Rows[0].Cells[88].Value = PasteInfo.bCorner_V1_Green1 == true ? "1" : "0";
                    dGV_Mark.Rows[0].Cells[89].Value = PasteInfo.bCorner_V1_Blue1 == true ? "1" : "0";
                    dGV_Mark.Rows[0].Cells[90].Value = PasteInfo.dCorner_V1_RedValue1.ToString();
                    dGV_Mark.Rows[0].Cells[91].Value = PasteInfo.dCorner_V1_GreenValue1.ToString();
                    dGV_Mark.Rows[0].Cells[92].Value = PasteInfo.dCorner_V1_BlueValue1.ToString();
                    //V1初定位ROI
                    dGV_Mark.Rows[0].Cells[93].Value = PasteInfo.Corner_V1_Init_Top1.ToString();
                    dGV_Mark.Rows[0].Cells[94].Value = PasteInfo.Corner_V1_Init_Left1.ToString();
                    dGV_Mark.Rows[0].Cells[95].Value = PasteInfo.Corner_V1_Init_Width1.ToString();
                    dGV_Mark.Rows[0].Cells[96].Value = PasteInfo.Corner_V1_Init_Height1.ToString();
                    //V1初定位侦测的点
                    dGV_Mark.Rows[0].Cells[97].Value = PasteInfo.Corner_V1_Init_Point1.X.ToString("F3");
                    dGV_Mark.Rows[0].Cells[98].Value = PasteInfo.Corner_V1_Init_Point1.Y.ToString("F3");
                    dGV_Mark.Rows[0].Cells[99].Value = PasteInfo.Corner_V1_Init_Angle1.ToString();
                    dGV_Mark.Rows[0].Cells[100].Value = PasteInfo.Corner_V1_Init_Score1.ToString();
                    dGV_Mark.Rows[0].Cells[101].Value = PasteInfo.Corner_V1_Init_MinAngle1.ToString();
                    dGV_Mark.Rows[0].Cells[102].Value = PasteInfo.Corner_V1_Init_MaxAngle1.ToString();

                    dGV_Mark.Rows[0].Cells[103].Value = PasteInfo.Corner_V1_Top1.ToString();
                    dGV_Mark.Rows[0].Cells[104].Value = PasteInfo.Corner_V1_Left1.ToString();
                    dGV_Mark.Rows[0].Cells[105].Value = PasteInfo.Corner_V1_Width1.ToString();
                    dGV_Mark.Rows[0].Cells[106].Value = PasteInfo.Corner_V1_Height1.ToString();
                    dGV_Mark.Rows[0].Cells[107].Value = PasteInfo.Corner_V1_EdgeStrength1.ToString();
                    dGV_Mark.Rows[0].Cells[108].Value = PasteInfo.Corner_V1_PicDir1;
                    dGV_Mark.Rows[0].Cells[109].Value = PasteInfo.Corner_V1_GrayValueDir1;
                    //V2
                    dGV_Mark.Rows[0].Cells[110].Value = PasteInfo.Corner_V2_Point1.X.ToString("F3");
                    dGV_Mark.Rows[0].Cells[111].Value = PasteInfo.Corner_V2_Point1.Y.ToString("F3");

                    dGV_Mark.Rows[0].Cells[112].Value = PasteInfo.Corner_V2_CamPoint1.X.ToString("F3");
                    dGV_Mark.Rows[0].Cells[113].Value = PasteInfo.Corner_V2_CamPoint1.Y.ToString("F3");
                    dGV_Mark.Rows[0].Cells[114].Value = PasteInfo.Corner_V2_Shutter1.ToString();
                    //V2初定位打光
                    dGV_Mark.Rows[0].Cells[115].Value = PasteInfo.bCorner_V2_Red1 == true ? "1" : "0";
                    dGV_Mark.Rows[0].Cells[116].Value = PasteInfo.bCorner_V2_Green1 == true ? "1" : "0";
                    dGV_Mark.Rows[0].Cells[117].Value = PasteInfo.bCorner_V2_Blue1 == true ? "1" : "0";
                    dGV_Mark.Rows[0].Cells[118].Value = PasteInfo.dCorner_V2_RedValue1.ToString();
                    dGV_Mark.Rows[0].Cells[119].Value = PasteInfo.dCorner_V2_GreenValue1.ToString();
                    dGV_Mark.Rows[0].Cells[120].Value = PasteInfo.dCorner_V2_BlueValue1.ToString();
                    //V2初定位ROI
                    dGV_Mark.Rows[0].Cells[121].Value = PasteInfo.Corner_V2_Init_Top1.ToString();
                    dGV_Mark.Rows[0].Cells[122].Value = PasteInfo.Corner_V2_Init_Left1.ToString();
                    dGV_Mark.Rows[0].Cells[123].Value = PasteInfo.Corner_V2_Init_Width1.ToString();
                    dGV_Mark.Rows[0].Cells[124].Value = PasteInfo.Corner_V2_Init_Height1.ToString();
                    //V2初定位侦测的点
                    dGV_Mark.Rows[0].Cells[125].Value = PasteInfo.Corner_V2_Init_Point1.X.ToString("F3");
                    dGV_Mark.Rows[0].Cells[126].Value = PasteInfo.Corner_V2_Init_Point1.Y.ToString("F3");
                    dGV_Mark.Rows[0].Cells[127].Value = PasteInfo.Corner_V2_Init_Angle1.ToString();
                    dGV_Mark.Rows[0].Cells[128].Value = PasteInfo.Corner_V2_Init_Score1.ToString();
                    dGV_Mark.Rows[0].Cells[129].Value = PasteInfo.Corner_V2_Init_MinAngle1.ToString();
                    dGV_Mark.Rows[0].Cells[130].Value = PasteInfo.Corner_V2_Init_MaxAngle1.ToString();

                    dGV_Mark.Rows[0].Cells[131].Value = PasteInfo.Corner_V2_Top1.ToString();
                    dGV_Mark.Rows[0].Cells[132].Value = PasteInfo.Corner_V2_Left1.ToString();
                    dGV_Mark.Rows[0].Cells[133].Value = PasteInfo.Corner_V2_Width1.ToString();
                    dGV_Mark.Rows[0].Cells[134].Value = PasteInfo.Corner_V2_Height1.ToString();
                    dGV_Mark.Rows[0].Cells[135].Value = PasteInfo.Corner_V2_EdgeStrength1.ToString();
                    dGV_Mark.Rows[0].Cells[136].Value = PasteInfo.Corner_V2_PicDir1;
                    dGV_Mark.Rows[0].Cells[137].Value = PasteInfo.Corner_V2_GrayValueDir1;

                    dGV_Mark.Rows[0].Cells[138].Value = PasteInfo.Corner_Point1.X.ToString("F3");
                    dGV_Mark.Rows[0].Cells[139].Value = PasteInfo.Corner_Point1.Y.ToString("F3");

                    dGV_Mark.Rows[0].Cells[140].Value = PasteInfo.CornerAngleIndex1.ToString();

                    dGV_Mark.Rows[0].Cells[141].Value = PasteInfo.bRed1 == true ? "1" : "0";
                    dGV_Mark.Rows[0].Cells[142].Value = PasteInfo.bGreen1 == true ? "1" : "0";
                    dGV_Mark.Rows[0].Cells[143].Value = PasteInfo.bBlue1 == true ? "1" : "0";
                    dGV_Mark.Rows[0].Cells[144].Value = PasteInfo.dRedValue1.ToString();
                    dGV_Mark.Rows[0].Cells[145].Value = PasteInfo.dGreenValue1.ToString();
                    dGV_Mark.Rows[0].Cells[146].Value = PasteInfo.dBlueValue1.ToString();

                    dGV_Mark.Rows[0].Cells[147].Value = PasteInfo.GainInit1.ToString();
                    dGV_Mark.Rows[0].Cells[148].Value = PasteInfo.OffsetInit1.ToString();
                    dGV_Mark.Rows[0].Cells[149].Value = PasteInfo.GainCircle1.ToString();
                    dGV_Mark.Rows[0].Cells[150].Value = PasteInfo.OffsetCircle1.ToString();
                    dGV_Mark.Rows[0].Cells[151].Value = PasteInfo.GainH1_1.ToString();
                    dGV_Mark.Rows[0].Cells[152].Value = PasteInfo.OffsetH1_1.ToString();
                    dGV_Mark.Rows[0].Cells[153].Value = PasteInfo.GainH2_1.ToString();
                    dGV_Mark.Rows[0].Cells[154].Value = PasteInfo.OffsetH2_1.ToString();
                    dGV_Mark.Rows[0].Cells[155].Value = PasteInfo.GainV1_1.ToString();
                    dGV_Mark.Rows[0].Cells[156].Value = PasteInfo.OffsetV1_1.ToString();
                    dGV_Mark.Rows[0].Cells[157].Value = PasteInfo.GainV2_1.ToString();
                    dGV_Mark.Rows[0].Cells[158].Value = PasteInfo.OffsetV2_1.ToString();

                    dGV_Mark.Rows[0].Cells[159].Value = PasteInfo.bAreaEN1 == true ? "1" : "0";
                    dGV_Mark.Rows[0].Cells[160].Value = PasteInfo.iAreaMin1.ToString();
                    dGV_Mark.Rows[0].Cells[161].Value = PasteInfo.iAreaMax1.ToString();
                    dGV_Mark.Rows[0].Cells[162].Value = PasteInfo.iAreaOKStyle1.ToString();

                    dGV_Mark.Rows[0].Cells[163].Value = PasteInfo.GrabLine_EdgeStrength1.ToString();
                    dGV_Mark.Rows[0].Cells[164].Value = PasteInfo.GrabLine_PicDir1;
                    dGV_Mark.Rows[0].Cells[165].Value = PasteInfo.GrabLine_GrayValueDir1;
                    dGV_Mark.Rows[0].Cells[166].Value = PasteInfo.GrabLine_ROI1;
                    dGV_Mark.Rows[0].Cells[167].Value = PasteInfo.GrabLine_Enable1.ToString();

                    #endregion

                    #region MARK2
                    dGV_Mark.Rows[1].Cells[0].Value = PasteInfo.CamPoint2.X.ToString("F3");
                    dGV_Mark.Rows[1].Cells[1].Value = PasteInfo.CamPoint2.Y.ToString("F3");
                    dGV_Mark.Rows[1].Cells[2].Value = PasteInfo.Shutter2.ToString();
                    dGV_Mark.Rows[1].Cells[3].Value = PasteInfo.AlinIndex2.ToString();

                    dGV_Mark.Rows[1].Cells[6].Value = PasteInfo.Init_ROI_Top2.ToString();
                    dGV_Mark.Rows[1].Cells[7].Value = PasteInfo.Init_ROI_Left2.ToString();
                    dGV_Mark.Rows[1].Cells[8].Value = PasteInfo.Init_ROI_Width2.ToString();
                    dGV_Mark.Rows[1].Cells[9].Value = PasteInfo.Init_ROI_Height2.ToString();
                    dGV_Mark.Rows[1].Cells[10].Value = PasteInfo.Init_OffsetX2.ToString();
                    dGV_Mark.Rows[1].Cells[11].Value = PasteInfo.Init_OffsetY2.ToString();

                    dGV_Mark.Rows[1].Cells[12].Value = PasteInfo.Init_Point2.X.ToString("F3");
                    dGV_Mark.Rows[1].Cells[13].Value = PasteInfo.Init_Point2.Y.ToString("F3");
                    dGV_Mark.Rows[1].Cells[14].Value = PasteInfo.Init_Angle2.ToString();
                    dGV_Mark.Rows[1].Cells[15].Value = PasteInfo.Score2.ToString();
                    dGV_Mark.Rows[1].Cells[16].Value = PasteInfo.MinAngle2.ToString();
                    dGV_Mark.Rows[1].Cells[17].Value = PasteInfo.MaxAngle2.ToString();
                    dGV_Mark.Rows[1].Cells[18].Value = PasteInfo.S_ROI_Top2.ToString();
                    dGV_Mark.Rows[1].Cells[19].Value = PasteInfo.S_ROI_Left2.ToString();
                    dGV_Mark.Rows[1].Cells[20].Value = PasteInfo.S_ROI_Width2.ToString();
                    dGV_Mark.Rows[1].Cells[21].Value = PasteInfo.S_ROI_Height2.ToString();
                    dGV_Mark.Rows[1].Cells[22].Value = PasteInfo.S_MinR2.ToString();
                    dGV_Mark.Rows[1].Cells[23].Value = PasteInfo.S_MaxR2.ToString();

                    dGV_Mark.Rows[1].Cells[24].Value = PasteInfo.S_Center2.X.ToString("F3");
                    dGV_Mark.Rows[1].Cells[25].Value = PasteInfo.S_Center2.Y.ToString("F3");
                    //H1************************************************
                    dGV_Mark.Rows[1].Cells[26].Value = PasteInfo.Corner_H1_Point2.X.ToString("F3");
                    dGV_Mark.Rows[1].Cells[27].Value = PasteInfo.Corner_H1_Point2.Y.ToString("F3");

                    dGV_Mark.Rows[1].Cells[28].Value = PasteInfo.Corner_H1_CamPoint2.X.ToString("F3");
                    dGV_Mark.Rows[1].Cells[29].Value = PasteInfo.Corner_H1_CamPoint2.Y.ToString("F3");
                    dGV_Mark.Rows[1].Cells[30].Value = PasteInfo.Corner_H1_Shutter2.ToString();
                    //H1初定位打光
                    dGV_Mark.Rows[1].Cells[31].Value = PasteInfo.bCorner_H1_Red2 == true ? "1" : "0";
                    dGV_Mark.Rows[1].Cells[32].Value = PasteInfo.bCorner_H1_Green2 == true ? "1" : "0";
                    dGV_Mark.Rows[1].Cells[33].Value = PasteInfo.bCorner_H1_Blue2 == true ? "1" : "0";
                    dGV_Mark.Rows[1].Cells[34].Value = PasteInfo.dCorner_H1_RedValue2.ToString();
                    dGV_Mark.Rows[1].Cells[35].Value = PasteInfo.dCorner_H1_GreenValue2.ToString();
                    dGV_Mark.Rows[1].Cells[36].Value = PasteInfo.dCorner_H1_BlueValue2.ToString();
                    //H1初定位ROI
                    dGV_Mark.Rows[1].Cells[37].Value = PasteInfo.Corner_H1_Init_Top2.ToString();
                    dGV_Mark.Rows[1].Cells[38].Value = PasteInfo.Corner_H1_Init_Left2.ToString();
                    dGV_Mark.Rows[1].Cells[39].Value = PasteInfo.Corner_H1_Init_Width2.ToString();
                    dGV_Mark.Rows[1].Cells[40].Value = PasteInfo.Corner_H1_Init_Height2.ToString();
                    //H1初定位侦测的点
                    dGV_Mark.Rows[1].Cells[41].Value = PasteInfo.Corner_H1_Init_Point2.X.ToString("F3");
                    dGV_Mark.Rows[1].Cells[42].Value = PasteInfo.Corner_H1_Init_Point2.Y.ToString("F3");
                    dGV_Mark.Rows[1].Cells[43].Value = PasteInfo.Corner_H1_Init_Angle2.ToString();
                    dGV_Mark.Rows[1].Cells[44].Value = PasteInfo.Corner_H1_Init_Score2.ToString();
                    dGV_Mark.Rows[1].Cells[45].Value = PasteInfo.Corner_H1_Init_MinAngle2.ToString();
                    dGV_Mark.Rows[1].Cells[46].Value = PasteInfo.Corner_H1_Init_MaxAngle2.ToString();

                    dGV_Mark.Rows[1].Cells[47].Value = PasteInfo.Corner_H1_Top2.ToString();
                    dGV_Mark.Rows[1].Cells[48].Value = PasteInfo.Corner_H1_Left2.ToString();
                    dGV_Mark.Rows[1].Cells[49].Value = PasteInfo.Corner_H1_Width2.ToString();
                    dGV_Mark.Rows[1].Cells[50].Value = PasteInfo.Corner_H1_Height2.ToString();
                    dGV_Mark.Rows[1].Cells[51].Value = PasteInfo.Corner_H1_EdgeStrength2.ToString();
                    dGV_Mark.Rows[1].Cells[52].Value = PasteInfo.Corner_H1_PicDir2.ToString();
                    dGV_Mark.Rows[1].Cells[53].Value = PasteInfo.Corner_H1_GrayValueDir2.ToString();

                    dGV_Mark.Rows[1].Cells[54].Value = PasteInfo.Corner_H2_Point2.X.ToString("F3");
                    dGV_Mark.Rows[1].Cells[55].Value = PasteInfo.Corner_H2_Point2.Y.ToString("F3");

                    dGV_Mark.Rows[1].Cells[56].Value = PasteInfo.Corner_H2_CamPoint2.X.ToString("F3");
                    dGV_Mark.Rows[1].Cells[57].Value = PasteInfo.Corner_H2_CamPoint2.Y.ToString("F3");
                    dGV_Mark.Rows[1].Cells[58].Value = PasteInfo.Corner_H2_Shutter2.ToString();
                    //H2初定位打光
                    dGV_Mark.Rows[1].Cells[59].Value = PasteInfo.bCorner_H2_Red2 == true ? "1" : "0";
                    dGV_Mark.Rows[1].Cells[60].Value = PasteInfo.bCorner_H2_Green2 == true ? "1" : "0";
                    dGV_Mark.Rows[1].Cells[61].Value = PasteInfo.bCorner_H2_Blue2 == true ? "1" : "0";
                    dGV_Mark.Rows[1].Cells[62].Value = PasteInfo.dCorner_H2_RedValue2.ToString();
                    dGV_Mark.Rows[1].Cells[63].Value = PasteInfo.dCorner_H2_GreenValue2.ToString();
                    dGV_Mark.Rows[1].Cells[64].Value = PasteInfo.dCorner_H2_BlueValue2.ToString();
                    //H2初定位ROI
                    dGV_Mark.Rows[1].Cells[65].Value = PasteInfo.Corner_H2_Init_Top2.ToString();
                    dGV_Mark.Rows[1].Cells[66].Value = PasteInfo.Corner_H2_Init_Left2.ToString();
                    dGV_Mark.Rows[1].Cells[67].Value = PasteInfo.Corner_H2_Init_Width2.ToString();
                    dGV_Mark.Rows[1].Cells[68].Value = PasteInfo.Corner_H2_Init_Height2.ToString();
                    //H2初定位侦测的点
                    dGV_Mark.Rows[1].Cells[69].Value = PasteInfo.Corner_H2_Init_Point2.X.ToString("F3");
                    dGV_Mark.Rows[1].Cells[70].Value = PasteInfo.Corner_H2_Init_Point2.Y.ToString("F3");
                    dGV_Mark.Rows[1].Cells[71].Value = PasteInfo.Corner_H2_Init_Angle2.ToString();
                    dGV_Mark.Rows[1].Cells[72].Value = PasteInfo.Corner_H2_Init_Score2.ToString();
                    dGV_Mark.Rows[1].Cells[73].Value = PasteInfo.Corner_H2_Init_MinAngle2.ToString();
                    dGV_Mark.Rows[1].Cells[74].Value = PasteInfo.Corner_H2_Init_MaxAngle2.ToString();

                    dGV_Mark.Rows[1].Cells[75].Value = PasteInfo.Corner_H2_Top2.ToString();
                    dGV_Mark.Rows[1].Cells[76].Value = PasteInfo.Corner_H2_Left2.ToString();
                    dGV_Mark.Rows[1].Cells[77].Value = PasteInfo.Corner_H2_Width2.ToString();
                    dGV_Mark.Rows[1].Cells[78].Value = PasteInfo.Corner_H2_Height2.ToString();
                    dGV_Mark.Rows[1].Cells[79].Value = PasteInfo.Corner_H2_EdgeStrength2.ToString();
                    dGV_Mark.Rows[1].Cells[80].Value = PasteInfo.Corner_H2_PicDir2;
                    dGV_Mark.Rows[1].Cells[81].Value = PasteInfo.Corner_H2_GrayValueDir2;

                    dGV_Mark.Rows[1].Cells[82].Value = PasteInfo.Corner_V1_Point2.X.ToString("F3");
                    dGV_Mark.Rows[1].Cells[83].Value = PasteInfo.Corner_V1_Point2.Y.ToString("F3");

                    dGV_Mark.Rows[1].Cells[84].Value = PasteInfo.Corner_V1_CamPoint2.X.ToString("F3");
                    dGV_Mark.Rows[1].Cells[85].Value = PasteInfo.Corner_V1_CamPoint2.Y.ToString("F3");
                    dGV_Mark.Rows[1].Cells[86].Value = PasteInfo.Corner_V1_Shutter2.ToString();
                    //V1初定位打光
                    dGV_Mark.Rows[1].Cells[87].Value = PasteInfo.bCorner_V1_Red2 == true ? "1" : "0";
                    dGV_Mark.Rows[1].Cells[88].Value = PasteInfo.bCorner_V1_Green2 == true ? "1" : "0";
                    dGV_Mark.Rows[1].Cells[89].Value = PasteInfo.bCorner_V1_Blue2 == true ? "1" : "0";
                    dGV_Mark.Rows[1].Cells[90].Value = PasteInfo.dCorner_V1_RedValue2.ToString();
                    dGV_Mark.Rows[1].Cells[91].Value = PasteInfo.dCorner_V1_GreenValue2.ToString();
                    dGV_Mark.Rows[1].Cells[92].Value = PasteInfo.dCorner_V1_BlueValue2.ToString();
                    //V1初定位ROI
                    dGV_Mark.Rows[1].Cells[93].Value = PasteInfo.Corner_V1_Init_Top2.ToString();
                    dGV_Mark.Rows[1].Cells[94].Value = PasteInfo.Corner_V1_Init_Left2.ToString();
                    dGV_Mark.Rows[1].Cells[95].Value = PasteInfo.Corner_V1_Init_Width2.ToString();
                    dGV_Mark.Rows[1].Cells[96].Value = PasteInfo.Corner_V1_Init_Height2.ToString();
                    //V1初定位侦测的点
                    dGV_Mark.Rows[1].Cells[97].Value = PasteInfo.Corner_V1_Init_Point2.X.ToString("F3");
                    dGV_Mark.Rows[1].Cells[98].Value = PasteInfo.Corner_V1_Init_Point2.Y.ToString("F3");
                    dGV_Mark.Rows[1].Cells[99].Value = PasteInfo.Corner_V1_Init_Angle2.ToString();
                    dGV_Mark.Rows[1].Cells[100].Value = PasteInfo.Corner_V1_Init_Score2.ToString();
                    dGV_Mark.Rows[1].Cells[101].Value = PasteInfo.Corner_V1_Init_MinAngle2.ToString();
                    dGV_Mark.Rows[1].Cells[102].Value = PasteInfo.Corner_V1_Init_MaxAngle2.ToString();

                    dGV_Mark.Rows[1].Cells[103].Value = PasteInfo.Corner_V1_Top2.ToString();
                    dGV_Mark.Rows[1].Cells[104].Value = PasteInfo.Corner_V1_Left2.ToString();
                    dGV_Mark.Rows[1].Cells[105].Value = PasteInfo.Corner_V1_Width2.ToString();
                    dGV_Mark.Rows[1].Cells[106].Value = PasteInfo.Corner_V1_Height2.ToString();
                    dGV_Mark.Rows[1].Cells[107].Value = PasteInfo.Corner_V1_EdgeStrength2.ToString();
                    dGV_Mark.Rows[1].Cells[108].Value = PasteInfo.Corner_V1_PicDir2;
                    dGV_Mark.Rows[1].Cells[109].Value = PasteInfo.Corner_V1_GrayValueDir2;
                    //V2
                    dGV_Mark.Rows[1].Cells[110].Value = PasteInfo.Corner_V2_Point2.X.ToString("F3");
                    dGV_Mark.Rows[1].Cells[111].Value = PasteInfo.Corner_V2_Point2.Y.ToString("F3");

                    dGV_Mark.Rows[1].Cells[112].Value = PasteInfo.Corner_V2_CamPoint2.X.ToString("F3");
                    dGV_Mark.Rows[1].Cells[113].Value = PasteInfo.Corner_V2_CamPoint2.Y.ToString("F3");
                    dGV_Mark.Rows[1].Cells[114].Value = PasteInfo.Corner_V2_Shutter2.ToString();
                    //V2初定位打光
                    dGV_Mark.Rows[1].Cells[115].Value = PasteInfo.bCorner_V2_Red2 == true ? "1" : "0";
                    dGV_Mark.Rows[1].Cells[116].Value = PasteInfo.bCorner_V2_Green2 == true ? "1" : "0";
                    dGV_Mark.Rows[1].Cells[117].Value = PasteInfo.bCorner_V2_Blue2 == true ? "1" : "0";
                    dGV_Mark.Rows[1].Cells[118].Value = PasteInfo.dCorner_V2_RedValue2.ToString();
                    dGV_Mark.Rows[1].Cells[119].Value = PasteInfo.dCorner_V2_GreenValue2.ToString();
                    dGV_Mark.Rows[1].Cells[120].Value = PasteInfo.dCorner_V2_BlueValue2.ToString();
                    //V2初定位ROI
                    dGV_Mark.Rows[1].Cells[121].Value = PasteInfo.Corner_V2_Init_Top2.ToString();
                    dGV_Mark.Rows[1].Cells[122].Value = PasteInfo.Corner_V2_Init_Left2.ToString();
                    dGV_Mark.Rows[1].Cells[123].Value = PasteInfo.Corner_V2_Init_Width2.ToString();
                    dGV_Mark.Rows[1].Cells[124].Value = PasteInfo.Corner_V2_Init_Height2.ToString();
                    //V2初定位侦测的点
                    dGV_Mark.Rows[1].Cells[125].Value = PasteInfo.Corner_V2_Init_Point2.X.ToString("F3");
                    dGV_Mark.Rows[1].Cells[126].Value = PasteInfo.Corner_V2_Init_Point2.Y.ToString("F3");
                    dGV_Mark.Rows[1].Cells[127].Value = PasteInfo.Corner_V2_Init_Angle2.ToString();
                    dGV_Mark.Rows[1].Cells[128].Value = PasteInfo.Corner_V2_Init_Score2.ToString();
                    dGV_Mark.Rows[1].Cells[129].Value = PasteInfo.Corner_V2_Init_MinAngle2.ToString();
                    dGV_Mark.Rows[1].Cells[130].Value = PasteInfo.Corner_V2_Init_MaxAngle2.ToString();

                    dGV_Mark.Rows[1].Cells[131].Value = PasteInfo.Corner_V2_Top2.ToString();
                    dGV_Mark.Rows[1].Cells[132].Value = PasteInfo.Corner_V2_Left2.ToString();
                    dGV_Mark.Rows[1].Cells[133].Value = PasteInfo.Corner_V2_Width2.ToString();
                    dGV_Mark.Rows[1].Cells[134].Value = PasteInfo.Corner_V2_Height2.ToString();
                    dGV_Mark.Rows[1].Cells[135].Value = PasteInfo.Corner_V2_EdgeStrength2.ToString();
                    dGV_Mark.Rows[1].Cells[136].Value = PasteInfo.Corner_V2_PicDir2;
                    dGV_Mark.Rows[1].Cells[137].Value = PasteInfo.Corner_V2_GrayValueDir2;

                    dGV_Mark.Rows[1].Cells[138].Value = PasteInfo.Corner_Point2.X.ToString("F3");
                    dGV_Mark.Rows[1].Cells[139].Value = PasteInfo.Corner_Point2.Y.ToString("F3");

                    dGV_Mark.Rows[1].Cells[140].Value = PasteInfo.CornerAngleIndex2.ToString();

                    dGV_Mark.Rows[1].Cells[141].Value = PasteInfo.bRed2 == true ? "1" : "0";
                    dGV_Mark.Rows[1].Cells[142].Value = PasteInfo.bGreen2 == true ? "1" : "0";
                    dGV_Mark.Rows[1].Cells[143].Value = PasteInfo.bBlue2 == true ? "1" : "0";
                    dGV_Mark.Rows[1].Cells[144].Value = PasteInfo.dRedValue2.ToString();
                    dGV_Mark.Rows[1].Cells[145].Value = PasteInfo.dGreenValue2.ToString();
                    dGV_Mark.Rows[1].Cells[146].Value = PasteInfo.dBlueValue2.ToString();

                    dGV_Mark.Rows[1].Cells[147].Value = PasteInfo.GainInit2.ToString();
                    dGV_Mark.Rows[1].Cells[148].Value = PasteInfo.OffsetInit2.ToString();
                    dGV_Mark.Rows[1].Cells[149].Value = PasteInfo.GainCircle2.ToString();
                    dGV_Mark.Rows[1].Cells[150].Value = PasteInfo.OffsetCircle2.ToString();
                    dGV_Mark.Rows[1].Cells[151].Value = PasteInfo.GainH1_2.ToString();
                    dGV_Mark.Rows[1].Cells[152].Value = PasteInfo.OffsetH1_2.ToString();
                    dGV_Mark.Rows[1].Cells[153].Value = PasteInfo.GainH2_2.ToString();
                    dGV_Mark.Rows[1].Cells[154].Value = PasteInfo.OffsetH2_2.ToString();
                    dGV_Mark.Rows[1].Cells[155].Value = PasteInfo.GainV1_2.ToString();
                    dGV_Mark.Rows[1].Cells[156].Value = PasteInfo.OffsetV1_2.ToString();
                    dGV_Mark.Rows[1].Cells[157].Value = PasteInfo.GainV2_2.ToString();
                    dGV_Mark.Rows[1].Cells[158].Value = PasteInfo.OffsetV2_2.ToString();

                    dGV_Mark.Rows[1].Cells[159].Value = PasteInfo.bAreaEN2 == true ? "1" : "0";
                    dGV_Mark.Rows[1].Cells[160].Value = PasteInfo.iAreaMin2.ToString();
                    dGV_Mark.Rows[1].Cells[161].Value = PasteInfo.iAreaMax2.ToString();
                    dGV_Mark.Rows[1].Cells[162].Value = PasteInfo.iAreaOKStyle2.ToString();

                    dGV_Mark.Rows[1].Cells[163].Value = PasteInfo.GrabLine_EdgeStrength1.ToString();
                    dGV_Mark.Rows[1].Cells[164].Value = PasteInfo.GrabLine_PicDir2;
                    dGV_Mark.Rows[1].Cells[165].Value = PasteInfo.GrabLine_GrayValueDir2;
                    dGV_Mark.Rows[1].Cells[166].Value = PasteInfo.GrabLine_ROI2;
                    dGV_Mark.Rows[1].Cells[167].Value = PasteInfo.GrabLine_Enable1.ToString();
                    #endregion

                    if (cB_PasteType.SelectedIndex == 0)//dGV_Paste
                    {
                        this.baseAngle.Value = (decimal)PasteInfo.BaseAngle;
                        #region PASTE
                        DelDGV(dGV_Paste);
                        dGV_Paste.Rows.Add(PasteInfo.PastePoints.Length);
                        for (int j = 0; j < PasteInfo.PastePoints.Length; j++)
                        {
                            dGV_Paste.Rows[j].Cells[0].Value = PasteInfo.PastePN[j];
                            dGV_Paste.Rows[j].Cells[1].Value = PasteInfo.PasteEN[j] == true ? "1" : "0";
                            dGV_Paste.Rows[j].Cells[2].Value = PasteInfo.PastePoints[j].X.ToString();
                            dGV_Paste.Rows[j].Cells[3].Value = PasteInfo.PastePoints[j].Y.ToString();
                            dGV_Paste.Rows[j].Cells[4].Value = PasteInfo.PasteAngle[j].ToString();

                            for (int i = 0; i < Variable.NOZZLE_NUM; ++i)
                            {
                                dGV_Paste.Rows[j].Cells[5 + i].Value = PasteInfo.PasteHeight[j][i].ToString();
                            }

                            dGV_Paste.Rows[j].Cells[5 + Variable.NOZZLE_NUM].Value = PasteInfo.FeederIndex[j].ToString();
                            dGV_Paste.Rows[j].Cells[6 + Variable.NOZZLE_NUM].Value = PasteInfo.NozzleIndex[j].ToString();
                            dGV_Paste.Rows[j].Cells[7 + Variable.NOZZLE_NUM].Value = PasteInfo.Delay[j].ToString();
                            dGV_Paste.Rows[j].Cells[8 + Variable.NOZZLE_NUM].Value = PasteInfo.BadMarkEN[j] == true ? "1" : "0";
                            dGV_Paste.Rows[j].Cells[9 + Variable.NOZZLE_NUM].Value = PasteInfo.BadMarkPoints[j].X.ToString();
                            dGV_Paste.Rows[j].Cells[10 + Variable.NOZZLE_NUM].Value = PasteInfo.BadMarkPoints[j].Y.ToString();
                            dGV_Paste.Rows[j].Cells[11 + Variable.NOZZLE_NUM].Value = PasteInfo.IsPastePointsAbs[j] == true ? "1" : "0";

                            dGV_Paste.Rows[j].Cells[12 + Variable.NOZZLE_NUM].Value = PasteInfo.OffsetX_Single[j].ToString();
                            dGV_Paste.Rows[j].Cells[13 + Variable.NOZZLE_NUM].Value = PasteInfo.OffsetY_Single[j].ToString();
                            if (PasteInfo.Region[j] == null)
                                PasteInfo.Region[j] = "A";
                            dGV_Paste.Rows[j].Cells[14 + Variable.NOZZLE_NUM].Value = PasteInfo.Region[j].ToString();

                        }
                        AddRowHeader(dGV_Paste);

                        tROI_TOP_BadMark.Text = PasteInfo.BadMark_ROI_Top.ToString();
                        tROI_LEFT_BadMark.Text = PasteInfo.BadMark_ROI_Left.ToString();
                        tROI_WIDTH_BadMark.Text = PasteInfo.BadMark_ROI_Width.ToString();
                        tROI_HEIGHT_BadMark.Text = PasteInfo.BadMark_ROI_Height.ToString();
                        tAreaOKNG.Text = PasteInfo.BadMark_LimtArea.ToString();
                        tThresholdPICValue.Text = PasteInfo.BadMark_Threshold.ToString();
                        if (PasteInfo.ISBadMarkWhite == 0)
                        {
                            rB_ISWhite.Checked = true;
                        }
                        if (PasteInfo.ISBadMarkWhite == 1)
                        {
                            rB_ISBlack.Checked = true;
                        }
                        if (PasteInfo.ISBadMarkWhite == 2)
                        {
                            rB_ISWhiteLess.Checked = true;
                        }
                        if (PasteInfo.ISBadMarkWhite == 3)
                        {
                            rB_ISBlackLess.Checked = true;
                        }
                        #endregion
                    }
                    gB_PasteInfo.Visible = true;

                    DataGridViewCellEventArgs a = new DataGridViewCellEventArgs(0, 0);
                    dGV_Mark_CellClick(sender, a);
                    if (VariableSys.LanguageFlag == 1)
                    {
                        MessageBox.Show("Load Program Succesfully!", "Info");
                    }
                    else
                    {
                        MessageBox.Show("导入成功", "提示");
                    }

                }
                else
                {
                    if (VariableSys.LanguageFlag == 1)
                    {
                        MessageBox.Show("Load Program Fail!", "Info");
                    }
                    else
                    {
                        MessageBox.Show("导入失败", "提示");
                    }

                }
            }
        }

        private void dGV_Mark_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            //显示到UI
            try
            {
                Mark_Index = (short)(dGV_Mark.SelectedRows[0].Index);
                cB_AlignIndex.SelectedIndex = int.Parse(dGV_Mark.SelectedRows[0].Cells[3].Value.ToString());
                nUDX_Pro.Value = decimal.Parse(dGV_Mark.SelectedRows[0].Cells[10].Value.ToString());
                nUDX_Pro.Value = decimal.Parse(dGV_Mark.SelectedRows[0].Cells[11].Value.ToString());
                tScore.Text = dGV_Mark.SelectedRows[0].Cells[15].Value.ToString();
                tMinAngle.Text = dGV_Mark.SelectedRows[0].Cells[16].Value.ToString();
                tMaxAngle.Text = dGV_Mark.SelectedRows[0].Cells[17].Value.ToString();
                tCircleMin.Text = dGV_Mark.SelectedRows[0].Cells[22].Value.ToString();
                tCircleMax.Text = dGV_Mark.SelectedRows[0].Cells[23].Value.ToString();

                this.tGainInit.Text = dGV_Mark.SelectedRows[0].Cells[147].Value.ToString();
                this.tOffsetInit.Text = dGV_Mark.SelectedRows[0].Cells[148].Value.ToString();

                cB_LabelArea.Checked = dGV_Mark.SelectedRows[0].Cells[159].Value.ToString() == "1" ? true : false;
                tMinArea.Text = dGV_Mark.SelectedRows[0].Cells[160].Value.ToString();
                tMaxArea.Text = dGV_Mark.SelectedRows[0].Cells[161].Value.ToString();
                rB_WhiteBig.Checked = dGV_Mark.SelectedRows[0].Cells[162].Value.ToString() == "1" ? true : false;
                rB_BlackBig.Checked = dGV_Mark.SelectedRows[0].Cells[162].Value.ToString() == "2" ? true : false;
                cb_EnableGrabLine.Checked = dGV_Mark.SelectedRows[0].Cells[167].Value.ToString() == "True" ? true : false;

                if (rB_ROI_H1.Checked)
                {
                    tLineStrength.Text = dGV_Mark.SelectedRows[0].Cells[51].Value.ToString();
                    //图像方向
                    if (dGV_Mark.SelectedRows[0].Cells[52].Value.ToString() == "Top2Bottom")
                    {
                        rB_Dire_T2B.Checked = true;
                    }
                    if (dGV_Mark.SelectedRows[0].Cells[52].Value.ToString() == "Bottom2Top")
                    {
                        rB_Dire_B2T.Checked = true;
                    }
                    //亮度方向
                    if (dGV_Mark.SelectedRows[0].Cells[53].Value.ToString() == "Black2White")
                    {
                        rB_Dire_B2W.Checked = true;
                    }
                    if (dGV_Mark.SelectedRows[0].Cells[53].Value.ToString() == "White2Black")
                    {
                        rB_Dire_W2B.Checked = true;
                    }
                }
                if (rB_ROI_H2.Checked)
                {
                    tLineStrength.Text = dGV_Mark.SelectedRows[0].Cells[79].Value.ToString();
                    //图像方向
                    if (dGV_Mark.SelectedRows[0].Cells[80].Value.ToString() == "Top2Bottom")
                    {
                        rB_Dire_T2B.Checked = true;
                    }
                    if (dGV_Mark.SelectedRows[0].Cells[80].Value.ToString() == "Bottom2Top")
                    {
                        rB_Dire_B2T.Checked = true;
                    }
                    //亮度方向
                    if (dGV_Mark.SelectedRows[0].Cells[81].Value.ToString() == "Black2White")
                    {
                        rB_Dire_B2W.Checked = true;
                    }
                    if (dGV_Mark.SelectedRows[0].Cells[81].Value.ToString() == "White2Black")
                    {
                        rB_Dire_W2B.Checked = true;
                    }
                    //tLineStrength---79
                    //PicDir ---80
                    //GrayValueDir -81
                }
                if (rB_ROI_V1.Checked)
                {
                    tLineStrength.Text = dGV_Mark.SelectedRows[0].Cells[107].Value.ToString();
                    //图像方向
                    if (dGV_Mark.SelectedRows[0].Cells[108].Value.ToString() == "Left2Right")
                    {
                        rB_Dire_L2R.Checked = true;
                    }
                    if (dGV_Mark.SelectedRows[0].Cells[108].Value.ToString() == "Right2Left")
                    {
                        rB_Dire_R2L.Checked = true;
                    }
                    //亮度方向
                    if (dGV_Mark.SelectedRows[0].Cells[109].Value.ToString() == "Black2White")
                    {
                        rB_Dire_B2W.Checked = true;
                    }
                    if (dGV_Mark.SelectedRows[0].Cells[109].Value.ToString() == "White2Black")
                    {
                        rB_Dire_W2B.Checked = true;
                    }
                    //tLineStrength---107
                    //PicDir ---108
                    //GrayValueDir -109
                }
                if (rB_ROI_V2.Checked)
                {
                    tLineStrength.Text = dGV_Mark.SelectedRows[0].Cells[135].Value.ToString();
                    //图像方向
                    if (dGV_Mark.SelectedRows[0].Cells[136].Value.ToString() == "Left2Right")
                    {
                        rB_Dire_L2R.Checked = true;
                    }
                    if (dGV_Mark.SelectedRows[0].Cells[136].Value.ToString() == "Right2Left")
                    {
                        rB_Dire_R2L.Checked = true;
                    }
                    //亮度方向
                    if (dGV_Mark.SelectedRows[0].Cells[137].Value.ToString() == "Black2White")
                    {
                        rB_Dire_B2W.Checked = true;
                    }
                    if (dGV_Mark.SelectedRows[0].Cells[137].Value.ToString() == "White2Black")
                    {
                        rB_Dire_W2B.Checked = true;
                    }
                    //tLineStrength---135
                    //PicDir ---136
                    //GrayValueDir -137
                }
                try
                {
                    if (Mark_Index == 0)
                    {
                        Algorithms.Copy(PasteInfo.Align1, image_Edit.Image);
                    }
                    else
                    {
                        Algorithms.Copy(PasteInfo.Align2, image_Edit.Image);
                    }
                }
                catch
                {
                }
            }
            catch
            {
            }
        }

        private void rB_Align_Pattern_CheckedChanged(object sender, EventArgs e)
        {
            dGV_Mark.Rows[Mark_Index].Cells[3].Value = "1";
        }

        private void rB_Align_Pattern_Click(object sender, EventArgs e)
        {
            dGV_Mark.Rows[Mark_Index].Cells[3].Value = "1";
        }

        private void rB_Align_Edge_CheckedChanged(object sender, EventArgs e)
        {
            dGV_Mark.Rows[Mark_Index].Cells[3].Value = "2";
        }

        private void rB_Align_Edge_Click(object sender, EventArgs e)
        {
            dGV_Mark.Rows[Mark_Index].Cells[3].Value = "2";
        }

        private void rB_Align_Circle_CheckedChanged(object sender, EventArgs e)
        {
            dGV_Mark.Rows[Mark_Index].Cells[3].Value = "3";
        }

        private void rB_Align_Circle_Click(object sender, EventArgs e)
        {
            dGV_Mark.Rows[Mark_Index].Cells[3].Value = "3";
        }

        private void rB_Align_Edge_Circle_CheckedChanged(object sender, EventArgs e)
        {
            dGV_Mark.Rows[Mark_Index].Cells[3].Value = "5";
        }

        private void rB_Align_Pattern_Circle_CheckedChanged(object sender, EventArgs e)
        {
            dGV_Mark.Rows[Mark_Index].Cells[3].Value = "4";
        }

        private void rB_Align_Pattern_Circle_Click(object sender, EventArgs e)
        {
            dGV_Mark.Rows[Mark_Index].Cells[3].Value = "4";
        }

        private void rB_Align_Edge_Circle_Click(object sender, EventArgs e)
        {
            dGV_Mark.Rows[Mark_Index].Cells[3].Value = "5";
        }

        private void bCamPoint_Click(object sender, EventArgs e)
        {
            dGV_Mark.Rows[Mark_Index].Cells[0].Value = this.XYPos.X.ToString();
            dGV_Mark.Rows[Mark_Index].Cells[1].Value = this.XYPos.Y.ToString();
            bCamPoint.BackColor = Color.GreenYellow;
        }

        private void bShutter_Edit_Click(object sender, EventArgs e)
        {
            dGV_Mark.Rows[Mark_Index].Cells[2].Value = ntCamShutter.Value.ToString();
            bShutter_Edit.BackColor = Color.GreenYellow;
        }

        private void bLight_Click(object sender, EventArgs e)
        {
            UpdateLightPlan();
            dGV_Mark.Rows[Mark_Index].Cells[141].Value = VariableSys.bRedU == true ? "1" : "0";
            dGV_Mark.Rows[Mark_Index].Cells[142].Value = VariableSys.bGreenU == true ? "1" : "0";
            dGV_Mark.Rows[Mark_Index].Cells[143].Value = VariableSys.bBlueU == true ? "1" : "0";
            dGV_Mark.Rows[Mark_Index].Cells[144].Value = VariableSys.dRedValue_U.ToString();
            dGV_Mark.Rows[Mark_Index].Cells[145].Value = VariableSys.dGreenValue_U.ToString();
            dGV_Mark.Rows[Mark_Index].Cells[146].Value = VariableSys.dBlueValue_U.ToString();
            bLight.BackColor = Color.LightGreen;
        }

        private void bLightDown_Click(object sender, EventArgs e)
        {
            UpdateLightPlan();
            dGV_Mark.Rows[Mark_Index].Cells[141].Value = VariableSys.bRedD == true ? "1" : "0";
            dGV_Mark.Rows[Mark_Index].Cells[142].Value = VariableSys.bGreenD == true ? "1" : "0";
            dGV_Mark.Rows[Mark_Index].Cells[143].Value = VariableSys.bBlueD == true ? "1" : "0";
            dGV_Mark.Rows[Mark_Index].Cells[144].Value = VariableSys.dRedValue_D.ToString();
            dGV_Mark.Rows[Mark_Index].Cells[145].Value = VariableSys.dGreenValue_D.ToString();
            dGV_Mark.Rows[Mark_Index].Cells[146].Value = VariableSys.dBlueValue_D.ToString();
            bLightDown.BackColor = Color.LightGreen;
        }

        private void bCamPointGo_Click(object sender, EventArgs e)
        {
            PointF A = new PointF(float.Parse(dGV_Mark.Rows[Mark_Index].Cells[0].Value.ToString()), float.Parse(dGV_Mark.Rows[Mark_Index].Cells[1].Value.ToString()));
            if (this.All_ZGoSafeTillStop(2000, VariableSys.VelMode_Debug_Manual))
            {
                XYGoPos(A, VariableSys.VelMode_Current_Manual);
            }
        }

        private void bLearn_Edit_Click(object sender, EventArgs e)
        {
            int EdgeStrength = 0;
            try
            {
                EdgeStrength = int.Parse(tEdgeStrength.Text);
                curveOptions.Threshold = EdgeStrength;
                if (Mark_Index == 0)
                {
                    PasteInfo.Align1 = new VisionImage();
                }
                if (Mark_Index == 1)
                {
                    PasteInfo.Align2 = new VisionImage();
                }
                if (dGV_Mark.Rows[Mark_Index].Cells[3].Value.ToString() == "1" || dGV_Mark.Rows[Mark_Index].Cells[3].Value.ToString() == "4" || dGV_Mark.Rows[Mark_Index].Cells[3].Value.ToString() == "7")
                {
                    if (Mark_Index == 0)
                    {
                        Extract_LearnPttern(imageSet.Image, PasteInfo.Align1);
                        Algorithms.Copy(PasteInfo.Align1, image_Edit.Image);
                    }
                    if (Mark_Index == 1)
                    {
                        Extract_LearnPttern(imageSet.Image, PasteInfo.Align2);
                        Algorithms.Copy(PasteInfo.Align2, image_Edit.Image);
                    }

                }
                if (dGV_Mark.Rows[Mark_Index].Cells[3].Value.ToString() == "2" || dGV_Mark.Rows[Mark_Index].Cells[3].Value.ToString() == "5" || dGV_Mark.Rows[Mark_Index].Cells[3].Value.ToString() == "8")
                {
                    if (Mark_Index == 0)
                    {
                        Extract_LearnGemetric(imageSet.Image, PasteInfo.Align1);
                        Algorithms.Copy(PasteInfo.Align1, image_Edit.Image);
                    }
                    if (Mark_Index == 1)
                    {
                        Extract_LearnGemetric(imageSet.Image, PasteInfo.Align2);
                        Algorithms.Copy(PasteInfo.Align2, image_Edit.Image);
                    }
                }
                curveOptions.Threshold = EdgeStrength;
                if (dGV_Mark.Rows[Mark_Index].Cells[3].Value.ToString() == "1" || dGV_Mark.Rows[Mark_Index].Cells[3].Value.ToString() == "4")
                {
                    if (Mark_Index == 0)
                    {
                        Extract_LearnPttern(imageSet.Image, PasteInfo.Align1);
                        Algorithms.Copy(PasteInfo.Align1, image_Edit.Image);
                    }
                    if (Mark_Index == 1)
                    {
                        Extract_LearnPttern(imageSet.Image, PasteInfo.Align2);
                        Algorithms.Copy(PasteInfo.Align2, image_Edit.Image);
                    }

                }
                if (dGV_Mark.Rows[Mark_Index].Cells[3].Value.ToString() == "2" || dGV_Mark.Rows[Mark_Index].Cells[3].Value.ToString() == "5")
                {
                    if (Mark_Index == 0)
                    {
                        Extract_LearnGemetric(imageSet.Image, PasteInfo.Align1);
                        Algorithms.Copy(PasteInfo.Align1, image_Edit.Image);
                    }
                    if (Mark_Index == 1)
                    {
                        Extract_LearnGemetric(imageSet.Image, PasteInfo.Align2);
                        Algorithms.Copy(PasteInfo.Align2, image_Edit.Image);
                    }
                }
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("请正确输入强度数值", "提示");
                }

                return;
            }
        }

        private void bDetect_Edit_Click(object sender, EventArgs e)
        {
            short Score = 600;
            double MinR = -10;
            double MaxR = 10;
            short rtn = 0;
            Variable.CamReturn a = new Variable.CamReturn();
            try
            {
                Score = short.Parse(tScore.Text);
                MinR = double.Parse(tMinAngle.Text);
                MaxR = double.Parse(tMaxAngle.Text);
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("请正确输入数值", "提示");
                }
                return;
            }

            if (dGV_Mark.Rows[Mark_Index].Cells[3].Value.ToString() == "1" || dGV_Mark.Rows[Mark_Index].Cells[3].Value.ToString() == "4" || dGV_Mark.Rows[Mark_Index].Cells[3].Value.ToString() == "7")
            {
                if (Mark_Index == 0)
                {
                    rtn = CamDetect_PatternMatch(imageSet.Image, PasteInfo.Align1, (float)Score, 1, (float)MinR, (float)MaxR, imageSet.Roi, ref a, int.Parse(nUDX_Pro.Value.ToString()), int.Parse(nUDY_Pro.Value.ToString()));
                }
                if (Mark_Index == 1)
                {
                    rtn = CamDetect_PatternMatch(imageSet.Image, PasteInfo.Align2, (float)Score, 1, (float)MinR, (float)MaxR, imageSet.Roi, ref a, int.Parse(nUDX_Pro.Value.ToString()), int.Parse(nUDY_Pro.Value.ToString()));
                }
            }

            if (dGV_Mark.Rows[Mark_Index].Cells[3].Value.ToString() == "2" || dGV_Mark.Rows[Mark_Index].Cells[3].Value.ToString() == "5" || dGV_Mark.Rows[Mark_Index].Cells[3].Value.ToString() == "8")
            {
                if (Mark_Index == 0)
                {
                    rtn = CamDetect_SearchGeometric(imageSet.Image, PasteInfo.Align1, imageSet.Roi, Score, 1, MinR, MaxR, 100, 100, 0, 25, ref a, int.Parse(nUDX_Pro.Value.ToString()), int.Parse(nUDY_Pro.Value.ToString()));
                }
                if (Mark_Index == 1)
                {
                    rtn = CamDetect_SearchGeometric(imageSet.Image, PasteInfo.Align2, imageSet.Roi, Score, 1, MinR, MaxR, 100, 100, 0, 25, ref a, int.Parse(nUDX_Pro.Value.ToString()), int.Parse(nUDY_Pro.Value.ToString()));
                }
            }
            try
            {
                #region Area侦测1
                if (Mark_Index == 0)
                {
                    bool bIsWhite = true;
                    PasteInfo.bAreaEN1 = cB_LabelArea.Checked;
                    PasteInfo.iAreaMin1 = int.Parse(tMinArea.Text);
                    PasteInfo.iAreaMax1 = int.Parse(tMaxArea.Text);
                    if (rB_WhiteBig.Checked)
                    {
                        bIsWhite = true;
                        PasteInfo.iAreaOKStyle1 = 1;
                    }
                    if (rB_BlackBig.Checked)
                    {
                        bIsWhite = false;
                        PasteInfo.iAreaOKStyle1 = 2;
                    }

                    if (PasteInfo.bAreaEN1)
                    {
                        int areaCount = AreaCount(imageSet.Image, imageSet.Roi, bIsWhite);
                        tAreaDetect.Text = areaCount.ToString();
                        if (areaCount > PasteInfo.iAreaMin1 && areaCount < PasteInfo.iAreaMax1)
                        {
                            MessageBox.Show("面积侦测OK", "提示");
                        }
                        else
                        {
                            MessageBox.Show("面积侦测Fail", "提示");
                        }
                    }

                }
                #endregion

                #region Area侦测2
                if (Mark_Index == 1)
                {
                    bool bIsWhite = true;
                    PasteInfo.bAreaEN2 = cB_LabelArea.Checked;
                    PasteInfo.iAreaMin2 = int.Parse(tMinArea.Text);
                    PasteInfo.iAreaMax2 = int.Parse(tMaxArea.Text);
                    if (rB_WhiteBig.Checked)
                    {
                        bIsWhite = true;
                        PasteInfo.iAreaOKStyle2 = 1;
                    }
                    if (rB_BlackBig.Checked)
                    {
                        bIsWhite = false;
                        PasteInfo.iAreaOKStyle2 = 2;
                    }

                    if (PasteInfo.bAreaEN2)
                    {
                        int areaCount = AreaCount(imageSet.Image, imageSet.Roi, bIsWhite);
                        tAreaDetect.Text = areaCount.ToString();

                        if (areaCount > PasteInfo.iAreaMin2 && areaCount < PasteInfo.iAreaMax2)
                        {
                            MessageBox.Show("面积侦测OK", "提示");
                        }
                        else
                        {
                            MessageBox.Show("面积侦测Fail", "提示");
                        }
                    }
                }
            }
            catch
            {
                MessageBox.Show("面积算法数值请正确填写或者图像无ROI框", "提示");
            }
            #endregion

            if (rtn == 0)
            {
                dGV_Mark.Rows[Mark_Index].Cells[6].Value = ((RectangleContour)(imageSet.Roi[0].Shape)).Top.ToString();
                dGV_Mark.Rows[Mark_Index].Cells[7].Value = ((RectangleContour)(imageSet.Roi[0].Shape)).Left.ToString();
                dGV_Mark.Rows[Mark_Index].Cells[8].Value = ((RectangleContour)(imageSet.Roi[0].Shape)).Width.ToString();
                dGV_Mark.Rows[Mark_Index].Cells[9].Value = ((RectangleContour)(imageSet.Roi[0].Shape)).Height.ToString();
                dGV_Mark.Rows[Mark_Index].Cells[10].Value = nUDX_Pro.Value.ToString();
                dGV_Mark.Rows[Mark_Index].Cells[11].Value = nUDY_Pro.Value.ToString();
                dGV_Mark.Rows[Mark_Index].Cells[12].Value = a.X.ToString();
                dGV_Mark.Rows[Mark_Index].Cells[13].Value = a.Y.ToString();
                dGV_Mark.Rows[Mark_Index].Cells[14].Value = a.Angle.ToString();
                dGV_Mark.Rows[Mark_Index].Cells[15].Value = Score.ToString();
                dGV_Mark.Rows[Mark_Index].Cells[16].Value = MinR.ToString();
                dGV_Mark.Rows[Mark_Index].Cells[17].Value = MaxR.ToString();

                if (Mark_Index == 0)
                {
                    dGV_Mark.Rows[Mark_Index].Cells[159].Value = PasteInfo.bAreaEN1 == true ? "1" : "0";
                    dGV_Mark.Rows[Mark_Index].Cells[160].Value = PasteInfo.iAreaMin1.ToString();
                    dGV_Mark.Rows[Mark_Index].Cells[161].Value = PasteInfo.iAreaMax1.ToString();
                    dGV_Mark.Rows[Mark_Index].Cells[162].Value = PasteInfo.iAreaOKStyle1.ToString();
                }
                if (Mark_Index == 1)
                {
                    dGV_Mark.Rows[Mark_Index].Cells[159].Value = PasteInfo.bAreaEN2 == true ? "1" : "0";
                    dGV_Mark.Rows[Mark_Index].Cells[160].Value = PasteInfo.iAreaMin2.ToString();
                    dGV_Mark.Rows[Mark_Index].Cells[161].Value = PasteInfo.iAreaMax2.ToString();
                    dGV_Mark.Rows[Mark_Index].Cells[162].Value = PasteInfo.iAreaOKStyle2.ToString();
                }
            }
            bDetect_Edit.BackColor = Color.GreenYellow;
        }

        private void bDetect_Circle_Click(object sender, EventArgs e)
        {
            short minr, maxr;
            short rtn = 0;
            PointContour a = new PointContour();
            double r = 0;
            try
            {
                minr = short.Parse(tCircleMin.Text);
                maxr = short.Parse(tCircleMax.Text);
                rtn = CamDetect_Circle(imageSet.Image, imageSet.Roi, minr, maxr, ref a, ref r);
                //Algorithms.ImageToImage(imageTemp, imageSet.Image, new PointContour(((RectangleContour)imageSet.Roi[0].Shape).Left, ((RectangleContour)imageSet.Roi[0].Shape).Top));
                if (rtn == 0)
                {
                    tCircleR.Text = r.ToString();
                    dGV_Mark.Rows[Mark_Index].Cells[18].Value = ((RectangleContour)(imageSet.Roi[0].Shape)).Top.ToString();
                    dGV_Mark.Rows[Mark_Index].Cells[19].Value = ((RectangleContour)(imageSet.Roi[0].Shape)).Left.ToString();
                    dGV_Mark.Rows[Mark_Index].Cells[20].Value = ((RectangleContour)(imageSet.Roi[0].Shape)).Width.ToString();
                    dGV_Mark.Rows[Mark_Index].Cells[21].Value = ((RectangleContour)(imageSet.Roi[0].Shape)).Height.ToString();
                    dGV_Mark.Rows[Mark_Index].Cells[22].Value = minr.ToString();
                    dGV_Mark.Rows[Mark_Index].Cells[23].Value = maxr.ToString();
                    dGV_Mark.Rows[Mark_Index].Cells[24].Value = a.X.ToString();
                    dGV_Mark.Rows[Mark_Index].Cells[25].Value = a.Y.ToString();
                    dGV_Mark.Rows[Mark_Index].Cells[149].Value = "1";
                    dGV_Mark.Rows[Mark_Index].Cells[150].Value = "0";
                }
                else
                {
                    if (VariableSys.LanguageFlag == 1)
                    {
                        MessageBox.Show("Detect Circle Fail!", "Info");
                    }
                    else
                    {
                        MessageBox.Show("侦测圆失败", "提示");
                    }
                    return;
                }
                bDetect_Circle.BackColor = Color.GreenYellow;
            }
            catch (System.Exception ex)
            {
                rtn = 1;
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Detect Circle Fail!", "Info");
                }
                else
                {
                    MessageBox.Show("侦测圆失败", "提示");
                }
            }
        }

        private void bUpdataParameter_Click(object sender, EventArgs e)
        {
            #region MARK1
            PasteInfo.CamPoint1 = new PointF();
            PasteInfo.CamPoint1.X = float.Parse(dGV_Mark.Rows[0].Cells[0].Value.ToString());
            PasteInfo.CamPoint1.Y = float.Parse(dGV_Mark.Rows[0].Cells[1].Value.ToString());
            PasteInfo.Shutter1 = short.Parse(dGV_Mark.Rows[0].Cells[2].Value.ToString());
            PasteInfo.AlinIndex1 = short.Parse(dGV_Mark.Rows[0].Cells[3].Value.ToString());

            PasteInfo.Init_ROI_Top1 = short.Parse(dGV_Mark.Rows[0].Cells[6].Value.ToString());
            PasteInfo.Init_ROI_Left1 = short.Parse(dGV_Mark.Rows[0].Cells[7].Value.ToString());
            PasteInfo.Init_ROI_Width1 = short.Parse(dGV_Mark.Rows[0].Cells[8].Value.ToString());
            PasteInfo.Init_ROI_Height1 = short.Parse(dGV_Mark.Rows[0].Cells[9].Value.ToString());
            PasteInfo.Init_OffsetX1 = short.Parse(dGV_Mark.Rows[0].Cells[10].Value.ToString());
            PasteInfo.Init_OffsetY1 = short.Parse(dGV_Mark.Rows[0].Cells[11].Value.ToString());
            PasteInfo.Init_Point1 = new PointF();
            PasteInfo.Init_Point1.X = float.Parse(dGV_Mark.Rows[0].Cells[12].Value.ToString());
            PasteInfo.Init_Point1.Y = float.Parse(dGV_Mark.Rows[0].Cells[13].Value.ToString());
            PasteInfo.Init_Angle1 = float.Parse(dGV_Mark.Rows[0].Cells[14].Value.ToString());
            PasteInfo.Score1 = short.Parse(dGV_Mark.Rows[0].Cells[15].Value.ToString());
            PasteInfo.MinAngle1 = double.Parse(dGV_Mark.Rows[0].Cells[16].Value.ToString());
            PasteInfo.MaxAngle1 = double.Parse(dGV_Mark.Rows[0].Cells[17].Value.ToString());
            PasteInfo.S_ROI_Top1 = short.Parse(dGV_Mark.Rows[0].Cells[18].Value.ToString());
            PasteInfo.S_ROI_Left1 = short.Parse(dGV_Mark.Rows[0].Cells[19].Value.ToString());
            PasteInfo.S_ROI_Width1 = short.Parse(dGV_Mark.Rows[0].Cells[20].Value.ToString());
            PasteInfo.S_ROI_Height1 = short.Parse(dGV_Mark.Rows[0].Cells[21].Value.ToString());
            PasteInfo.S_MinR1 = short.Parse(dGV_Mark.Rows[0].Cells[22].Value.ToString());
            PasteInfo.S_MaxR1 = short.Parse(dGV_Mark.Rows[0].Cells[23].Value.ToString());
            PasteInfo.S_Center1 = new PointF();
            PasteInfo.S_Center1.X = float.Parse(dGV_Mark.Rows[0].Cells[24].Value.ToString());
            PasteInfo.S_Center1.Y = float.Parse(dGV_Mark.Rows[0].Cells[25].Value.ToString());
            //H1************************************************
            PasteInfo.Corner_H1_Point1 = new PointF();
            PasteInfo.Corner_H1_Point1.X = float.Parse(dGV_Mark.Rows[0].Cells[26].Value.ToString());
            PasteInfo.Corner_H1_Point1.Y = float.Parse(dGV_Mark.Rows[0].Cells[27].Value.ToString());
            PasteInfo.Corner_H1_CamPoint1 = new PointF();//拍照点
            PasteInfo.Corner_H1_CamPoint1.X = float.Parse(dGV_Mark.Rows[0].Cells[28].Value.ToString());
            PasteInfo.Corner_H1_CamPoint1.Y = float.Parse(dGV_Mark.Rows[0].Cells[29].Value.ToString());
            PasteInfo.Corner_H1_Shutter1 = double.Parse(dGV_Mark.Rows[0].Cells[30].Value.ToString());
            //H1初定位打光
            PasteInfo.bCorner_H1_Red1 = dGV_Mark.Rows[0].Cells[31].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_H1_Green1 = dGV_Mark.Rows[0].Cells[32].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_H1_Blue1 = dGV_Mark.Rows[0].Cells[33].Value.ToString() == "1" ? true : false;
            PasteInfo.dCorner_H1_RedValue1 = double.Parse(dGV_Mark.Rows[0].Cells[34].Value.ToString());
            PasteInfo.dCorner_H1_GreenValue1 = double.Parse(dGV_Mark.Rows[0].Cells[35].Value.ToString());
            PasteInfo.dCorner_H1_BlueValue1 = double.Parse(dGV_Mark.Rows[0].Cells[36].Value.ToString());
            //H1初定位ROI
            PasteInfo.Corner_H1_Init_Top1 = short.Parse(dGV_Mark.Rows[0].Cells[37].Value.ToString());
            PasteInfo.Corner_H1_Init_Left1 = short.Parse(dGV_Mark.Rows[0].Cells[38].Value.ToString());
            PasteInfo.Corner_H1_Init_Width1 = short.Parse(dGV_Mark.Rows[0].Cells[39].Value.ToString());
            PasteInfo.Corner_H1_Init_Height1 = short.Parse(dGV_Mark.Rows[0].Cells[40].Value.ToString());
            //H1初定位侦测的点
            PasteInfo.Corner_H1_Init_Point1 = new PointF();
            PasteInfo.Corner_H1_Init_Point1.X = float.Parse(dGV_Mark.Rows[0].Cells[41].Value.ToString());
            PasteInfo.Corner_H1_Init_Point1.Y = float.Parse(dGV_Mark.Rows[0].Cells[42].Value.ToString());
            PasteInfo.Corner_H1_Init_Angle1 = double.Parse(dGV_Mark.Rows[0].Cells[43].Value.ToString());
            PasteInfo.Corner_H1_Init_Score1 = short.Parse(dGV_Mark.Rows[0].Cells[44].Value.ToString());//H1初定位 分数
            PasteInfo.Corner_H1_Init_MinAngle1 = double.Parse(dGV_Mark.Rows[0].Cells[45].Value.ToString());//H1初定位 最小角度
            PasteInfo.Corner_H1_Init_MaxAngle1 = double.Parse(dGV_Mark.Rows[0].Cells[46].Value.ToString());//H1初定位 最大角度

            PasteInfo.Corner_H1_Top1 = short.Parse(dGV_Mark.Rows[0].Cells[47].Value.ToString());
            PasteInfo.Corner_H1_Left1 = short.Parse(dGV_Mark.Rows[0].Cells[48].Value.ToString());
            PasteInfo.Corner_H1_Width1 = short.Parse(dGV_Mark.Rows[0].Cells[49].Value.ToString());
            PasteInfo.Corner_H1_Height1 = short.Parse(dGV_Mark.Rows[0].Cells[50].Value.ToString());
            PasteInfo.Corner_H1_EdgeStrength1 = short.Parse(dGV_Mark.Rows[0].Cells[51].Value.ToString());
            PasteInfo.Corner_H1_PicDir1 = dGV_Mark.Rows[0].Cells[52].Value.ToString();
            PasteInfo.Corner_H1_GrayValueDir1 = dGV_Mark.Rows[0].Cells[53].Value.ToString();

            PasteInfo.Corner_H2_Point1 = new PointF();
            PasteInfo.Corner_H2_Point1.X = float.Parse(dGV_Mark.Rows[0].Cells[54].Value.ToString());
            PasteInfo.Corner_H2_Point1.Y = float.Parse(dGV_Mark.Rows[0].Cells[55].Value.ToString());
            PasteInfo.Corner_H2_CamPoint1 = new PointF();//拍照点
            PasteInfo.Corner_H2_CamPoint1.X = float.Parse(dGV_Mark.Rows[0].Cells[56].Value.ToString());
            PasteInfo.Corner_H2_CamPoint1.Y = float.Parse(dGV_Mark.Rows[0].Cells[57].Value.ToString());
            PasteInfo.Corner_H2_Shutter1 = double.Parse(dGV_Mark.Rows[0].Cells[58].Value.ToString());
            //H2初定位打光
            PasteInfo.bCorner_H2_Red1 = dGV_Mark.Rows[0].Cells[59].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_H2_Green1 = dGV_Mark.Rows[0].Cells[60].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_H2_Blue1 = dGV_Mark.Rows[0].Cells[61].Value.ToString() == "1" ? true : false;
            PasteInfo.dCorner_H2_RedValue1 = double.Parse(dGV_Mark.Rows[0].Cells[62].Value.ToString());
            PasteInfo.dCorner_H2_GreenValue1 = double.Parse(dGV_Mark.Rows[0].Cells[63].Value.ToString());
            PasteInfo.dCorner_H2_BlueValue1 = double.Parse(dGV_Mark.Rows[0].Cells[64].Value.ToString());
            //H2初定位ROI
            PasteInfo.Corner_H2_Init_Top1 = short.Parse(dGV_Mark.Rows[0].Cells[65].Value.ToString());
            PasteInfo.Corner_H2_Init_Left1 = short.Parse(dGV_Mark.Rows[0].Cells[66].Value.ToString());
            PasteInfo.Corner_H2_Init_Width1 = short.Parse(dGV_Mark.Rows[0].Cells[67].Value.ToString());
            PasteInfo.Corner_H2_Init_Height1 = short.Parse(dGV_Mark.Rows[0].Cells[68].Value.ToString());
            //H2初定位侦测的点
            PasteInfo.Corner_H2_Init_Point1 = new PointF();
            PasteInfo.Corner_H2_Init_Point1.X = float.Parse(dGV_Mark.Rows[0].Cells[69].Value.ToString());
            PasteInfo.Corner_H2_Init_Point1.Y = float.Parse(dGV_Mark.Rows[0].Cells[70].Value.ToString());
            PasteInfo.Corner_H2_Init_Angle1 = double.Parse(dGV_Mark.Rows[0].Cells[71].Value.ToString());
            PasteInfo.Corner_H2_Init_Score1 = short.Parse(dGV_Mark.Rows[0].Cells[72].Value.ToString());//H1初定位 分数
            PasteInfo.Corner_H2_Init_MinAngle1 = double.Parse(dGV_Mark.Rows[0].Cells[73].Value.ToString());//H1初定位 最小角度
            PasteInfo.Corner_H2_Init_MaxAngle1 = double.Parse(dGV_Mark.Rows[0].Cells[74].Value.ToString());//H1初定位 最大角度

            PasteInfo.Corner_H2_Top1 = short.Parse(dGV_Mark.Rows[0].Cells[75].Value.ToString());
            PasteInfo.Corner_H2_Left1 = short.Parse(dGV_Mark.Rows[0].Cells[76].Value.ToString());
            PasteInfo.Corner_H2_Width1 = short.Parse(dGV_Mark.Rows[0].Cells[77].Value.ToString());
            PasteInfo.Corner_H2_Height1 = short.Parse(dGV_Mark.Rows[0].Cells[78].Value.ToString());
            PasteInfo.Corner_H2_EdgeStrength1 = short.Parse(dGV_Mark.Rows[0].Cells[79].Value.ToString());
            PasteInfo.Corner_H2_PicDir1 = dGV_Mark.Rows[0].Cells[80].Value.ToString();
            PasteInfo.Corner_H2_GrayValueDir1 = dGV_Mark.Rows[0].Cells[81].Value.ToString();

            PasteInfo.Corner_V1_Point1 = new PointF();
            PasteInfo.Corner_V1_Point1.X = float.Parse(dGV_Mark.Rows[0].Cells[82].Value.ToString());
            PasteInfo.Corner_V1_Point1.Y = float.Parse(dGV_Mark.Rows[0].Cells[83].Value.ToString());
            PasteInfo.Corner_V1_CamPoint1 = new PointF();//拍照点
            PasteInfo.Corner_V1_CamPoint1.X = float.Parse(dGV_Mark.Rows[0].Cells[84].Value.ToString());
            PasteInfo.Corner_V1_CamPoint1.Y = float.Parse(dGV_Mark.Rows[0].Cells[85].Value.ToString());
            PasteInfo.Corner_V1_Shutter1 = double.Parse(dGV_Mark.Rows[0].Cells[86].Value.ToString());
            //V1初定位打光
            PasteInfo.bCorner_V1_Red1 = dGV_Mark.Rows[0].Cells[87].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_V1_Green1 = dGV_Mark.Rows[0].Cells[88].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_V1_Blue1 = dGV_Mark.Rows[0].Cells[89].Value.ToString() == "1" ? true : false;
            PasteInfo.dCorner_V1_RedValue1 = double.Parse(dGV_Mark.Rows[0].Cells[90].Value.ToString());
            PasteInfo.dCorner_V1_GreenValue1 = double.Parse(dGV_Mark.Rows[0].Cells[91].Value.ToString());
            PasteInfo.dCorner_V1_BlueValue1 = double.Parse(dGV_Mark.Rows[0].Cells[92].Value.ToString());
            //V1初定位ROI
            PasteInfo.Corner_V1_Init_Top1 = short.Parse(dGV_Mark.Rows[0].Cells[93].Value.ToString());
            PasteInfo.Corner_V1_Init_Left1 = short.Parse(dGV_Mark.Rows[0].Cells[94].Value.ToString());
            PasteInfo.Corner_V1_Init_Width1 = short.Parse(dGV_Mark.Rows[0].Cells[95].Value.ToString());
            PasteInfo.Corner_V1_Init_Height1 = short.Parse(dGV_Mark.Rows[0].Cells[96].Value.ToString());
            //V1初定位侦测的点
            PasteInfo.Corner_V1_Init_Point1 = new PointF();
            PasteInfo.Corner_V1_Init_Point1.X = float.Parse(dGV_Mark.Rows[0].Cells[97].Value.ToString());
            PasteInfo.Corner_V1_Init_Point1.Y = float.Parse(dGV_Mark.Rows[0].Cells[98].Value.ToString());
            PasteInfo.Corner_V1_Init_Angle1 = double.Parse(dGV_Mark.Rows[0].Cells[99].Value.ToString());
            PasteInfo.Corner_V1_Init_Score1 = short.Parse(dGV_Mark.Rows[0].Cells[100].Value.ToString());//H1初定位 分数
            PasteInfo.Corner_V1_Init_MinAngle1 = double.Parse(dGV_Mark.Rows[0].Cells[101].Value.ToString());//H1初定位 最小角度
            PasteInfo.Corner_V1_Init_MaxAngle1 = double.Parse(dGV_Mark.Rows[0].Cells[102].Value.ToString());//H1初定位 最大角度

            PasteInfo.Corner_V1_Top1 = short.Parse(dGV_Mark.Rows[0].Cells[103].Value.ToString());
            PasteInfo.Corner_V1_Left1 = short.Parse(dGV_Mark.Rows[0].Cells[104].Value.ToString());
            PasteInfo.Corner_V1_Width1 = short.Parse(dGV_Mark.Rows[0].Cells[105].Value.ToString());
            PasteInfo.Corner_V1_Height1 = short.Parse(dGV_Mark.Rows[0].Cells[106].Value.ToString());
            PasteInfo.Corner_V1_EdgeStrength1 = short.Parse(dGV_Mark.Rows[0].Cells[107].Value.ToString());
            PasteInfo.Corner_V1_PicDir1 = dGV_Mark.Rows[0].Cells[108].Value.ToString();
            PasteInfo.Corner_V1_GrayValueDir1 = dGV_Mark.Rows[0].Cells[109].Value.ToString();
            //V2
            PasteInfo.Corner_V2_Point1 = new PointF();
            PasteInfo.Corner_V2_Point1.X = float.Parse(dGV_Mark.Rows[0].Cells[110].Value.ToString());
            PasteInfo.Corner_V2_Point1.Y = float.Parse(dGV_Mark.Rows[0].Cells[111].Value.ToString());

            PasteInfo.Corner_V2_CamPoint1 = new PointF();//拍照点
            PasteInfo.Corner_V2_CamPoint1.X = float.Parse(dGV_Mark.Rows[0].Cells[112].Value.ToString());
            PasteInfo.Corner_V2_CamPoint1.Y = float.Parse(dGV_Mark.Rows[0].Cells[113].Value.ToString());
            PasteInfo.Corner_V2_Shutter1 = double.Parse(dGV_Mark.Rows[0].Cells[114].Value.ToString());
            //V2初定位打光
            PasteInfo.bCorner_V2_Red1 = dGV_Mark.Rows[0].Cells[115].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_V2_Green1 = dGV_Mark.Rows[0].Cells[116].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_V2_Blue1 = dGV_Mark.Rows[0].Cells[117].Value.ToString() == "1" ? true : false;
            PasteInfo.dCorner_V2_RedValue1 = double.Parse(dGV_Mark.Rows[0].Cells[118].Value.ToString());
            PasteInfo.dCorner_V2_GreenValue1 = double.Parse(dGV_Mark.Rows[0].Cells[119].Value.ToString());
            PasteInfo.dCorner_V2_BlueValue1 = double.Parse(dGV_Mark.Rows[0].Cells[120].Value.ToString());
            //V2初定位ROI
            PasteInfo.Corner_V2_Init_Top1 = short.Parse(dGV_Mark.Rows[0].Cells[121].Value.ToString());
            PasteInfo.Corner_V2_Init_Left1 = short.Parse(dGV_Mark.Rows[0].Cells[122].Value.ToString());
            PasteInfo.Corner_V2_Init_Width1 = short.Parse(dGV_Mark.Rows[0].Cells[123].Value.ToString());
            PasteInfo.Corner_V2_Init_Height1 = short.Parse(dGV_Mark.Rows[0].Cells[124].Value.ToString());
            //V2初定位侦测的点
            PasteInfo.Corner_V2_Init_Point1 = new PointF();
            PasteInfo.Corner_V2_Init_Point1.X = float.Parse(dGV_Mark.Rows[0].Cells[125].Value.ToString());
            PasteInfo.Corner_V2_Init_Point1.Y = float.Parse(dGV_Mark.Rows[0].Cells[126].Value.ToString());
            PasteInfo.Corner_V2_Init_Angle1 = double.Parse(dGV_Mark.Rows[0].Cells[127].Value.ToString());
            PasteInfo.Corner_V2_Init_Score1 = short.Parse(dGV_Mark.Rows[0].Cells[128].Value.ToString());//H1初定位 分数
            PasteInfo.Corner_V2_Init_MinAngle1 = double.Parse(dGV_Mark.Rows[0].Cells[129].Value.ToString());//H1初定位 最小角度
            PasteInfo.Corner_V2_Init_MaxAngle1 = double.Parse(dGV_Mark.Rows[0].Cells[130].Value.ToString());//H1初定位 最大角度

            PasteInfo.Corner_V2_Top1 = short.Parse(dGV_Mark.Rows[0].Cells[131].Value.ToString());
            PasteInfo.Corner_V2_Left1 = short.Parse(dGV_Mark.Rows[0].Cells[132].Value.ToString());
            PasteInfo.Corner_V2_Width1 = short.Parse(dGV_Mark.Rows[0].Cells[133].Value.ToString());
            PasteInfo.Corner_V2_Height1 = short.Parse(dGV_Mark.Rows[0].Cells[134].Value.ToString());
            PasteInfo.Corner_V2_EdgeStrength1 = short.Parse(dGV_Mark.Rows[0].Cells[135].Value.ToString());
            PasteInfo.Corner_V2_PicDir1 = dGV_Mark.Rows[0].Cells[136].Value.ToString();
            PasteInfo.Corner_V2_GrayValueDir1 = dGV_Mark.Rows[0].Cells[137].Value.ToString();

            PasteInfo.Corner_Point1 = new PointF();
            PasteInfo.Corner_Point1.X = float.Parse(dGV_Mark.Rows[0].Cells[138].Value.ToString());
            PasteInfo.Corner_Point1.Y = float.Parse(dGV_Mark.Rows[0].Cells[139].Value.ToString());

            PasteInfo.CornerAngleIndex1 = short.Parse(dGV_Mark.Rows[0].Cells[140].Value.ToString());

            PasteInfo.bRed1 = dGV_Mark.Rows[0].Cells[141].Value.ToString() == "1" ? true : false;
            PasteInfo.bGreen1 = dGV_Mark.Rows[0].Cells[142].Value.ToString() == "1" ? true : false;
            PasteInfo.bBlue1 = dGV_Mark.Rows[0].Cells[143].Value.ToString() == "1" ? true : false;
            PasteInfo.dRedValue1 = double.Parse(dGV_Mark.Rows[0].Cells[144].Value.ToString());
            PasteInfo.dGreenValue1 = double.Parse(dGV_Mark.Rows[0].Cells[145].Value.ToString());
            PasteInfo.dBlueValue1 = double.Parse(dGV_Mark.Rows[0].Cells[146].Value.ToString());

            PasteInfo.GainInit1 = double.Parse(dGV_Mark.Rows[0].Cells[147].Value.ToString());
            PasteInfo.OffsetInit1 = double.Parse(dGV_Mark.Rows[0].Cells[148].Value.ToString());
            PasteInfo.GainCircle1 = double.Parse(dGV_Mark.Rows[0].Cells[149].Value.ToString());
            PasteInfo.OffsetCircle1 = double.Parse(dGV_Mark.Rows[0].Cells[150].Value.ToString());
            PasteInfo.GainH1_1 = double.Parse(dGV_Mark.Rows[0].Cells[151].Value.ToString());
            PasteInfo.OffsetH1_1 = double.Parse(dGV_Mark.Rows[0].Cells[152].Value.ToString());
            PasteInfo.GainH2_1 = double.Parse(dGV_Mark.Rows[0].Cells[153].Value.ToString());
            PasteInfo.OffsetH2_1 = double.Parse(dGV_Mark.Rows[0].Cells[154].Value.ToString());
            PasteInfo.GainV1_1 = double.Parse(dGV_Mark.Rows[0].Cells[155].Value.ToString());
            PasteInfo.OffsetV1_1 = double.Parse(dGV_Mark.Rows[0].Cells[156].Value.ToString());
            PasteInfo.GainV2_1 = double.Parse(dGV_Mark.Rows[0].Cells[157].Value.ToString());
            PasteInfo.OffsetV2_1 = double.Parse(dGV_Mark.Rows[0].Cells[158].Value.ToString());

            PasteInfo.bAreaEN1 = dGV_Mark.Rows[0].Cells[159].Value.ToString() == "1" ? true : false;
            PasteInfo.iAreaMin1 = int.Parse(dGV_Mark.Rows[0].Cells[160].Value.ToString());
            PasteInfo.iAreaMax1 = short.Parse(dGV_Mark.Rows[0].Cells[161].Value.ToString());
            PasteInfo.iAreaOKStyle1 = short.Parse(dGV_Mark.Rows[0].Cells[162].Value.ToString());

            PasteInfo.GrabLine_EdgeStrength1 = double.Parse(dGV_Mark.Rows[0].Cells[163].Value.ToString());
            PasteInfo.GrabLine_PicDir1 = dGV_Mark.Rows[0].Cells[164].Value.ToString();
            PasteInfo.GrabLine_GrayValueDir1 = dGV_Mark.Rows[0].Cells[165].Value.ToString();
            PasteInfo.GrabLine_ROI1 = dGV_Mark.Rows[0].Cells[166].Value.ToString();
            PasteInfo.GrabLine_Enable1 = dGV_Mark.Rows[0].Cells[167].Value.ToString() == "True" ? true : false;
            #endregion

            #region MARK2
            PasteInfo.CamPoint2 = new PointF();
            PasteInfo.CamPoint2.X = float.Parse(dGV_Mark.Rows[1].Cells[0].Value.ToString());
            PasteInfo.CamPoint2.Y = float.Parse(dGV_Mark.Rows[1].Cells[1].Value.ToString());
            PasteInfo.Shutter2 = short.Parse(dGV_Mark.Rows[1].Cells[2].Value.ToString());
            PasteInfo.AlinIndex2 = short.Parse(dGV_Mark.Rows[1].Cells[3].Value.ToString());

            PasteInfo.Init_ROI_Top2 = short.Parse(dGV_Mark.Rows[1].Cells[6].Value.ToString());
            PasteInfo.Init_ROI_Left2 = short.Parse(dGV_Mark.Rows[1].Cells[7].Value.ToString());
            PasteInfo.Init_ROI_Width2 = short.Parse(dGV_Mark.Rows[1].Cells[8].Value.ToString());
            PasteInfo.Init_ROI_Height2 = short.Parse(dGV_Mark.Rows[1].Cells[9].Value.ToString());
            PasteInfo.Init_OffsetX2 = short.Parse(dGV_Mark.Rows[1].Cells[10].Value.ToString());
            PasteInfo.Init_OffsetY2 = short.Parse(dGV_Mark.Rows[1].Cells[11].Value.ToString());
            PasteInfo.Init_Point2 = new PointF();
            PasteInfo.Init_Point2.X = float.Parse(dGV_Mark.Rows[1].Cells[12].Value.ToString());
            PasteInfo.Init_Point2.Y = float.Parse(dGV_Mark.Rows[1].Cells[13].Value.ToString());
            PasteInfo.Init_Angle2 = float.Parse(dGV_Mark.Rows[1].Cells[14].Value.ToString());
            PasteInfo.Score2 = short.Parse(dGV_Mark.Rows[1].Cells[15].Value.ToString());
            PasteInfo.MinAngle2 = double.Parse(dGV_Mark.Rows[1].Cells[16].Value.ToString());
            PasteInfo.MaxAngle2 = double.Parse(dGV_Mark.Rows[1].Cells[17].Value.ToString());
            PasteInfo.S_ROI_Top2 = short.Parse(dGV_Mark.Rows[1].Cells[18].Value.ToString());
            PasteInfo.S_ROI_Left2 = short.Parse(dGV_Mark.Rows[1].Cells[19].Value.ToString());
            PasteInfo.S_ROI_Width2 = short.Parse(dGV_Mark.Rows[1].Cells[20].Value.ToString());
            PasteInfo.S_ROI_Height2 = short.Parse(dGV_Mark.Rows[1].Cells[21].Value.ToString());
            PasteInfo.S_MinR2 = short.Parse(dGV_Mark.Rows[1].Cells[22].Value.ToString());
            PasteInfo.S_MaxR2 = short.Parse(dGV_Mark.Rows[1].Cells[23].Value.ToString());
            PasteInfo.S_Center2 = new PointF();
            PasteInfo.S_Center2.X = float.Parse(dGV_Mark.Rows[1].Cells[24].Value.ToString());
            PasteInfo.S_Center2.Y = float.Parse(dGV_Mark.Rows[1].Cells[25].Value.ToString());
            //H1************************************************
            PasteInfo.Corner_H1_Point2 = new PointF();
            PasteInfo.Corner_H1_Point2.X = float.Parse(dGV_Mark.Rows[1].Cells[26].Value.ToString());
            PasteInfo.Corner_H1_Point2.Y = float.Parse(dGV_Mark.Rows[1].Cells[27].Value.ToString());
            PasteInfo.Corner_H1_CamPoint2 = new PointF();//拍照点
            PasteInfo.Corner_H1_CamPoint2.X = float.Parse(dGV_Mark.Rows[1].Cells[28].Value.ToString());
            PasteInfo.Corner_H1_CamPoint2.Y = float.Parse(dGV_Mark.Rows[1].Cells[29].Value.ToString());
            PasteInfo.Corner_H1_Shutter2 = double.Parse(dGV_Mark.Rows[1].Cells[30].Value.ToString());
            //H1初定位打光
            PasteInfo.bCorner_H1_Red2 = dGV_Mark.Rows[1].Cells[31].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_H1_Green2 = dGV_Mark.Rows[1].Cells[32].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_H1_Blue2 = dGV_Mark.Rows[1].Cells[33].Value.ToString() == "1" ? true : false;
            PasteInfo.dCorner_H1_RedValue2 = double.Parse(dGV_Mark.Rows[1].Cells[34].Value.ToString());
            PasteInfo.dCorner_H1_GreenValue2 = double.Parse(dGV_Mark.Rows[1].Cells[35].Value.ToString());
            PasteInfo.dCorner_H1_BlueValue2 = double.Parse(dGV_Mark.Rows[1].Cells[36].Value.ToString());
            //H1初定位ROI
            PasteInfo.Corner_H1_Init_Top2 = short.Parse(dGV_Mark.Rows[1].Cells[37].Value.ToString());
            PasteInfo.Corner_H1_Init_Left2 = short.Parse(dGV_Mark.Rows[1].Cells[38].Value.ToString());
            PasteInfo.Corner_H1_Init_Width2 = short.Parse(dGV_Mark.Rows[1].Cells[39].Value.ToString());
            PasteInfo.Corner_H1_Init_Height2 = short.Parse(dGV_Mark.Rows[1].Cells[40].Value.ToString());
            //H1初定位侦测的点
            PasteInfo.Corner_H1_Init_Point2 = new PointF();
            PasteInfo.Corner_H1_Init_Point2.X = float.Parse(dGV_Mark.Rows[1].Cells[41].Value.ToString());
            PasteInfo.Corner_H1_Init_Point2.Y = float.Parse(dGV_Mark.Rows[1].Cells[42].Value.ToString());
            PasteInfo.Corner_H1_Init_Angle2 = double.Parse(dGV_Mark.Rows[1].Cells[43].Value.ToString());
            PasteInfo.Corner_H1_Init_Score2 = short.Parse(dGV_Mark.Rows[1].Cells[44].Value.ToString());//H1初定位 分数
            PasteInfo.Corner_H1_Init_MinAngle2 = double.Parse(dGV_Mark.Rows[1].Cells[45].Value.ToString());//H1初定位 最小角度
            PasteInfo.Corner_H1_Init_MaxAngle2 = double.Parse(dGV_Mark.Rows[1].Cells[46].Value.ToString());//H1初定位 最大角度

            PasteInfo.Corner_H1_Top2 = short.Parse(dGV_Mark.Rows[1].Cells[47].Value.ToString());
            PasteInfo.Corner_H1_Left2 = short.Parse(dGV_Mark.Rows[1].Cells[48].Value.ToString());
            PasteInfo.Corner_H1_Width2 = short.Parse(dGV_Mark.Rows[1].Cells[49].Value.ToString());
            PasteInfo.Corner_H1_Height2 = short.Parse(dGV_Mark.Rows[1].Cells[50].Value.ToString());
            PasteInfo.Corner_H1_EdgeStrength2 = short.Parse(dGV_Mark.Rows[1].Cells[51].Value.ToString());
            PasteInfo.Corner_H1_PicDir2 = dGV_Mark.Rows[1].Cells[52].Value.ToString();
            PasteInfo.Corner_H1_GrayValueDir2 = dGV_Mark.Rows[1].Cells[53].Value.ToString();

            PasteInfo.Corner_H2_Point2 = new PointF();
            PasteInfo.Corner_H2_Point2.X = float.Parse(dGV_Mark.Rows[1].Cells[54].Value.ToString());
            PasteInfo.Corner_H2_Point2.Y = float.Parse(dGV_Mark.Rows[1].Cells[55].Value.ToString());
            PasteInfo.Corner_H2_CamPoint2 = new PointF();//拍照点
            PasteInfo.Corner_H2_CamPoint2.X = float.Parse(dGV_Mark.Rows[1].Cells[56].Value.ToString());
            PasteInfo.Corner_H2_CamPoint2.Y = float.Parse(dGV_Mark.Rows[1].Cells[57].Value.ToString());
            PasteInfo.Corner_H2_Shutter2 = double.Parse(dGV_Mark.Rows[1].Cells[58].Value.ToString());
            //H2初定位打光
            PasteInfo.bCorner_H2_Red2 = dGV_Mark.Rows[1].Cells[59].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_H2_Green2 = dGV_Mark.Rows[1].Cells[60].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_H2_Blue2 = dGV_Mark.Rows[1].Cells[61].Value.ToString() == "1" ? true : false;
            PasteInfo.dCorner_H2_RedValue2 = double.Parse(dGV_Mark.Rows[1].Cells[62].Value.ToString());
            PasteInfo.dCorner_H2_GreenValue2 = double.Parse(dGV_Mark.Rows[1].Cells[63].Value.ToString());
            PasteInfo.dCorner_H2_BlueValue2 = double.Parse(dGV_Mark.Rows[1].Cells[64].Value.ToString());
            //H2初定位ROI
            PasteInfo.Corner_H2_Init_Top2 = short.Parse(dGV_Mark.Rows[1].Cells[65].Value.ToString());
            PasteInfo.Corner_H2_Init_Left2 = short.Parse(dGV_Mark.Rows[1].Cells[66].Value.ToString());
            PasteInfo.Corner_H2_Init_Width2 = short.Parse(dGV_Mark.Rows[1].Cells[67].Value.ToString());
            PasteInfo.Corner_H2_Init_Height2 = short.Parse(dGV_Mark.Rows[1].Cells[68].Value.ToString());
            //H2初定位侦测的点
            PasteInfo.Corner_H2_Init_Point2 = new PointF();
            PasteInfo.Corner_H2_Init_Point2.X = float.Parse(dGV_Mark.Rows[1].Cells[69].Value.ToString());
            PasteInfo.Corner_H2_Init_Point2.Y = float.Parse(dGV_Mark.Rows[1].Cells[70].Value.ToString());
            PasteInfo.Corner_H2_Init_Angle2 = double.Parse(dGV_Mark.Rows[1].Cells[71].Value.ToString());
            PasteInfo.Corner_H2_Init_Score2 = short.Parse(dGV_Mark.Rows[1].Cells[72].Value.ToString());//H1初定位 分数
            PasteInfo.Corner_H2_Init_MinAngle2 = double.Parse(dGV_Mark.Rows[1].Cells[73].Value.ToString());//H1初定位 最小角度
            PasteInfo.Corner_H2_Init_MaxAngle2 = double.Parse(dGV_Mark.Rows[1].Cells[74].Value.ToString());//H1初定位 最大角度

            PasteInfo.Corner_H2_Top2 = short.Parse(dGV_Mark.Rows[1].Cells[75].Value.ToString());
            PasteInfo.Corner_H2_Left2 = short.Parse(dGV_Mark.Rows[1].Cells[76].Value.ToString());
            PasteInfo.Corner_H2_Width2 = short.Parse(dGV_Mark.Rows[1].Cells[77].Value.ToString());
            PasteInfo.Corner_H2_Height2 = short.Parse(dGV_Mark.Rows[1].Cells[78].Value.ToString());
            PasteInfo.Corner_H2_EdgeStrength2 = short.Parse(dGV_Mark.Rows[1].Cells[79].Value.ToString());
            PasteInfo.Corner_H2_PicDir2 = dGV_Mark.Rows[1].Cells[80].Value.ToString();
            PasteInfo.Corner_H2_GrayValueDir2 = dGV_Mark.Rows[1].Cells[81].Value.ToString();

            PasteInfo.Corner_V1_Point2 = new PointF();
            PasteInfo.Corner_V1_Point2.X = float.Parse(dGV_Mark.Rows[1].Cells[82].Value.ToString());
            PasteInfo.Corner_V1_Point2.Y = float.Parse(dGV_Mark.Rows[1].Cells[83].Value.ToString());
            PasteInfo.Corner_V1_CamPoint2 = new PointF();//拍照点
            PasteInfo.Corner_V1_CamPoint2.X = float.Parse(dGV_Mark.Rows[1].Cells[84].Value.ToString());
            PasteInfo.Corner_V1_CamPoint2.Y = float.Parse(dGV_Mark.Rows[1].Cells[85].Value.ToString());
            PasteInfo.Corner_V1_Shutter2 = double.Parse(dGV_Mark.Rows[1].Cells[86].Value.ToString());
            //V1初定位打光
            PasteInfo.bCorner_V1_Red2 = dGV_Mark.Rows[1].Cells[87].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_V1_Green2 = dGV_Mark.Rows[1].Cells[88].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_V1_Blue2 = dGV_Mark.Rows[1].Cells[89].Value.ToString() == "1" ? true : false;
            PasteInfo.dCorner_V1_RedValue2 = double.Parse(dGV_Mark.Rows[1].Cells[90].Value.ToString());
            PasteInfo.dCorner_V1_GreenValue2 = double.Parse(dGV_Mark.Rows[1].Cells[91].Value.ToString());
            PasteInfo.dCorner_V1_BlueValue2 = double.Parse(dGV_Mark.Rows[1].Cells[92].Value.ToString());
            //V1初定位ROI
            PasteInfo.Corner_V1_Init_Top2 = short.Parse(dGV_Mark.Rows[1].Cells[93].Value.ToString());
            PasteInfo.Corner_V1_Init_Left2 = short.Parse(dGV_Mark.Rows[1].Cells[94].Value.ToString());
            PasteInfo.Corner_V1_Init_Width2 = short.Parse(dGV_Mark.Rows[1].Cells[95].Value.ToString());
            PasteInfo.Corner_V1_Init_Height2 = short.Parse(dGV_Mark.Rows[1].Cells[96].Value.ToString());
            //V1初定位侦测的点
            PasteInfo.Corner_V1_Init_Point2 = new PointF();
            PasteInfo.Corner_V1_Init_Point2.X = float.Parse(dGV_Mark.Rows[1].Cells[97].Value.ToString());
            PasteInfo.Corner_V1_Init_Point2.Y = float.Parse(dGV_Mark.Rows[1].Cells[98].Value.ToString());
            PasteInfo.Corner_V1_Init_Angle2 = double.Parse(dGV_Mark.Rows[1].Cells[99].Value.ToString());
            PasteInfo.Corner_V1_Init_Score2 = short.Parse(dGV_Mark.Rows[1].Cells[100].Value.ToString());//H1初定位 分数
            PasteInfo.Corner_V1_Init_MinAngle2 = double.Parse(dGV_Mark.Rows[1].Cells[101].Value.ToString());//H1初定位 最小角度
            PasteInfo.Corner_V1_Init_MaxAngle2 = double.Parse(dGV_Mark.Rows[1].Cells[102].Value.ToString());//H1初定位 最大角度

            PasteInfo.Corner_V1_Top2 = short.Parse(dGV_Mark.Rows[1].Cells[103].Value.ToString());
            PasteInfo.Corner_V1_Left2 = short.Parse(dGV_Mark.Rows[1].Cells[104].Value.ToString());
            PasteInfo.Corner_V1_Width2 = short.Parse(dGV_Mark.Rows[1].Cells[105].Value.ToString());
            PasteInfo.Corner_V1_Height2 = short.Parse(dGV_Mark.Rows[1].Cells[106].Value.ToString());
            PasteInfo.Corner_V1_EdgeStrength2 = short.Parse(dGV_Mark.Rows[1].Cells[107].Value.ToString());
            PasteInfo.Corner_V1_PicDir2 = dGV_Mark.Rows[1].Cells[108].Value.ToString();
            PasteInfo.Corner_V1_GrayValueDir2 = dGV_Mark.Rows[1].Cells[109].Value.ToString();
            //V2
            PasteInfo.Corner_V2_Point2 = new PointF();
            PasteInfo.Corner_V2_Point2.X = float.Parse(dGV_Mark.Rows[1].Cells[110].Value.ToString());
            PasteInfo.Corner_V2_Point2.Y = float.Parse(dGV_Mark.Rows[1].Cells[111].Value.ToString());

            PasteInfo.Corner_V2_CamPoint2 = new PointF();//拍照点
            PasteInfo.Corner_V2_CamPoint2.X = float.Parse(dGV_Mark.Rows[1].Cells[112].Value.ToString());
            PasteInfo.Corner_V2_CamPoint2.Y = float.Parse(dGV_Mark.Rows[1].Cells[113].Value.ToString());
            PasteInfo.Corner_V2_Shutter2 = double.Parse(dGV_Mark.Rows[1].Cells[114].Value.ToString());
            //V2初定位打光
            PasteInfo.bCorner_V2_Red2 = dGV_Mark.Rows[1].Cells[115].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_V2_Green2 = dGV_Mark.Rows[1].Cells[116].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_V2_Blue2 = dGV_Mark.Rows[1].Cells[117].Value.ToString() == "1" ? true : false;
            PasteInfo.dCorner_V2_RedValue2 = double.Parse(dGV_Mark.Rows[1].Cells[118].Value.ToString());
            PasteInfo.dCorner_V2_GreenValue2 = double.Parse(dGV_Mark.Rows[1].Cells[119].Value.ToString());
            PasteInfo.dCorner_V2_BlueValue2 = double.Parse(dGV_Mark.Rows[1].Cells[120].Value.ToString());
            //V2初定位ROI
            PasteInfo.Corner_V2_Init_Top2 = short.Parse(dGV_Mark.Rows[1].Cells[121].Value.ToString());
            PasteInfo.Corner_V2_Init_Left2 = short.Parse(dGV_Mark.Rows[1].Cells[122].Value.ToString());
            PasteInfo.Corner_V2_Init_Width2 = short.Parse(dGV_Mark.Rows[1].Cells[123].Value.ToString());
            PasteInfo.Corner_V2_Init_Height2 = short.Parse(dGV_Mark.Rows[1].Cells[124].Value.ToString());
            //V2初定位侦测的点
            PasteInfo.Corner_V2_Init_Point2 = new PointF();
            PasteInfo.Corner_V2_Init_Point2.X = float.Parse(dGV_Mark.Rows[1].Cells[125].Value.ToString());
            PasteInfo.Corner_V2_Init_Point2.Y = float.Parse(dGV_Mark.Rows[1].Cells[126].Value.ToString());
            PasteInfo.Corner_V2_Init_Angle2 = double.Parse(dGV_Mark.Rows[1].Cells[127].Value.ToString());
            PasteInfo.Corner_V2_Init_Score2 = short.Parse(dGV_Mark.Rows[1].Cells[128].Value.ToString());//H1初定位 分数
            PasteInfo.Corner_V2_Init_MinAngle2 = double.Parse(dGV_Mark.Rows[1].Cells[129].Value.ToString());//H1初定位 最小角度
            PasteInfo.Corner_V2_Init_MaxAngle2 = double.Parse(dGV_Mark.Rows[1].Cells[130].Value.ToString());//H1初定位 最大角度

            PasteInfo.Corner_V2_Top2 = short.Parse(dGV_Mark.Rows[1].Cells[131].Value.ToString());
            PasteInfo.Corner_V2_Left2 = short.Parse(dGV_Mark.Rows[1].Cells[132].Value.ToString());
            PasteInfo.Corner_V2_Width2 = short.Parse(dGV_Mark.Rows[1].Cells[133].Value.ToString());
            PasteInfo.Corner_V2_Height2 = short.Parse(dGV_Mark.Rows[1].Cells[134].Value.ToString());
            PasteInfo.Corner_V2_EdgeStrength2 = short.Parse(dGV_Mark.Rows[1].Cells[135].Value.ToString());
            PasteInfo.Corner_V2_PicDir2 = dGV_Mark.Rows[1].Cells[136].Value.ToString();
            PasteInfo.Corner_V2_GrayValueDir2 = dGV_Mark.Rows[1].Cells[137].Value.ToString();

            PasteInfo.Corner_Point2 = new PointF();
            PasteInfo.Corner_Point2.X = float.Parse(dGV_Mark.Rows[1].Cells[138].Value.ToString());
            PasteInfo.Corner_Point2.Y = float.Parse(dGV_Mark.Rows[1].Cells[139].Value.ToString());

            PasteInfo.CornerAngleIndex2 = short.Parse(dGV_Mark.Rows[1].Cells[140].Value.ToString());

            PasteInfo.bRed2 = dGV_Mark.Rows[1].Cells[141].Value.ToString() == "1" ? true : false;
            PasteInfo.bGreen2 = dGV_Mark.Rows[1].Cells[142].Value.ToString() == "1" ? true : false;
            PasteInfo.bBlue2 = dGV_Mark.Rows[1].Cells[143].Value.ToString() == "1" ? true : false;
            PasteInfo.dRedValue2 = double.Parse(dGV_Mark.Rows[1].Cells[144].Value.ToString());
            PasteInfo.dGreenValue2 = double.Parse(dGV_Mark.Rows[1].Cells[145].Value.ToString());
            PasteInfo.dBlueValue2 = double.Parse(dGV_Mark.Rows[1].Cells[146].Value.ToString());

            PasteInfo.GainInit2 = double.Parse(dGV_Mark.Rows[1].Cells[147].Value.ToString());
            PasteInfo.OffsetInit2 = double.Parse(dGV_Mark.Rows[1].Cells[148].Value.ToString());
            PasteInfo.GainCircle2 = double.Parse(dGV_Mark.Rows[1].Cells[149].Value.ToString());
            PasteInfo.OffsetCircle2 = double.Parse(dGV_Mark.Rows[1].Cells[150].Value.ToString());
            PasteInfo.GainH1_2 = double.Parse(dGV_Mark.Rows[1].Cells[151].Value.ToString());
            PasteInfo.OffsetH1_2 = double.Parse(dGV_Mark.Rows[1].Cells[152].Value.ToString());
            PasteInfo.GainH2_2 = double.Parse(dGV_Mark.Rows[1].Cells[153].Value.ToString());
            PasteInfo.OffsetH2_2 = double.Parse(dGV_Mark.Rows[1].Cells[154].Value.ToString());
            PasteInfo.GainV1_2 = double.Parse(dGV_Mark.Rows[1].Cells[155].Value.ToString());
            PasteInfo.OffsetV1_2 = double.Parse(dGV_Mark.Rows[1].Cells[156].Value.ToString());
            PasteInfo.GainV2_2 = double.Parse(dGV_Mark.Rows[1].Cells[157].Value.ToString());
            PasteInfo.OffsetV2_2 = double.Parse(dGV_Mark.Rows[1].Cells[158].Value.ToString());

            PasteInfo.bAreaEN2 = dGV_Mark.Rows[1].Cells[159].Value.ToString() == "1" ? true : false;
            PasteInfo.iAreaMin2 = int.Parse(dGV_Mark.Rows[1].Cells[160].Value.ToString());
            PasteInfo.iAreaMax2 = short.Parse(dGV_Mark.Rows[1].Cells[161].Value.ToString());
            PasteInfo.iAreaOKStyle2 = short.Parse(dGV_Mark.Rows[1].Cells[162].Value.ToString());

            PasteInfo.GrabLine_EdgeStrength2 = double.Parse(dGV_Mark.Rows[1].Cells[163].Value.ToString());
            PasteInfo.GrabLine_PicDir2 = dGV_Mark.Rows[1].Cells[164].Value.ToString();
            PasteInfo.GrabLine_GrayValueDir2 = dGV_Mark.Rows[1].Cells[165].Value.ToString();
            PasteInfo.GrabLine_ROI2 = dGV_Mark.Rows[1].Cells[166].Value.ToString();
            PasteInfo.GrabLine_Enable2 = dGV_Mark.Rows[1].Cells[167].Value.ToString() == "True" ? true : false;
            #endregion
            //计算Mark
            #region cal mark1
            PasteInfo.Mark1 = new PointF();
            if (PasteInfo.AlinIndex1 == 1 || PasteInfo.AlinIndex1 == 2)
            {
                PasteInfo.Mark1 = Point2CCDCenter(PasteInfo.CamPoint1, new PointContour(PasteInfo.Init_Point1.X, PasteInfo.Init_Point1.Y), 0,0);
            }
            if (PasteInfo.AlinIndex1 == 3 || PasteInfo.AlinIndex1 == 4 || PasteInfo.AlinIndex1 == 5)
            {
                PasteInfo.Mark1 = Point2CCDCenter(PasteInfo.CamPoint1, new PointContour(PasteInfo.S_Center1.X, PasteInfo.S_Center1.Y), 0,0);
            }
            if (PasteInfo.AlinIndex1 == 6 || PasteInfo.AlinIndex1 == 7 || PasteInfo.AlinIndex1 == 8)
            {
                PasteInfo.Mark1 = Point2CCDCenter(PasteInfo.CamPoint1, new PointContour(PasteInfo.Corner_Point1.X, PasteInfo.Corner_Point1.Y), 0,0);
            }
            if (PasteInfo.AlinIndex1 == 9 || PasteInfo.AlinIndex1 == 10)
            {
                PointContour h1 = new PointContour();
                PointContour h2 = new PointContour();
                PointContour v1 = new PointContour();
                PointContour v2 = new PointContour();

                PointF campoint_h1 = new PointF();
                PointF campoint_h2 = new PointF();
                PointF campoint_v1 = new PointF();
                PointF campoint_v2 = new PointF();

                h1.X = double.Parse(dGV_Mark.Rows[0].Cells[26].Value.ToString());
                h1.Y = double.Parse(dGV_Mark.Rows[0].Cells[27].Value.ToString());
                campoint_h1.X = float.Parse(dGV_Mark.Rows[0].Cells[28].Value.ToString());
                campoint_h1.Y = float.Parse(dGV_Mark.Rows[0].Cells[29].Value.ToString());
                h2.X = double.Parse(dGV_Mark.Rows[0].Cells[54].Value.ToString());
                h2.Y = double.Parse(dGV_Mark.Rows[0].Cells[55].Value.ToString());
                campoint_h2.X = float.Parse(dGV_Mark.Rows[0].Cells[56].Value.ToString());
                campoint_h2.Y = float.Parse(dGV_Mark.Rows[0].Cells[57].Value.ToString());
                v1.X = double.Parse(dGV_Mark.Rows[0].Cells[82].Value.ToString());
                v1.Y = double.Parse(dGV_Mark.Rows[0].Cells[83].Value.ToString());
                campoint_v1.X = float.Parse(dGV_Mark.Rows[0].Cells[84].Value.ToString());
                campoint_v1.Y = float.Parse(dGV_Mark.Rows[0].Cells[85].Value.ToString());
                v2.X = double.Parse(dGV_Mark.Rows[0].Cells[110].Value.ToString());
                v2.Y = double.Parse(dGV_Mark.Rows[0].Cells[111].Value.ToString());
                campoint_v2.X = float.Parse(dGV_Mark.Rows[0].Cells[112].Value.ToString());
                campoint_v2.Y = float.Parse(dGV_Mark.Rows[0].Cells[113].Value.ToString());

                h1.X = Point2CCDCenter(campoint_h1, h1, 0, 0).X;
                h1.Y = Point2CCDCenter(campoint_h1, h1, 0, 0).Y;
                h2.X = Point2CCDCenter(campoint_h2, h2, 0, 0).X;
                h2.Y = Point2CCDCenter(campoint_h2, h2, 0, 0).Y;
                v1.X = Point2CCDCenter(campoint_v1, v1, 0, 0).X;
                v1.Y = Point2CCDCenter(campoint_v1, v1, 0, 0).Y;
                v2.X = Point2CCDCenter(campoint_v2, v2, 0, 0).X;
                v2.Y = Point2CCDCenter(campoint_v2, v2, 0, 0).Y;
                PasteInfo.Mark1.X = (float)Algorithms.FindIntersectionPoint(new LineContour(h1, h2), new LineContour(v1, v2)).X;
                PasteInfo.Mark1.Y = (float)Algorithms.FindIntersectionPoint(new LineContour(h1, h2), new LineContour(v1, v2)).Y;
            }

            PasteInfo.Mark1 = GlassHelper.MachinePoint2ActPoint(PasteInfo.Mark1);
            dGV_Mark.Rows[0].Cells[4].Value = PasteInfo.Mark1.X.ToString();
            dGV_Mark.Rows[0].Cells[5].Value = PasteInfo.Mark1.Y.ToString();

            #endregion

            #region cal mark2

            PasteInfo.Mark2 = new PointF();
            if (PasteInfo.AlinIndex2 == 1 || PasteInfo.AlinIndex2 == 2)
            {
                PasteInfo.Mark2 = Point2CCDCenter(PasteInfo.CamPoint2, new PointContour(PasteInfo.Init_Point2.X, PasteInfo.Init_Point2.Y), 0,0);
            }
            if (PasteInfo.AlinIndex2 == 3 || PasteInfo.AlinIndex2 == 4 || PasteInfo.AlinIndex2 == 5)
            {
                PasteInfo.Mark2 = Point2CCDCenter(PasteInfo.CamPoint2, new PointContour(PasteInfo.S_Center2.X, PasteInfo.S_Center2.Y), 0,0);
            }
            if (PasteInfo.AlinIndex2 == 6 || PasteInfo.AlinIndex2 == 7 || PasteInfo.AlinIndex2 == 8)
            {
                PasteInfo.Mark2 = Point2CCDCenter(PasteInfo.CamPoint2, new PointContour(PasteInfo.Corner_Point2.X, PasteInfo.Corner_Point2.Y), 0,0);
            }
            if (PasteInfo.AlinIndex2 == 9 || PasteInfo.AlinIndex2 == 10)
            {
                PointContour h1 = new PointContour();
                PointContour h2 = new PointContour();
                PointContour v1 = new PointContour();
                PointContour v2 = new PointContour();

                PointF campoint_h1 = new PointF();
                PointF campoint_h2 = new PointF();
                PointF campoint_v1 = new PointF();
                PointF campoint_v2 = new PointF();

                h1.X = double.Parse(dGV_Mark.Rows[1].Cells[26].Value.ToString());
                h1.Y = double.Parse(dGV_Mark.Rows[1].Cells[27].Value.ToString());
                campoint_h1.X = float.Parse(dGV_Mark.Rows[1].Cells[28].Value.ToString());
                campoint_h1.Y = float.Parse(dGV_Mark.Rows[1].Cells[29].Value.ToString());
                h2.X = double.Parse(dGV_Mark.Rows[1].Cells[54].Value.ToString());
                h2.Y = double.Parse(dGV_Mark.Rows[1].Cells[55].Value.ToString());
                campoint_h2.X = float.Parse(dGV_Mark.Rows[1].Cells[56].Value.ToString());
                campoint_h2.Y = float.Parse(dGV_Mark.Rows[1].Cells[57].Value.ToString());
                v1.X = double.Parse(dGV_Mark.Rows[1].Cells[82].Value.ToString());
                v1.Y = double.Parse(dGV_Mark.Rows[1].Cells[83].Value.ToString());
                campoint_v1.X = float.Parse(dGV_Mark.Rows[1].Cells[84].Value.ToString());
                campoint_v1.Y = float.Parse(dGV_Mark.Rows[1].Cells[85].Value.ToString());
                v2.X = double.Parse(dGV_Mark.Rows[1].Cells[110].Value.ToString());
                v2.Y = double.Parse(dGV_Mark.Rows[1].Cells[111].Value.ToString());
                campoint_v2.X = float.Parse(dGV_Mark.Rows[1].Cells[112].Value.ToString());
                campoint_v2.Y = float.Parse(dGV_Mark.Rows[1].Cells[113].Value.ToString());

                h1.X = Point2CCDCenter(campoint_h1, h1, 0,0).X;
                h1.Y = Point2CCDCenter(campoint_h1, h1, 0,0).Y;
                h2.X = Point2CCDCenter(campoint_h2, h2, 0,0).X;
                h2.Y = Point2CCDCenter(campoint_h2, h2, 0,0).Y;
                v1.X = Point2CCDCenter(campoint_v1, v1, 0,0).X;
                v1.Y = Point2CCDCenter(campoint_v1, v1, 0,0).Y;
                v2.X = Point2CCDCenter(campoint_v2, v2, 0,0).X;
                v2.Y = Point2CCDCenter(campoint_v2, v2, 0,0).Y;
                PasteInfo.Mark2.X = (float)Algorithms.FindIntersectionPoint(new LineContour(h1, h2), new LineContour(v1, v2)).X;
                PasteInfo.Mark2.Y = (float)Algorithms.FindIntersectionPoint(new LineContour(h1, h2), new LineContour(v1, v2)).Y;
            }

            PasteInfo.Mark2 = GlassHelper.MachinePoint2ActPoint(PasteInfo.Mark2);
            dGV_Mark.Rows[1].Cells[4].Value = PasteInfo.Mark2.X.ToString();
            dGV_Mark.Rows[1].Cells[5].Value = PasteInfo.Mark2.Y.ToString();
            #endregion

            bUpdataParameter.BackColor = Color.GreenYellow;
        }

        private void bUpdataParameter_MouseDown(object sender, MouseEventArgs e)
        {
            bUpdataParameter.BackColor = Color.White;
        }
        //贴附点
        private void dGV_Paste_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if ((dGV_Paste.SelectedRows[0].Index == dGV_Paste.Rows.Count - 1) || dGV_Paste.Rows.Count == 1)
                {
                    return;
                }
            }
            catch
            {
                return;
            }
            Paste_Index = (short)(dGV_Paste.SelectedRows[0].Index);
            cB_pn.Text = dGV_Paste.Rows[Paste_Index].Cells[0].Value.ToString();
            tR.Text = dGV_Paste.Rows[Paste_Index].Cells[4].Value.ToString();

            tFeeder.Text = dGV_Paste.Rows[Paste_Index].Cells[5 + Variable.NOZZLE_NUM].Value.ToString();
            tNozzle.Text = dGV_Paste.Rows[Paste_Index].Cells[6 + Variable.NOZZLE_NUM].Value.ToString();
            tDelay.Text = dGV_Paste.Rows[Paste_Index].Cells[7 + Variable.NOZZLE_NUM].Value.ToString();

            rBEN.Checked = dGV_Paste.Rows[Paste_Index].Cells[1].Value.ToString() == "1" ? true : false;
            rBDN.Checked = dGV_Paste.Rows[Paste_Index].Cells[1].Value.ToString() == "0" ? true : false;
            rBEN_BadMark.Checked = dGV_Paste.Rows[Paste_Index].Cells[8 + Variable.NOZZLE_NUM].Value.ToString() == "1" ? true : false;

            #region 根据保存的OKNG信息来画图设置
            //清除图点
            bool found = false;
            PastePane_Set.GraphPane.CurveList.Clear();
            PastePane_Set.GraphPane.GraphObjList.Clear();
            for (int i_DrawPoint = 0; i_DrawPoint < dGV_Paste.RowCount - 1; i_DrawPoint++)
            {
                double[] x = new double[1];
                double[] y = new double[1];
                try
                {
                    x[0] = double.Parse(dGV_Paste.Rows[i_DrawPoint].Cells[2].Value.ToString());
                    y[0] = double.Parse(dGV_Paste.Rows[i_DrawPoint].Cells[3].Value.ToString());
                }
                catch { }

                //根据OKNG 重新画图
                found = false;
                for (int j = 0; j < dGV_Paste.SelectedRows.Count; j++)
                {
                    if (i_DrawPoint == dGV_Paste.SelectedRows[j].Index && i_DrawPoint != dGV_Paste.Rows.Count - 1)
                    {
                        found = true;
                    }
                }

                if (found)//
                {
                    ZedGraph.LineItem curve = PastePane_Set.GraphPane.AddCurve("", x, y, Color.Red, ZedGraph.SymbolType.Circle);
                    curve.Line.IsVisible = false;
                    curve.Symbol.Size = 15;
                    curve.Symbol.Fill = new ZedGraph.Fill(Color.Red);
                }
                else
                {
                    ZedGraph.LineItem curve = PastePane_Set.GraphPane.AddCurve("", x, y, Color.Blue, ZedGraph.SymbolType.Circle);
                    curve.Line.IsVisible = false;
                    curve.Symbol.Size = 15;
                    curve.Symbol.Fill = new ZedGraph.Fill(Color.Blue);
                }

            }
            PastePane_Set.AxisChange();
            PastePane_Set.Refresh();
            PastePane_Set.Invalidate();
            #endregion
        }

        private void dGV_Paste_SelectionChanged(object sender, EventArgs e)
        {
            try
            {
                if (gB_PasteInfo.Visible == false)
                {
                    return;
                }
                if ((dGV_Paste.SelectedRows[0].Index == dGV_Paste.Rows.Count - 1) || dGV_Paste.Rows.Count == 1)
                {
                    return;
                }
                Paste_Index = (short)(dGV_Paste.SelectedRows[0].Index);
                cB_pn.Text = dGV_Paste.Rows[Paste_Index].Cells[0].Value.ToString();
                tR.Text = dGV_Paste.Rows[Paste_Index].Cells[4].Value.ToString();

                tFeeder.Text = dGV_Paste.Rows[Paste_Index].Cells[5 + Variable.NOZZLE_NUM].Value.ToString();
                tNozzle.Text = dGV_Paste.Rows[Paste_Index].Cells[6 + Variable.NOZZLE_NUM].Value.ToString();
                tDelay.Text = dGV_Paste.Rows[Paste_Index].Cells[7 + Variable.NOZZLE_NUM].Value.ToString();
                rBEN.Checked = dGV_Paste.Rows[Paste_Index].Cells[1].Value.ToString() == "1" ? true : false;
                rBDN.Checked = dGV_Paste.Rows[Paste_Index].Cells[1].Value.ToString() == "0" ? true : false;
                rBEN_BadMark.Checked = dGV_Paste.Rows[Paste_Index].Cells[8 + Variable.NOZZLE_NUM].Value.ToString() == "1" ? true : false;
                rBDN_BadMark.Checked = dGV_Paste.Rows[Paste_Index].Cells[8 + Variable.NOZZLE_NUM].Value.ToString() == "0" ? true : false;
                #region 根据保存的OKNG信息来画图设置
                //清除图点
                bool found = false;
                PastePane_Set.GraphPane.CurveList.Clear();
                PastePane_Set.GraphPane.GraphObjList.Clear();
                for (int i_DrawPoint = 0; i_DrawPoint < dGV_Paste.RowCount - 1; i_DrawPoint++)
                {
                    double[] x = new double[1];
                    double[] y = new double[1];
                    x[0] = double.Parse(dGV_Paste.Rows[i_DrawPoint].Cells[2].Value.ToString());
                    y[0] = double.Parse(dGV_Paste.Rows[i_DrawPoint].Cells[3].Value.ToString());
                    //根据OKNG 重新画图
                    found = false;
                    for (int j = 0; j < dGV_Paste.SelectedRows.Count; j++)
                    {
                        if (i_DrawPoint == dGV_Paste.SelectedRows[j].Index && i_DrawPoint != dGV_Paste.Rows.Count - 1)
                        {
                            found = true;
                        }
                    }

                    if (found)//
                    {
                        ZedGraph.LineItem curve = PastePane_Set.GraphPane.AddCurve("", x, y, Color.Red, ZedGraph.SymbolType.Circle);
                        curve.Line.IsVisible = false;
                        curve.Symbol.Size = 15;
                        curve.Symbol.Fill = new ZedGraph.Fill(Color.Red);
                    }
                    else
                    {
                        ZedGraph.LineItem curve = PastePane_Set.GraphPane.AddCurve("", x, y, Color.Blue, ZedGraph.SymbolType.Circle);
                        curve.Line.IsVisible = false;
                        curve.Symbol.Size = 15;
                        curve.Symbol.Fill = new ZedGraph.Fill(Color.Blue);
                    }

                }
                PastePane_Set.AxisChange();
                PastePane_Set.Refresh();
                PastePane_Set.Invalidate();
                #endregion
            }
            catch (System.Exception ex)
            {

            }

        }

        private void bUpdateXY_Click(object sender, EventArgs e)
        {
            if (dGV_Paste.SelectedRows.Count > 0 && (dGV_Paste.SelectedRows[0].Index != dGV_Paste.RowCount - 1))
            {
                for (int i_Temp = 0; i_Temp < dGV_Paste.SelectedRows.Count; i_Temp++)
                {
                    if (dGV_Paste.SelectedRows[i_Temp].Index != dGV_Paste.Rows.Count - 1)
                    {
                        PointF cur = GlassHelper.MachinePoint2ActPoint(this.XYPos);
                        dGV_Paste.Rows[dGV_Paste.SelectedRows[i_Temp].Index].Cells[2].Value = cur.X.ToString();
                        dGV_Paste.Rows[dGV_Paste.SelectedRows[i_Temp].Index].Cells[3].Value = cur.Y.ToString();
                    }
                }
            }

            bUpdateXY.BackColor = Color.MediumSpringGreen;
        }


        private void tUpdateZ_Click(object sender, EventArgs e)
        {
            if (dGV_Paste.SelectedRows.Count > 0 && (dGV_Paste.SelectedRows[0].Index != dGV_Paste.RowCount - 1))
            {
                for (int i_Temp = 0; i_Temp < dGV_Paste.SelectedRows.Count; i_Temp++)
                {
                    if (dGV_Paste.SelectedRows[i_Temp].Index != dGV_Paste.Rows.Count - 1)
                    {
                        dGV_Paste.Rows[dGV_Paste.SelectedRows[i_Temp].Index].Cells[5 + ZAxisIndex - 1].Value = Z_RunParamMap[(uint)ZAxisIndex - 1].Pos.ToString();
                    }
                }
            }

            bUpdateXY.BackColor = Color.MediumSpringGreen;
        }


        private void bMoveUp_Click(object sender, EventArgs e)
        {
            if (dGV_Paste.SelectedRows.Count > 0 && (dGV_Paste.SelectedRows[0].Index != dGV_Paste.RowCount - 1))
            {
                int index = dGV_Paste.SelectedRows[0].Index;
                if (index == 0)
                {
                    return;
                }
                List<string> list = new List<string>();
                for (int i = 0; i < dGV_Paste.Columns.Count; i++)
                {
                    list.Add(dGV_Paste.SelectedRows[0].Cells[i].Value.ToString());   //把当前选中行的数据存入list数组中  
                }
                for (int j = 0; j < dGV_Paste.Columns.Count; j++)
                {
                    dGV_Paste.Rows[index].Cells[j].Value = dGV_Paste.Rows[index - 1].Cells[j].Value;
                    dGV_Paste.Rows[index - 1].Cells[j].Value = list[j].ToString();
                }
                dGV_Paste.Rows[index].Selected = false;
                dGV_Paste.Rows[index - 1].Selected = true;
            }
        }

        private void bMoveDown_Click(object sender, EventArgs e)
        {
            if (dGV_Paste.SelectedRows.Count > 0 && (dGV_Paste.SelectedRows[0].Index != dGV_Paste.RowCount - 1))
            {
                int index = dGV_Paste.SelectedRows[0].Index;
                if (index == dGV_Paste.RowCount - 2)
                {
                    return;
                }
                List<string> list = new List<string>();
                for (int i = 0; i < dGV_Paste.Columns.Count; i++)
                {
                    list.Add(dGV_Paste.SelectedRows[0].Cells[i].Value.ToString());   //把当前选中行的数据存入list数组中  
                }

                for (int j = 0; j < dGV_Paste.Columns.Count; j++)
                {
                    dGV_Paste.Rows[index].Cells[j].Value = dGV_Paste.Rows[index + 1].Cells[j].Value;
                    dGV_Paste.Rows[index + 1].Cells[j].Value = list[j].ToString();
                }
                dGV_Paste.Rows[index + 1].Selected = true;
                dGV_Paste.Rows[index].Selected = false;
            }
        }

        private void bPointADD_Click(object sender, EventArgs e)
        {
            //获取当前选定的Index
            if (dGV_Paste.SelectedRows.Count > 0 && (dGV_Paste.SelectedRows[0].Index != dGV_Paste.Rows.Count - 1))
            {
                dGV_Paste.Rows.Insert(dGV_Paste.SelectedRows[0].Index + 1, 1);
                AddRowHeader(dGV_Paste);
                DataGridViewRow item = dGV_Paste.Rows[dGV_Paste.SelectedRows[0].Index + 1];
                item.Cells[0].Value = "1";
                item.Cells[1].Value = "1";
                item.Cells[2].Value = "0";
                item.Cells[3].Value = "0";
                item.Cells[4].Value = "0";

                for (int nz = 0; nz < Variable.NOZZLE_NUM; ++nz)
                    item.Cells[5 + nz].Value = "0";

                item.Cells[5 + Variable.NOZZLE_NUM].Value = "1";
                item.Cells[6 + Variable.NOZZLE_NUM].Value = "1";
                item.Cells[7 + Variable.NOZZLE_NUM].Value = "10";
                item.Cells[8 + Variable.NOZZLE_NUM].Value = "0";
                item.Cells[9 + Variable.NOZZLE_NUM].Value = "0";
                item.Cells[10 + Variable.NOZZLE_NUM].Value = "0";
                item.Cells[11 + Variable.NOZZLE_NUM].Value = "1";
                item.Cells[12 + Variable.NOZZLE_NUM].Value = "0";
                item.Cells[13 + Variable.NOZZLE_NUM].Value = "0";
                item.Cells[14 + Variable.NOZZLE_NUM].Value = "A";

            }
            else
            {
                dGV_Paste.Rows.Insert(0, 1);
                AddRowHeader(dGV_Paste);
                DataGridViewRow item = dGV_Paste.Rows[0];
                item.Cells[0].Value = "1";
                item.Cells[1].Value = "1";
                item.Cells[2].Value = "0";
                item.Cells[3].Value = "0";
                item.Cells[4].Value = "0";

                for (int nz = 0; nz < Variable.NOZZLE_NUM; ++nz)
                    item.Cells[5 + nz].Value = "0";

                item.Cells[5 + Variable.NOZZLE_NUM].Value = "1";
                item.Cells[6 + Variable.NOZZLE_NUM].Value = "1";
                item.Cells[7 + Variable.NOZZLE_NUM].Value = "10";
                item.Cells[8 + Variable.NOZZLE_NUM].Value = "0";
                item.Cells[9 + Variable.NOZZLE_NUM].Value = "0";
                item.Cells[10 + Variable.NOZZLE_NUM].Value = "0";
                item.Cells[11 + Variable.NOZZLE_NUM].Value = "1";
                item.Cells[12 + Variable.NOZZLE_NUM].Value = "0";
                item.Cells[13 + Variable.NOZZLE_NUM].Value = "0";
                item.Cells[14 + Variable.NOZZLE_NUM].Value = "A";
            }
            //bPointADD.BackColor = Color.GreenYellow;
        }

        private void bPointDEL_Click(object sender, EventArgs e)
        {
            if (dGV_Paste.SelectedRows.Count > 0)
            {
                //获取当前选中的行（单行或者多行）
                DialogResult RSS;
                if (VariableSys.LanguageFlag == 1)
                {
                    RSS = MessageBox.Show(this, "Are you sure to delete the data？", "Info", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                }
                else
                {
                    RSS = MessageBox.Show(this, "确定要删除选中行数据码？", "提示", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                }
                switch (RSS)
                {
                    case DialogResult.Yes:
                        //获取当前选定的Index
                        for (int i = this.dGV_Paste.SelectedRows.Count; i > 0; i--)
                        {
                            if (dGV_Paste.SelectedRows[i - 1].Index == (dGV_Paste.RowCount - 1))
                            {
                                if (VariableSys.LanguageFlag == 1)
                                {
                                    MessageBox.Show("Delete the end line fail!", "Info");
                                }
                                else
                                {
                                    MessageBox.Show("末尾行无数据不可删除！", "提示");
                                }
                                break;
                            }
                            int Index = dGV_Paste.SelectedRows[i - 1].Index;
                            dGV_Paste.Rows.RemoveAt(Index);
                        }
                        AddRowHeader(dGV_Paste);
                        break;
                    case DialogResult.No:
                        break;
                }
            }
        }

        private void bCamGOPoint_Click(object sender, EventArgs e)
        {
            if (dGV_Paste.SelectedRows.Count > 0 && dGV_Paste.SelectedRows[0].Index != dGV_Paste.Rows.Count - 1)
            {
                PointF a = new PointF();
                a.X = float.Parse(dGV_Paste.SelectedRows[0].Cells[2].Value.ToString());
                a.Y = float.Parse(dGV_Paste.SelectedRows[0].Cells[3].Value.ToString());

                a = GlassHelper.ActPoint2MachinePoint(a);

                if (this.All_ZGoSafeTillStop(2000, VariableSys.VelMode_Debug_Manual))
                {
                    short rtn = XYGoPos(a, VariableSys.VelMode_Slow_Manual);
                    if (rtn != 0)
                    {
                        if (VariableSys.LanguageFlag == 1)
                        {
                            MessageBox.Show("Go to Safe Height First!", "Info");
                        }
                        else
                        {
                            MessageBox.Show("请先回安全点", "提示");
                        }

                    }
                }
            }
        }

        private void bOrigin_Click(object sender, EventArgs e)
        {
            tO_X.Text = this.XYPos.X.ToString();
            tO_Y.Text = this.XYPos.Y.ToString();
            bOrigin.BackColor = Color.GreenYellow;
        }

        private void bXCoord_Click(object sender, EventArgs e)
        {
            tX_X.Text = this.XYPos.X.ToString();
            tX_Y.Text = this.XYPos.Y.ToString();
            bXCoord.BackColor = Color.GreenYellow;
        }

        private void bYCoord_Click(object sender, EventArgs e)
        {
            tY_X.Text = this.XYPos.X.ToString();
            tY_Y.Text = this.XYPos.Y.ToString();
            bYCoord.BackColor = Color.GreenYellow;
        }

        private void bExpand_Click(object sender, EventArgs e)
        {
            PointF ORIGIN = new PointF();
            PointF XCoord = new PointF();
            PointF YCoord = new PointF();
            short Xcount = 0;
            short Ycount = 0;
            if (dGV_Paste.SelectedRows.Count > 0 && dGV_Paste.SelectedRows[0].Index != dGV_Paste.Rows.Count - 1)
            {
                try
                {
                    ORIGIN.X = float.Parse(tO_X.Text);
                    ORIGIN.Y = float.Parse(tO_Y.Text);
                    XCoord.X = float.Parse(tX_X.Text);
                    XCoord.Y = float.Parse(tX_Y.Text);
                    YCoord.X = float.Parse(tY_X.Text);
                    YCoord.Y = float.Parse(tY_Y.Text);
                    ORIGIN = GlassHelper.MachinePoint2ActPoint(ORIGIN);
                    XCoord = GlassHelper.MachinePoint2ActPoint(XCoord);
                    YCoord = GlassHelper.MachinePoint2ActPoint(YCoord);
                    ORIGIN = this.ToReal(ORIGIN);
                    XCoord = this.ToReal(XCoord);
                    YCoord = this.ToReal(YCoord);

                    Xcount = short.Parse(tXCount.Text);
                    Ycount = short.Parse(tYCount.Text);
                }
                catch
                {
                    if (VariableSys.LanguageFlag == 1)
                    {
                        MessageBox.Show("Fail to expand!", "Info");
                    }
                    else
                    {
                        MessageBox.Show("未完成三点法扩展或者扩展数目未正确填写！", "提示");
                    }
                    return;
                }
                List<PointF> Point2Expand = new List<PointF>();
                for (int ii = 0; ii < dGV_Paste.SelectedRows.Count; ii++)
                {
                    var pe = new PointF(float.Parse(dGV_Paste.SelectedRows[ii].Cells[2].Value.ToString()), float.Parse(dGV_Paste.SelectedRows[ii].Cells[3].Value.ToString()));
                    Point2Expand.Add(this.ToReal(pe));
                }
                PointF[] Points2Add = ExpandtoAddPoints(Point2Expand.ToArray(), ORIGIN, XCoord, YCoord, Xcount, Ycount);

                List<PointF> Point2Expand_BM = new List<PointF>();
                for (int ii = 0; ii < dGV_Paste.SelectedRows.Count; ii++)
                {
                    var bm = new PointF(float.Parse(dGV_Paste.SelectedRows[ii].Cells[11].Value.ToString()), float.Parse(dGV_Paste.SelectedRows[ii].Cells[12].Value.ToString()));
                    Point2Expand_BM.Add(this.ToReal(bm));
                }
                PointF[] Points2Add_BM = ExpandtoAddPoints(Point2Expand_BM.ToArray(), ORIGIN, XCoord, YCoord, Xcount, Ycount);
                //ADD
                dGV_Paste.Rows.Add(Points2Add.Count());

                for (int i = 0; i < Points2Add.Count() / dGV_Paste.SelectedRows.Count; i++)
                {
                    for (int j = 0; j < dGV_Paste.SelectedRows.Count; j++)
                    {
                        dGV_Paste.Rows[dGV_Paste.Rows.Count - Points2Add.Count() + i * dGV_Paste.SelectedRows.Count + j - 1].Cells[0].Value = (i * dGV_Paste.SelectedRows.Count + j + 1 + Point2Expand.Count()).ToString();
                        dGV_Paste.Rows[dGV_Paste.Rows.Count - Points2Add.Count() + i * dGV_Paste.SelectedRows.Count + j - 1].Cells[1].Value = dGV_Paste.SelectedRows[j].Cells[1].Value.ToString();

                        var pt = this.ToMachine(Points2Add[i * dGV_Paste.SelectedRows.Count + j]);
                        dGV_Paste.Rows[dGV_Paste.Rows.Count - Points2Add.Count() + i * dGV_Paste.SelectedRows.Count + j - 1].Cells[2].Value = pt.X.ToString("F3");
                        dGV_Paste.Rows[dGV_Paste.Rows.Count - Points2Add.Count() + i * dGV_Paste.SelectedRows.Count + j - 1].Cells[3].Value = pt.Y.ToString("F3");
                        dGV_Paste.Rows[dGV_Paste.Rows.Count - Points2Add.Count() + i * dGV_Paste.SelectedRows.Count + j - 1].Cells[4].Value = dGV_Paste.SelectedRows[j].Cells[4].Value.ToString();

                        for (int nz = 0; nz < Variable.NOZZLE_NUM; ++nz)
                        {
                            dGV_Paste.Rows[dGV_Paste.Rows.Count - Points2Add.Count() + i * dGV_Paste.SelectedRows.Count + j - 1].Cells[5 + nz].Value = dGV_Paste.SelectedRows[j].Cells[5 + nz].Value.ToString();
                        }

                        dGV_Paste.Rows[dGV_Paste.Rows.Count - Points2Add.Count() + i * dGV_Paste.SelectedRows.Count + j - 1].Cells[5 + Variable.NOZZLE_NUM].Value = dGV_Paste.SelectedRows[j].Cells[5 + Variable.NOZZLE_NUM].Value.ToString();
                        dGV_Paste.Rows[dGV_Paste.Rows.Count - Points2Add.Count() + i * dGV_Paste.SelectedRows.Count + j - 1].Cells[6 + Variable.NOZZLE_NUM].Value = dGV_Paste.SelectedRows[j].Cells[6 + Variable.NOZZLE_NUM].Value.ToString();
                        dGV_Paste.Rows[dGV_Paste.Rows.Count - Points2Add.Count() + i * dGV_Paste.SelectedRows.Count + j - 1].Cells[7 + Variable.NOZZLE_NUM].Value = dGV_Paste.SelectedRows[j].Cells[7 + Variable.NOZZLE_NUM].Value.ToString();
                        dGV_Paste.Rows[dGV_Paste.Rows.Count - Points2Add.Count() + i * dGV_Paste.SelectedRows.Count + j - 1].Cells[8 + Variable.NOZZLE_NUM].Value = dGV_Paste.SelectedRows[j].Cells[8 + Variable.NOZZLE_NUM].Value.ToString();

                        var ptBM = this.ToMachine(Points2Add_BM[i * dGV_Paste.SelectedRows.Count + j]);

                        dGV_Paste.Rows[dGV_Paste.Rows.Count - Points2Add.Count() + i * dGV_Paste.SelectedRows.Count + j - 1].Cells[9 + Variable.NOZZLE_NUM].Value = ptBM.X.ToString("F3");

                        dGV_Paste.Rows[dGV_Paste.Rows.Count - Points2Add.Count() + i * dGV_Paste.SelectedRows.Count + j - 1].Cells[10 + Variable.NOZZLE_NUM].Value = ptBM.Y.ToString("F3");

                        dGV_Paste.Rows[dGV_Paste.Rows.Count - Points2Add.Count() + i * dGV_Paste.SelectedRows.Count + j - 1].Cells[11 + Variable.NOZZLE_NUM].Value = dGV_Paste.SelectedRows[j].Cells[11 + Variable.NOZZLE_NUM].Value.ToString();
                        dGV_Paste.Rows[dGV_Paste.Rows.Count - Points2Add.Count() + i * dGV_Paste.SelectedRows.Count + j - 1].Cells[12 + Variable.NOZZLE_NUM].Value = 0;
                        dGV_Paste.Rows[dGV_Paste.Rows.Count - Points2Add.Count() + i * dGV_Paste.SelectedRows.Count + j - 1].Cells[13 + Variable.NOZZLE_NUM].Value = 0;
                        dGV_Paste.Rows[dGV_Paste.Rows.Count - Points2Add.Count() + i * dGV_Paste.SelectedRows.Count + j - 1].Cells[14 + Variable.NOZZLE_NUM].Value = dGV_Paste.SelectedRows[j].Cells[14 + Variable.NOZZLE_NUM].Value.ToString();
                    }
                }
                AddRowHeader(dGV_Paste);
            }
            else
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Pls select the points to expand!", "Info");
                }
                else
                {
                    MessageBox.Show("请选择要扩展的点!", "提示");
                }

            }
            bExpand.BackColor = Color.GreenYellow;
        }

        private void bRecordPoint_Click(object sender, EventArgs e)
        {
            string sPN, sR, sDelay, sFeeder, sNozzle;
            double dR, dDelay, dFeeder, dNozzle;
            bool bPasteEN = false;
            bool bBadMarkEN = false;
            bool bABS = false;
            sPN = cB_pn.Text;
            sR = tR.Text;
            sDelay = tDelay.Text;
            sFeeder = tFeeder.Text;
            sNozzle = tNozzle.Text;
            try
            {
                dR = double.Parse(sR);
                dDelay = double.Parse(sDelay);
                dFeeder = double.Parse(sFeeder);
                dNozzle = double.Parse(sNozzle);
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("请输入数字", "提示");
                }
                return;
            }
            bPasteEN = rBEN.Checked;
            bBadMarkEN = rBEN_BadMark.Checked;
            if (dGV_Paste.SelectedRows.Count > 0 && (dGV_Paste.SelectedRows[0].Index != dGV_Paste.RowCount - 1))
            {
                for (int i_Temp = 0; i_Temp < dGV_Paste.SelectedRows.Count; i_Temp++)
                {
                    if (dGV_Paste.SelectedRows[i_Temp].Index != dGV_Paste.Rows.Count - 1)
                    {
                        dGV_Paste.Rows[dGV_Paste.SelectedRows[i_Temp].Index].Cells[0].Value = sPN;
                        dGV_Paste.Rows[dGV_Paste.SelectedRows[i_Temp].Index].Cells[1].Value = (bPasteEN == true ? "1" : "0");
                        dGV_Paste.Rows[dGV_Paste.SelectedRows[i_Temp].Index].Cells[4].Value = sR;
                        dGV_Paste.Rows[dGV_Paste.SelectedRows[i_Temp].Index].Cells[5 + Variable.NOZZLE_NUM].Value = sFeeder;
                        dGV_Paste.Rows[dGV_Paste.SelectedRows[i_Temp].Index].Cells[6 + Variable.NOZZLE_NUM].Value = sNozzle;
                        dGV_Paste.Rows[dGV_Paste.SelectedRows[i_Temp].Index].Cells[7 + Variable.NOZZLE_NUM].Value = sDelay;
                        dGV_Paste.Rows[dGV_Paste.SelectedRows[i_Temp].Index].Cells[8 + Variable.NOZZLE_NUM].Value = (bBadMarkEN == true ? "1" : "0");
                        dGV_Paste.Rows[dGV_Paste.SelectedRows[i_Temp].Index].Cells[11 + Variable.NOZZLE_NUM].Value = (bABS == true ? "1" : "0");
                    }
                }
            }
            bRecordPoint.BackColor = Color.GreenYellow;
        }

        private void bRecordPoint_MouseDown(object sender, MouseEventArgs e)
        {
            bRecordPoint.BackColor = Color.White;
        }

        private void bUpdataPaste_Click(object sender, EventArgs e)
        {
            if (dGV_Paste.Rows.Count == 1)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Pls Add Paste Points!", "Info");
                }
                else
                {
                    MessageBox.Show("请添加贴附点", "提示");
                }
                return;
            }
            //从表格中采集
            try
            {
                PasteInfo.PastePN = new string[dGV_Paste.Rows.Count - 1];
                PasteInfo.PasteEN = new bool[dGV_Paste.Rows.Count - 1];
                PasteInfo.PastePoints = new PointF[dGV_Paste.Rows.Count - 1];
                PasteInfo.PasteAngle = new double[dGV_Paste.Rows.Count - 1];
                PasteInfo.PasteHeight = new List<List<double>>();

                PasteInfo.FeederIndex = new short[dGV_Paste.Rows.Count - 1];
                PasteInfo.NozzleIndex = new short[dGV_Paste.Rows.Count - 1];
                PasteInfo.Delay = new short[dGV_Paste.Rows.Count - 1];

                PasteInfo.BadMarkEN = new bool[dGV_Paste.Rows.Count - 1];
                PasteInfo.IsPastePointsAbs = new bool[dGV_Paste.Rows.Count - 1];
                //BadMark
                PasteInfo.BadMark_AlgthrimIndex = rB_BadMark_Area.Checked == true ? (short)1 : (short)2;
                PasteInfo.BadMark_Shutter = double.Parse(tShutter_BadMark.Text);
                PasteInfo.BadMark_ROI_Left = short.Parse(tROI_LEFT_BadMark.Text);
                PasteInfo.BadMark_ROI_Top = short.Parse(tROI_TOP_BadMark.Text);
                PasteInfo.BadMark_ROI_Width = short.Parse(tROI_WIDTH_BadMark.Text);
                PasteInfo.BadMark_ROI_Height = short.Parse(tROI_HEIGHT_BadMark.Text);

                PasteInfo.BadMark_Score = short.Parse(tScore_BadMark.Text);
                PasteInfo.BadMark_MinAngle = short.Parse(tMinAngle_BadMark.Text);
                PasteInfo.BadMark_MaxAngle = short.Parse(tMaxAngle_BadMark.Text);

                PasteInfo.BadMark_Threshold = short.Parse(tThresholdPICValue.Text);
                PasteInfo.BadMark_LimtArea = int.Parse(tAreaOKNG.Text);
                PasteInfo.BadMarkPoints = new PointF[dGV_Paste.Rows.Count - 1];

                PasteInfo.OffsetX_Single = new double[dGV_Paste.Rows.Count - 1];
                PasteInfo.OffsetY_Single = new double[dGV_Paste.Rows.Count - 1];
                PasteInfo.Region = new string[dGV_Paste.Rows.Count - 1];

                if (rB_ISWhite.Checked)
                {
                    PasteInfo.ISBadMarkWhite = 0;
                }
                if (rB_ISBlack.Checked)
                {
                    PasteInfo.ISBadMarkWhite = 1;
                }
                if (rB_ISWhiteLess.Checked)
                {
                    PasteInfo.ISBadMarkWhite = 2;
                }
                if (rB_ISBlackLess.Checked)
                {
                    PasteInfo.ISBadMarkWhite = 3;
                }
                for (int i = 0; i < dGV_Paste.Rows.Count - 1; i++)
                {
                    PasteInfo.PastePN[i] = dGV_Paste.Rows[i].Cells[0].Value.ToString();
                    PasteInfo.PasteEN[i] = dGV_Paste.Rows[i].Cells[1].Value.ToString() == "1" ? true : false;
                    PasteInfo.PastePoints[i] = new PointF(float.Parse(dGV_Paste.Rows[i].Cells[2].Value.ToString()), float.Parse(dGV_Paste.Rows[i].Cells[3].Value.ToString()));
                    PasteInfo.PasteAngle[i] = double.Parse(dGV_Paste.Rows[i].Cells[4].Value.ToString());

                    PasteInfo.PasteHeight.Add(new List<double>());

                    for (int nz = 0; nz < Variable.NOZZLE_NUM; ++nz)
                    {
                        PasteInfo.PasteHeight[i].Add(double.Parse(dGV_Paste.Rows[i].Cells[5 + nz].Value.ToString()));
                    }

                    PasteInfo.FeederIndex[i] = short.Parse(dGV_Paste.Rows[i].Cells[5 + Variable.NOZZLE_NUM].Value.ToString());
                    PasteInfo.NozzleIndex[i] = short.Parse(dGV_Paste.Rows[i].Cells[6 + Variable.NOZZLE_NUM].Value.ToString());
                    PasteInfo.Delay[i] = short.Parse(dGV_Paste.Rows[i].Cells[7 + Variable.NOZZLE_NUM].Value.ToString());
                    PasteInfo.BadMarkEN[i] = dGV_Paste.Rows[i].Cells[8 + Variable.NOZZLE_NUM].Value.ToString() == "1" ? true : false;
                    PasteInfo.BadMarkPoints[i] = new PointF(float.Parse(dGV_Paste.Rows[i].Cells[9 + Variable.NOZZLE_NUM].Value.ToString()),
                        float.Parse(dGV_Paste.Rows[i].Cells[10 + Variable.NOZZLE_NUM].Value.ToString()));
                    PasteInfo.IsPastePointsAbs[i] = dGV_Paste.Rows[i].Cells[11 + Variable.NOZZLE_NUM].Value.ToString() == "1" ? true : false;
                    try
                    {
                        PasteInfo.OffsetX_Single[i] = double.Parse(dGV_Paste.Rows[i].Cells[12 + Variable.NOZZLE_NUM].Value.ToString());
                        PasteInfo.OffsetY_Single[i] = double.Parse(dGV_Paste.Rows[i].Cells[13 + Variable.NOZZLE_NUM].Value.ToString());
                        PasteInfo.Region[i] = dGV_Paste.Rows[i].Cells[14 + Variable.NOZZLE_NUM].Value.ToString();
                    }
                    catch { }
                }
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Update Fail!", "Info");
                }
                else
                {
                    MessageBox.Show("从贴附点中更新参数出错", "提示");
                }
                return;
            }
            bUpdataPaste.BackColor = Color.GreenYellow;
        }

        private void bSavePasteInfo_Click(object sender, EventArgs e)
        {
            //if (!PasswdCheck()) return;

            PasteInfo.BaseAngle = (double)this.baseAngle.Value;
            WriteXls2Data_Paste(Variable.sPath_SYS_PASTE + "\\" + PasteInfo.PasteName);
            bSavePasteInfo.BackColor = Color.GreenYellow;
        }

        private void bCancelPasteInfo_Click(object sender, EventArgs e)
        {
            cB_PasteType.Enabled = true;
            lPasteInfo.Text = "";
            gB_PasteInfo.Visible = false;
        }

        private void bCamPoint_MouseDown(object sender, MouseEventArgs e)
        {
            bCamPoint.BackColor = Color.White;
        }

        private void bShutter_Edit_MouseDown(object sender, MouseEventArgs e)
        {
            bShutter_Edit.BackColor = Color.White;
        }

        private void bLight_MouseDown(object sender, MouseEventArgs e)
        {
            bLight.BackColor = Color.White;
        }

        private void bDetect_Edit_MouseDown(object sender, MouseEventArgs e)
        {
            bDetect_Edit.BackColor = Color.White;
        }

        private void bDetect_Circle_MouseDown(object sender, MouseEventArgs e)
        {
            bDetect_Circle.BackColor = Color.White;
        }

        private void bUpdataPaste_MouseDown(object sender, MouseEventArgs e)
        {
            bUpdataPaste.BackColor = Color.White;
        }

        private void bSavePasteInfo_MouseDown(object sender, MouseEventArgs e)
        {
            bSavePasteInfo.BackColor = Color.White;
        }

        private void bReMark_MouseDown(object sender, MouseEventArgs e)
        {
            bReMark.BackColor = Color.White;
        }

        private void bUpdateXY_MouseDown(object sender, MouseEventArgs e)
        {
            bUpdateXY.BackColor = Color.White;
        }

        private void bExpand_MouseDown(object sender, MouseEventArgs e)
        {
            bExpand.BackColor = Color.White;
        }

        private void bReMark_Click(object sender, EventArgs e)
        {
            try
            {
                PasteInfo.CamPoint1.X = float.Parse(tCampoint1X.Text);
                PasteInfo.CamPoint1.Y = float.Parse(tCampoint1Y.Text);
                PasteInfo.CamPoint2.X = float.Parse(tCampoint2X.Text);
                PasteInfo.CamPoint2.Y = float.Parse(tCampoint2Y.Text);
            }
            catch (Exception)
            {
                MessageBox.Show("拍照点未设置", "提示");
                return;
            }
            if (PasteInfo.CamPoint1.X == 0 || PasteInfo.CamPoint1.Y == 0 ||
                PasteInfo.CamPoint2.X == 0 || PasteInfo.CamPoint2.Y == 0)
            {
                MessageBox.Show("拍照点未设置", "提示");
                return;
            }

            Thread Thread_DetectMark = new Thread(new ThreadStart(thread_DetectMark));
            Thread_DetectMark.Start();
        }

        private void bStopLookUp_Click(object sender, EventArgs e)
        {

        }

        private void bMarkPosition_Click(object sender, EventArgs e)
        {
            PointF A = new PointF(float.Parse(dGV_Mark.Rows[Mark_Index].Cells[4].Value.ToString()), float.Parse(dGV_Mark.Rows[Mark_Index].Cells[5].Value.ToString()));
            if (A.X == 0 && A.Y == 0)
            {
                MessageBox.Show("Mark点未设置！", "提示");
                return;
            }
            if (this.All_ZGoSafeTillStop(2000, VariableSys.VelMode_Debug_Manual))
            {
                A = GlassHelper.ActPoint2MachinePoint(A);

                XYGoPos(A, VariableSys.VelMode_Current_Manual);
            }
        }

        private void bUpdataParameterLabel_Click(object sender, EventArgs e)
        {
            #region MARK1
            PasteInfo.CamPoint1 = new PointF();
            PasteInfo.CamPoint1.X = float.Parse(dGV_Mark.Rows[0].Cells[0].Value.ToString());
            PasteInfo.CamPoint1.Y = float.Parse(dGV_Mark.Rows[0].Cells[1].Value.ToString());
            PasteInfo.Shutter1 = double.Parse(dGV_Mark.Rows[0].Cells[2].Value.ToString());
            PasteInfo.AlinIndex1 = short.Parse(dGV_Mark.Rows[0].Cells[3].Value.ToString());

            PasteInfo.Init_ROI_Top1 = short.Parse(dGV_Mark.Rows[0].Cells[6].Value.ToString());
            PasteInfo.Init_ROI_Left1 = short.Parse(dGV_Mark.Rows[0].Cells[7].Value.ToString());
            PasteInfo.Init_ROI_Width1 = short.Parse(dGV_Mark.Rows[0].Cells[8].Value.ToString());
            PasteInfo.Init_ROI_Height1 = short.Parse(dGV_Mark.Rows[0].Cells[9].Value.ToString());
            PasteInfo.Init_OffsetX1 = short.Parse(dGV_Mark.Rows[0].Cells[10].Value.ToString());
            PasteInfo.Init_OffsetY1 = short.Parse(dGV_Mark.Rows[0].Cells[11].Value.ToString());
            PasteInfo.Init_Point1 = new PointF();
            PasteInfo.Init_Point1.X = float.Parse(dGV_Mark.Rows[0].Cells[12].Value.ToString());
            PasteInfo.Init_Point1.Y = float.Parse(dGV_Mark.Rows[0].Cells[13].Value.ToString());
            PasteInfo.Init_Angle1 = float.Parse(dGV_Mark.Rows[0].Cells[14].Value.ToString());
            PasteInfo.Score1 = short.Parse(dGV_Mark.Rows[0].Cells[15].Value.ToString());
            PasteInfo.MinAngle1 = double.Parse(dGV_Mark.Rows[0].Cells[16].Value.ToString());
            PasteInfo.MaxAngle1 = double.Parse(dGV_Mark.Rows[0].Cells[17].Value.ToString());
            PasteInfo.S_ROI_Top1 = short.Parse(dGV_Mark.Rows[0].Cells[18].Value.ToString());
            PasteInfo.S_ROI_Left1 = short.Parse(dGV_Mark.Rows[0].Cells[19].Value.ToString());
            PasteInfo.S_ROI_Width1 = short.Parse(dGV_Mark.Rows[0].Cells[20].Value.ToString());
            PasteInfo.S_ROI_Height1 = short.Parse(dGV_Mark.Rows[0].Cells[21].Value.ToString());
            PasteInfo.S_MinR1 = short.Parse(dGV_Mark.Rows[0].Cells[22].Value.ToString());
            PasteInfo.S_MaxR1 = short.Parse(dGV_Mark.Rows[0].Cells[23].Value.ToString());
            PasteInfo.S_Center1 = new PointF();
            PasteInfo.S_Center1.X = float.Parse(dGV_Mark.Rows[0].Cells[24].Value.ToString());
            PasteInfo.S_Center1.Y = float.Parse(dGV_Mark.Rows[0].Cells[25].Value.ToString());
            //H1************************************************
            PasteInfo.Corner_H1_Point1 = new PointF();
            PasteInfo.Corner_H1_Point1.X = float.Parse(dGV_Mark.Rows[0].Cells[26].Value.ToString());
            PasteInfo.Corner_H1_Point1.Y = float.Parse(dGV_Mark.Rows[0].Cells[27].Value.ToString());
            PasteInfo.Corner_H1_CamPoint1 = new PointF();//拍照点
            PasteInfo.Corner_H1_CamPoint1.X = float.Parse(dGV_Mark.Rows[0].Cells[28].Value.ToString());
            PasteInfo.Corner_H1_CamPoint1.Y = float.Parse(dGV_Mark.Rows[0].Cells[29].Value.ToString());
            PasteInfo.Corner_H1_Shutter1 = double.Parse(dGV_Mark.Rows[0].Cells[30].Value.ToString());
            //H1初定位打光
            PasteInfo.bCorner_H1_Red1 = dGV_Mark.Rows[0].Cells[31].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_H1_Green1 = dGV_Mark.Rows[0].Cells[32].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_H1_Blue1 = dGV_Mark.Rows[0].Cells[33].Value.ToString() == "1" ? true : false;
            PasteInfo.dCorner_H1_RedValue1 = double.Parse(dGV_Mark.Rows[0].Cells[34].Value.ToString());
            PasteInfo.dCorner_H1_GreenValue1 = double.Parse(dGV_Mark.Rows[0].Cells[35].Value.ToString());
            PasteInfo.dCorner_H1_BlueValue1 = double.Parse(dGV_Mark.Rows[0].Cells[36].Value.ToString());
            //H1初定位ROI
            PasteInfo.Corner_H1_Init_Top1 = short.Parse(dGV_Mark.Rows[0].Cells[37].Value.ToString());
            PasteInfo.Corner_H1_Init_Left1 = short.Parse(dGV_Mark.Rows[0].Cells[38].Value.ToString());
            PasteInfo.Corner_H1_Init_Width1 = short.Parse(dGV_Mark.Rows[0].Cells[39].Value.ToString());
            PasteInfo.Corner_H1_Init_Height1 = short.Parse(dGV_Mark.Rows[0].Cells[40].Value.ToString());
            //H1初定位侦测的点
            PasteInfo.Corner_H1_Init_Point1 = new PointF();
            PasteInfo.Corner_H1_Init_Point1.X = float.Parse(dGV_Mark.Rows[0].Cells[41].Value.ToString());
            PasteInfo.Corner_H1_Init_Point1.Y = float.Parse(dGV_Mark.Rows[0].Cells[42].Value.ToString());
            PasteInfo.Corner_H1_Init_Angle1 = double.Parse(dGV_Mark.Rows[0].Cells[43].Value.ToString());
            PasteInfo.Corner_H1_Init_Score1 = short.Parse(dGV_Mark.Rows[0].Cells[44].Value.ToString());//H1初定位 分数
            PasteInfo.Corner_H1_Init_MinAngle1 = double.Parse(dGV_Mark.Rows[0].Cells[45].Value.ToString());//H1初定位 最小角度
            PasteInfo.Corner_H1_Init_MaxAngle1 = double.Parse(dGV_Mark.Rows[0].Cells[46].Value.ToString());//H1初定位 最大角度

            PasteInfo.Corner_H1_Top1 = short.Parse(dGV_Mark.Rows[0].Cells[47].Value.ToString());
            PasteInfo.Corner_H1_Left1 = short.Parse(dGV_Mark.Rows[0].Cells[48].Value.ToString());
            PasteInfo.Corner_H1_Width1 = short.Parse(dGV_Mark.Rows[0].Cells[49].Value.ToString());
            PasteInfo.Corner_H1_Height1 = short.Parse(dGV_Mark.Rows[0].Cells[50].Value.ToString());
            PasteInfo.Corner_H1_EdgeStrength1 = short.Parse(dGV_Mark.Rows[0].Cells[51].Value.ToString());
            PasteInfo.Corner_H1_PicDir1 = dGV_Mark.Rows[0].Cells[52].Value.ToString();
            PasteInfo.Corner_H1_GrayValueDir1 = dGV_Mark.Rows[0].Cells[53].Value.ToString();

            PasteInfo.Corner_H2_Point1 = new PointF();
            PasteInfo.Corner_H2_Point1.X = float.Parse(dGV_Mark.Rows[0].Cells[54].Value.ToString());
            PasteInfo.Corner_H2_Point1.Y = float.Parse(dGV_Mark.Rows[0].Cells[55].Value.ToString());
            PasteInfo.Corner_H2_CamPoint1 = new PointF();//拍照点
            PasteInfo.Corner_H2_CamPoint1.X = float.Parse(dGV_Mark.Rows[0].Cells[56].Value.ToString());
            PasteInfo.Corner_H2_CamPoint1.Y = float.Parse(dGV_Mark.Rows[0].Cells[57].Value.ToString());
            PasteInfo.Corner_H2_Shutter1 = double.Parse(dGV_Mark.Rows[0].Cells[58].Value.ToString());
            //H2初定位打光
            PasteInfo.bCorner_H2_Red1 = dGV_Mark.Rows[0].Cells[59].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_H2_Green1 = dGV_Mark.Rows[0].Cells[60].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_H2_Blue1 = dGV_Mark.Rows[0].Cells[61].Value.ToString() == "1" ? true : false;
            PasteInfo.dCorner_H2_RedValue1 = double.Parse(dGV_Mark.Rows[0].Cells[62].Value.ToString());
            PasteInfo.dCorner_H2_GreenValue1 = double.Parse(dGV_Mark.Rows[0].Cells[63].Value.ToString());
            PasteInfo.dCorner_H2_BlueValue1 = double.Parse(dGV_Mark.Rows[0].Cells[64].Value.ToString());
            //H2初定位ROI
            PasteInfo.Corner_H2_Init_Top1 = short.Parse(dGV_Mark.Rows[0].Cells[65].Value.ToString());
            PasteInfo.Corner_H2_Init_Left1 = short.Parse(dGV_Mark.Rows[0].Cells[66].Value.ToString());
            PasteInfo.Corner_H2_Init_Width1 = short.Parse(dGV_Mark.Rows[0].Cells[67].Value.ToString());
            PasteInfo.Corner_H2_Init_Height1 = short.Parse(dGV_Mark.Rows[0].Cells[68].Value.ToString());
            //H2初定位侦测的点
            PasteInfo.Corner_H2_Init_Point1 = new PointF();
            PasteInfo.Corner_H2_Init_Point1.X = float.Parse(dGV_Mark.Rows[0].Cells[69].Value.ToString());
            PasteInfo.Corner_H2_Init_Point1.Y = float.Parse(dGV_Mark.Rows[0].Cells[70].Value.ToString());
            PasteInfo.Corner_H2_Init_Angle1 = double.Parse(dGV_Mark.Rows[0].Cells[71].Value.ToString());
            PasteInfo.Corner_H2_Init_Score1 = short.Parse(dGV_Mark.Rows[0].Cells[72].Value.ToString());//H1初定位 分数
            PasteInfo.Corner_H2_Init_MinAngle1 = double.Parse(dGV_Mark.Rows[0].Cells[73].Value.ToString());//H1初定位 最小角度
            PasteInfo.Corner_H2_Init_MaxAngle1 = double.Parse(dGV_Mark.Rows[0].Cells[74].Value.ToString());//H1初定位 最大角度

            PasteInfo.Corner_H2_Top1 = short.Parse(dGV_Mark.Rows[0].Cells[75].Value.ToString());
            PasteInfo.Corner_H2_Left1 = short.Parse(dGV_Mark.Rows[0].Cells[76].Value.ToString());
            PasteInfo.Corner_H2_Width1 = short.Parse(dGV_Mark.Rows[0].Cells[77].Value.ToString());
            PasteInfo.Corner_H2_Height1 = short.Parse(dGV_Mark.Rows[0].Cells[78].Value.ToString());
            PasteInfo.Corner_H2_EdgeStrength1 = short.Parse(dGV_Mark.Rows[0].Cells[79].Value.ToString());
            PasteInfo.Corner_H2_PicDir1 = dGV_Mark.Rows[0].Cells[80].Value.ToString();
            PasteInfo.Corner_H2_GrayValueDir1 = dGV_Mark.Rows[0].Cells[81].Value.ToString();

            PasteInfo.Corner_V1_Point1 = new PointF();
            PasteInfo.Corner_V1_Point1.X = float.Parse(dGV_Mark.Rows[0].Cells[82].Value.ToString());
            PasteInfo.Corner_V1_Point1.Y = float.Parse(dGV_Mark.Rows[0].Cells[83].Value.ToString());
            PasteInfo.Corner_V1_CamPoint1 = new PointF();//拍照点
            PasteInfo.Corner_V1_CamPoint1.X = float.Parse(dGV_Mark.Rows[0].Cells[84].Value.ToString());
            PasteInfo.Corner_V1_CamPoint1.Y = float.Parse(dGV_Mark.Rows[0].Cells[85].Value.ToString());
            PasteInfo.Corner_V1_Shutter1 = double.Parse(dGV_Mark.Rows[0].Cells[86].Value.ToString());
            //V1初定位打光
            PasteInfo.bCorner_V1_Red1 = dGV_Mark.Rows[0].Cells[87].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_V1_Green1 = dGV_Mark.Rows[0].Cells[88].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_V1_Blue1 = dGV_Mark.Rows[0].Cells[89].Value.ToString() == "1" ? true : false;
            PasteInfo.dCorner_V1_RedValue1 = double.Parse(dGV_Mark.Rows[0].Cells[90].Value.ToString());
            PasteInfo.dCorner_V1_GreenValue1 = double.Parse(dGV_Mark.Rows[0].Cells[91].Value.ToString());
            PasteInfo.dCorner_V1_BlueValue1 = double.Parse(dGV_Mark.Rows[0].Cells[92].Value.ToString());
            //V1初定位ROI
            PasteInfo.Corner_V1_Init_Top1 = short.Parse(dGV_Mark.Rows[0].Cells[93].Value.ToString());
            PasteInfo.Corner_V1_Init_Left1 = short.Parse(dGV_Mark.Rows[0].Cells[94].Value.ToString());
            PasteInfo.Corner_V1_Init_Width1 = short.Parse(dGV_Mark.Rows[0].Cells[95].Value.ToString());
            PasteInfo.Corner_V1_Init_Height1 = short.Parse(dGV_Mark.Rows[0].Cells[96].Value.ToString());
            //V1初定位侦测的点
            PasteInfo.Corner_V1_Init_Point1 = new PointF();
            PasteInfo.Corner_V1_Init_Point1.X = float.Parse(dGV_Mark.Rows[0].Cells[97].Value.ToString());
            PasteInfo.Corner_V1_Init_Point1.Y = float.Parse(dGV_Mark.Rows[0].Cells[98].Value.ToString());
            PasteInfo.Corner_V1_Init_Angle1 = double.Parse(dGV_Mark.Rows[0].Cells[99].Value.ToString());
            PasteInfo.Corner_V1_Init_Score1 = short.Parse(dGV_Mark.Rows[0].Cells[100].Value.ToString());//H1初定位 分数
            PasteInfo.Corner_V1_Init_MinAngle1 = double.Parse(dGV_Mark.Rows[0].Cells[101].Value.ToString());//H1初定位 最小角度
            PasteInfo.Corner_V1_Init_MaxAngle1 = double.Parse(dGV_Mark.Rows[0].Cells[102].Value.ToString());//H1初定位 最大角度

            PasteInfo.Corner_V1_Top1 = short.Parse(dGV_Mark.Rows[0].Cells[103].Value.ToString());
            PasteInfo.Corner_V1_Left1 = short.Parse(dGV_Mark.Rows[0].Cells[104].Value.ToString());
            PasteInfo.Corner_V1_Width1 = short.Parse(dGV_Mark.Rows[0].Cells[105].Value.ToString());
            PasteInfo.Corner_V1_Height1 = short.Parse(dGV_Mark.Rows[0].Cells[106].Value.ToString());
            PasteInfo.Corner_V1_EdgeStrength1 = short.Parse(dGV_Mark.Rows[0].Cells[107].Value.ToString());
            PasteInfo.Corner_V1_PicDir1 = dGV_Mark.Rows[0].Cells[108].Value.ToString();
            PasteInfo.Corner_V1_GrayValueDir1 = dGV_Mark.Rows[0].Cells[109].Value.ToString();
            //V2
            PasteInfo.Corner_V2_Point1 = new PointF();
            PasteInfo.Corner_V2_Point1.X = float.Parse(dGV_Mark.Rows[0].Cells[110].Value.ToString());
            PasteInfo.Corner_V2_Point1.Y = float.Parse(dGV_Mark.Rows[0].Cells[111].Value.ToString());

            PasteInfo.Corner_V2_CamPoint1 = new PointF();//拍照点
            PasteInfo.Corner_V2_CamPoint1.X = float.Parse(dGV_Mark.Rows[0].Cells[112].Value.ToString());
            PasteInfo.Corner_V2_CamPoint1.Y = float.Parse(dGV_Mark.Rows[0].Cells[113].Value.ToString());
            PasteInfo.Corner_V2_Shutter1 = double.Parse(dGV_Mark.Rows[0].Cells[114].Value.ToString());
            //V2初定位打光
            PasteInfo.bCorner_V2_Red1 = dGV_Mark.Rows[0].Cells[115].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_V2_Green1 = dGV_Mark.Rows[0].Cells[116].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_V2_Blue1 = dGV_Mark.Rows[0].Cells[117].Value.ToString() == "1" ? true : false;
            PasteInfo.dCorner_V2_RedValue1 = double.Parse(dGV_Mark.Rows[0].Cells[118].Value.ToString());
            PasteInfo.dCorner_V2_GreenValue1 = double.Parse(dGV_Mark.Rows[0].Cells[119].Value.ToString());
            PasteInfo.dCorner_V2_BlueValue1 = double.Parse(dGV_Mark.Rows[0].Cells[120].Value.ToString());
            //V2初定位ROI
            PasteInfo.Corner_V2_Init_Top1 = short.Parse(dGV_Mark.Rows[0].Cells[121].Value.ToString());
            PasteInfo.Corner_V2_Init_Left1 = short.Parse(dGV_Mark.Rows[0].Cells[122].Value.ToString());
            PasteInfo.Corner_V2_Init_Width1 = short.Parse(dGV_Mark.Rows[0].Cells[123].Value.ToString());
            PasteInfo.Corner_V2_Init_Height1 = short.Parse(dGV_Mark.Rows[0].Cells[124].Value.ToString());
            //V2初定位侦测的点
            PasteInfo.Corner_V2_Init_Point1 = new PointF();
            PasteInfo.Corner_V2_Init_Point1.X = float.Parse(dGV_Mark.Rows[0].Cells[125].Value.ToString());
            PasteInfo.Corner_V2_Init_Point1.Y = float.Parse(dGV_Mark.Rows[0].Cells[126].Value.ToString());
            PasteInfo.Corner_V2_Init_Angle1 = double.Parse(dGV_Mark.Rows[0].Cells[127].Value.ToString());
            PasteInfo.Corner_V2_Init_Score1 = short.Parse(dGV_Mark.Rows[0].Cells[128].Value.ToString());//H1初定位 分数
            PasteInfo.Corner_V2_Init_MinAngle1 = double.Parse(dGV_Mark.Rows[0].Cells[129].Value.ToString());//H1初定位 最小角度
            PasteInfo.Corner_V2_Init_MaxAngle1 = double.Parse(dGV_Mark.Rows[0].Cells[130].Value.ToString());//H1初定位 最大角度

            PasteInfo.Corner_V2_Top1 = short.Parse(dGV_Mark.Rows[0].Cells[131].Value.ToString());
            PasteInfo.Corner_V2_Left1 = short.Parse(dGV_Mark.Rows[0].Cells[132].Value.ToString());
            PasteInfo.Corner_V2_Width1 = short.Parse(dGV_Mark.Rows[0].Cells[133].Value.ToString());
            PasteInfo.Corner_V2_Height1 = short.Parse(dGV_Mark.Rows[0].Cells[134].Value.ToString());
            PasteInfo.Corner_V2_EdgeStrength1 = short.Parse(dGV_Mark.Rows[0].Cells[135].Value.ToString());
            PasteInfo.Corner_V2_PicDir1 = dGV_Mark.Rows[0].Cells[136].Value.ToString();
            PasteInfo.Corner_V2_GrayValueDir1 = dGV_Mark.Rows[0].Cells[137].Value.ToString();

            PasteInfo.Corner_Point1 = new PointF();
            PasteInfo.Corner_Point1.X = float.Parse(dGV_Mark.Rows[0].Cells[138].Value.ToString());
            PasteInfo.Corner_Point1.Y = float.Parse(dGV_Mark.Rows[0].Cells[139].Value.ToString());

            PasteInfo.CornerAngleIndex1 = short.Parse(dGV_Mark.Rows[0].Cells[140].Value.ToString());

            PasteInfo.bRed1 = dGV_Mark.Rows[0].Cells[141].Value.ToString() == "1" ? true : false;
            PasteInfo.bGreen1 = dGV_Mark.Rows[0].Cells[142].Value.ToString() == "1" ? true : false;
            PasteInfo.bBlue1 = dGV_Mark.Rows[0].Cells[143].Value.ToString() == "1" ? true : false;
            PasteInfo.dRedValue1 = double.Parse(dGV_Mark.Rows[0].Cells[144].Value.ToString());
            PasteInfo.dGreenValue1 = double.Parse(dGV_Mark.Rows[0].Cells[145].Value.ToString());
            PasteInfo.dBlueValue1 = double.Parse(dGV_Mark.Rows[0].Cells[146].Value.ToString());

            PasteInfo.GainInit1 = double.Parse(dGV_Mark.Rows[0].Cells[147].Value.ToString());
            PasteInfo.OffsetInit1 = double.Parse(dGV_Mark.Rows[0].Cells[148].Value.ToString());
            PasteInfo.GainCircle1 = double.Parse(dGV_Mark.Rows[0].Cells[149].Value.ToString());
            PasteInfo.OffsetCircle1 = double.Parse(dGV_Mark.Rows[0].Cells[150].Value.ToString());
            PasteInfo.GainH1_1 = double.Parse(dGV_Mark.Rows[0].Cells[151].Value.ToString());
            PasteInfo.OffsetH1_1 = double.Parse(dGV_Mark.Rows[0].Cells[152].Value.ToString());
            PasteInfo.GainH2_1 = double.Parse(dGV_Mark.Rows[0].Cells[153].Value.ToString());
            PasteInfo.OffsetH2_1 = double.Parse(dGV_Mark.Rows[0].Cells[154].Value.ToString());
            PasteInfo.GainV1_1 = double.Parse(dGV_Mark.Rows[0].Cells[155].Value.ToString());
            PasteInfo.OffsetV1_1 = double.Parse(dGV_Mark.Rows[0].Cells[156].Value.ToString());
            PasteInfo.GainV2_1 = double.Parse(dGV_Mark.Rows[0].Cells[157].Value.ToString());
            PasteInfo.OffsetV2_1 = double.Parse(dGV_Mark.Rows[0].Cells[158].Value.ToString());

            PasteInfo.bAreaEN1 = dGV_Mark.Rows[0].Cells[159].Value.ToString() == "1" ? true : false;
            PasteInfo.iAreaMin1 = int.Parse(dGV_Mark.Rows[0].Cells[160].Value.ToString());
            PasteInfo.iAreaMax1 = int.Parse(dGV_Mark.Rows[0].Cells[161].Value.ToString());
            PasteInfo.iAreaOKStyle1 = short.Parse(dGV_Mark.Rows[0].Cells[162].Value.ToString());

            PasteInfo.GrabLine_EdgeStrength1 = double.Parse(dGV_Mark.Rows[0].Cells[163].Value.ToString());
            PasteInfo.GrabLine_PicDir1 = dGV_Mark.Rows[0].Cells[164].Value.ToString();
            PasteInfo.GrabLine_GrayValueDir1 = dGV_Mark.Rows[0].Cells[165].Value.ToString();
            PasteInfo.GrabLine_ROI1 = dGV_Mark.Rows[0].Cells[166].Value.ToString();
            PasteInfo.GrabLine_Enable1 = dGV_Mark.Rows[0].Cells[167].Value.ToString() == "True" ? true : false;
            #endregion
            #region MARK2
            PasteInfo.CamPoint2 = new PointF();
            PasteInfo.CamPoint2.X = float.Parse(dGV_Mark.Rows[1].Cells[0].Value.ToString());
            PasteInfo.CamPoint2.Y = float.Parse(dGV_Mark.Rows[1].Cells[1].Value.ToString());
            PasteInfo.Shutter2 = double.Parse(dGV_Mark.Rows[1].Cells[2].Value.ToString());
            PasteInfo.AlinIndex2 = short.Parse(dGV_Mark.Rows[1].Cells[3].Value.ToString());

            PasteInfo.Init_ROI_Top2 = short.Parse(dGV_Mark.Rows[1].Cells[6].Value.ToString());
            PasteInfo.Init_ROI_Left2 = short.Parse(dGV_Mark.Rows[1].Cells[7].Value.ToString());
            PasteInfo.Init_ROI_Width2 = short.Parse(dGV_Mark.Rows[1].Cells[8].Value.ToString());
            PasteInfo.Init_ROI_Height2 = short.Parse(dGV_Mark.Rows[1].Cells[9].Value.ToString());
            PasteInfo.Init_OffsetX2 = short.Parse(dGV_Mark.Rows[1].Cells[10].Value.ToString());
            PasteInfo.Init_OffsetY2 = short.Parse(dGV_Mark.Rows[1].Cells[11].Value.ToString());
            PasteInfo.Init_Point2 = new PointF();
            PasteInfo.Init_Point2.X = float.Parse(dGV_Mark.Rows[1].Cells[12].Value.ToString());
            PasteInfo.Init_Point2.Y = float.Parse(dGV_Mark.Rows[1].Cells[13].Value.ToString());
            PasteInfo.Init_Angle2 = float.Parse(dGV_Mark.Rows[1].Cells[14].Value.ToString());
            PasteInfo.Score2 = short.Parse(dGV_Mark.Rows[1].Cells[15].Value.ToString());
            PasteInfo.MinAngle2 = double.Parse(dGV_Mark.Rows[1].Cells[16].Value.ToString());
            PasteInfo.MaxAngle2 = double.Parse(dGV_Mark.Rows[1].Cells[17].Value.ToString());
            PasteInfo.S_ROI_Top2 = short.Parse(dGV_Mark.Rows[1].Cells[18].Value.ToString());
            PasteInfo.S_ROI_Left2 = short.Parse(dGV_Mark.Rows[1].Cells[19].Value.ToString());
            PasteInfo.S_ROI_Width2 = short.Parse(dGV_Mark.Rows[1].Cells[20].Value.ToString());
            PasteInfo.S_ROI_Height2 = short.Parse(dGV_Mark.Rows[1].Cells[21].Value.ToString());
            PasteInfo.S_MinR2 = short.Parse(dGV_Mark.Rows[1].Cells[22].Value.ToString());
            PasteInfo.S_MaxR2 = short.Parse(dGV_Mark.Rows[1].Cells[23].Value.ToString());
            PasteInfo.S_Center2 = new PointF();
            PasteInfo.S_Center2.X = float.Parse(dGV_Mark.Rows[1].Cells[24].Value.ToString());
            PasteInfo.S_Center2.Y = float.Parse(dGV_Mark.Rows[1].Cells[25].Value.ToString());
            //H1************************************************
            PasteInfo.Corner_H1_Point2 = new PointF();
            PasteInfo.Corner_H1_Point2.X = float.Parse(dGV_Mark.Rows[1].Cells[26].Value.ToString());
            PasteInfo.Corner_H1_Point2.Y = float.Parse(dGV_Mark.Rows[1].Cells[27].Value.ToString());
            PasteInfo.Corner_H1_CamPoint2 = new PointF();//拍照点
            PasteInfo.Corner_H1_CamPoint2.X = float.Parse(dGV_Mark.Rows[1].Cells[28].Value.ToString());
            PasteInfo.Corner_H1_CamPoint2.Y = float.Parse(dGV_Mark.Rows[1].Cells[29].Value.ToString());
            PasteInfo.Corner_H1_Shutter2 = double.Parse(dGV_Mark.Rows[1].Cells[30].Value.ToString());
            //H1初定位打光
            PasteInfo.bCorner_H1_Red2 = dGV_Mark.Rows[1].Cells[31].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_H1_Green2 = dGV_Mark.Rows[1].Cells[32].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_H1_Blue2 = dGV_Mark.Rows[1].Cells[33].Value.ToString() == "1" ? true : false;
            PasteInfo.dCorner_H1_RedValue2 = double.Parse(dGV_Mark.Rows[1].Cells[34].Value.ToString());
            PasteInfo.dCorner_H1_GreenValue2 = double.Parse(dGV_Mark.Rows[1].Cells[35].Value.ToString());
            PasteInfo.dCorner_H1_BlueValue2 = double.Parse(dGV_Mark.Rows[1].Cells[36].Value.ToString());
            //H1初定位ROI
            PasteInfo.Corner_H1_Init_Top2 = short.Parse(dGV_Mark.Rows[1].Cells[37].Value.ToString());
            PasteInfo.Corner_H1_Init_Left2 = short.Parse(dGV_Mark.Rows[1].Cells[38].Value.ToString());
            PasteInfo.Corner_H1_Init_Width2 = short.Parse(dGV_Mark.Rows[1].Cells[39].Value.ToString());
            PasteInfo.Corner_H1_Init_Height2 = short.Parse(dGV_Mark.Rows[1].Cells[40].Value.ToString());
            //H1初定位侦测的点
            PasteInfo.Corner_H1_Init_Point2 = new PointF();
            PasteInfo.Corner_H1_Init_Point2.X = float.Parse(dGV_Mark.Rows[1].Cells[41].Value.ToString());
            PasteInfo.Corner_H1_Init_Point2.Y = float.Parse(dGV_Mark.Rows[1].Cells[42].Value.ToString());
            PasteInfo.Corner_H1_Init_Angle2 = double.Parse(dGV_Mark.Rows[1].Cells[43].Value.ToString());
            PasteInfo.Corner_H1_Init_Score2 = short.Parse(dGV_Mark.Rows[1].Cells[44].Value.ToString());//H1初定位 分数
            PasteInfo.Corner_H1_Init_MinAngle2 = double.Parse(dGV_Mark.Rows[1].Cells[45].Value.ToString());//H1初定位 最小角度
            PasteInfo.Corner_H1_Init_MaxAngle2 = double.Parse(dGV_Mark.Rows[1].Cells[46].Value.ToString());//H1初定位 最大角度

            PasteInfo.Corner_H1_Top2 = short.Parse(dGV_Mark.Rows[1].Cells[47].Value.ToString());
            PasteInfo.Corner_H1_Left2 = short.Parse(dGV_Mark.Rows[1].Cells[48].Value.ToString());
            PasteInfo.Corner_H1_Width2 = short.Parse(dGV_Mark.Rows[1].Cells[49].Value.ToString());
            PasteInfo.Corner_H1_Height2 = short.Parse(dGV_Mark.Rows[1].Cells[50].Value.ToString());
            PasteInfo.Corner_H1_EdgeStrength2 = short.Parse(dGV_Mark.Rows[1].Cells[51].Value.ToString());
            PasteInfo.Corner_H1_PicDir2 = dGV_Mark.Rows[1].Cells[52].Value.ToString();
            PasteInfo.Corner_H1_GrayValueDir2 = dGV_Mark.Rows[1].Cells[53].Value.ToString();

            PasteInfo.Corner_H2_Point2 = new PointF();
            PasteInfo.Corner_H2_Point2.X = float.Parse(dGV_Mark.Rows[1].Cells[54].Value.ToString());
            PasteInfo.Corner_H2_Point2.Y = float.Parse(dGV_Mark.Rows[1].Cells[55].Value.ToString());
            PasteInfo.Corner_H2_CamPoint2 = new PointF();//拍照点
            PasteInfo.Corner_H2_CamPoint2.X = float.Parse(dGV_Mark.Rows[1].Cells[56].Value.ToString());
            PasteInfo.Corner_H2_CamPoint2.Y = float.Parse(dGV_Mark.Rows[1].Cells[57].Value.ToString());
            PasteInfo.Corner_H2_Shutter2 = double.Parse(dGV_Mark.Rows[1].Cells[58].Value.ToString());
            //H2初定位打光
            PasteInfo.bCorner_H2_Red2 = dGV_Mark.Rows[1].Cells[59].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_H2_Green2 = dGV_Mark.Rows[1].Cells[60].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_H2_Blue2 = dGV_Mark.Rows[1].Cells[61].Value.ToString() == "1" ? true : false;
            PasteInfo.dCorner_H2_RedValue2 = double.Parse(dGV_Mark.Rows[1].Cells[62].Value.ToString());
            PasteInfo.dCorner_H2_GreenValue2 = double.Parse(dGV_Mark.Rows[1].Cells[63].Value.ToString());
            PasteInfo.dCorner_H2_BlueValue2 = double.Parse(dGV_Mark.Rows[1].Cells[64].Value.ToString());
            //H2初定位ROI
            PasteInfo.Corner_H2_Init_Top2 = short.Parse(dGV_Mark.Rows[1].Cells[65].Value.ToString());
            PasteInfo.Corner_H2_Init_Left2 = short.Parse(dGV_Mark.Rows[1].Cells[66].Value.ToString());
            PasteInfo.Corner_H2_Init_Width2 = short.Parse(dGV_Mark.Rows[1].Cells[67].Value.ToString());
            PasteInfo.Corner_H2_Init_Height2 = short.Parse(dGV_Mark.Rows[1].Cells[68].Value.ToString());
            //H2初定位侦测的点
            PasteInfo.Corner_H2_Init_Point2 = new PointF();
            PasteInfo.Corner_H2_Init_Point2.X = float.Parse(dGV_Mark.Rows[1].Cells[69].Value.ToString());
            PasteInfo.Corner_H2_Init_Point2.Y = float.Parse(dGV_Mark.Rows[1].Cells[70].Value.ToString());
            PasteInfo.Corner_H2_Init_Angle2 = double.Parse(dGV_Mark.Rows[1].Cells[71].Value.ToString());
            PasteInfo.Corner_H2_Init_Score2 = short.Parse(dGV_Mark.Rows[1].Cells[72].Value.ToString());//H1初定位 分数
            PasteInfo.Corner_H2_Init_MinAngle2 = double.Parse(dGV_Mark.Rows[1].Cells[73].Value.ToString());//H1初定位 最小角度
            PasteInfo.Corner_H2_Init_MaxAngle2 = double.Parse(dGV_Mark.Rows[1].Cells[74].Value.ToString());//H1初定位 最大角度

            PasteInfo.Corner_H2_Top2 = short.Parse(dGV_Mark.Rows[1].Cells[75].Value.ToString());
            PasteInfo.Corner_H2_Left2 = short.Parse(dGV_Mark.Rows[1].Cells[76].Value.ToString());
            PasteInfo.Corner_H2_Width2 = short.Parse(dGV_Mark.Rows[1].Cells[77].Value.ToString());
            PasteInfo.Corner_H2_Height2 = short.Parse(dGV_Mark.Rows[1].Cells[78].Value.ToString());
            PasteInfo.Corner_H2_EdgeStrength2 = short.Parse(dGV_Mark.Rows[1].Cells[79].Value.ToString());
            PasteInfo.Corner_H2_PicDir2 = dGV_Mark.Rows[1].Cells[80].Value.ToString();
            PasteInfo.Corner_H2_GrayValueDir2 = dGV_Mark.Rows[1].Cells[81].Value.ToString();

            PasteInfo.Corner_V1_Point2 = new PointF();
            PasteInfo.Corner_V1_Point2.X = float.Parse(dGV_Mark.Rows[1].Cells[82].Value.ToString());
            PasteInfo.Corner_V1_Point2.Y = float.Parse(dGV_Mark.Rows[1].Cells[83].Value.ToString());
            PasteInfo.Corner_V1_CamPoint2 = new PointF();//拍照点
            PasteInfo.Corner_V1_CamPoint2.X = float.Parse(dGV_Mark.Rows[1].Cells[84].Value.ToString());
            PasteInfo.Corner_V1_CamPoint2.Y = float.Parse(dGV_Mark.Rows[1].Cells[85].Value.ToString());
            PasteInfo.Corner_V1_Shutter2 = double.Parse(dGV_Mark.Rows[1].Cells[86].Value.ToString());
            //V1初定位打光
            PasteInfo.bCorner_V1_Red2 = dGV_Mark.Rows[1].Cells[87].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_V1_Green2 = dGV_Mark.Rows[1].Cells[88].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_V1_Blue2 = dGV_Mark.Rows[1].Cells[89].Value.ToString() == "1" ? true : false;
            PasteInfo.dCorner_V1_RedValue2 = double.Parse(dGV_Mark.Rows[1].Cells[90].Value.ToString());
            PasteInfo.dCorner_V1_GreenValue2 = double.Parse(dGV_Mark.Rows[1].Cells[91].Value.ToString());
            PasteInfo.dCorner_V1_BlueValue2 = double.Parse(dGV_Mark.Rows[1].Cells[92].Value.ToString());
            //V1初定位ROI
            PasteInfo.Corner_V1_Init_Top2 = short.Parse(dGV_Mark.Rows[1].Cells[93].Value.ToString());
            PasteInfo.Corner_V1_Init_Left2 = short.Parse(dGV_Mark.Rows[1].Cells[94].Value.ToString());
            PasteInfo.Corner_V1_Init_Width2 = short.Parse(dGV_Mark.Rows[1].Cells[95].Value.ToString());
            PasteInfo.Corner_V1_Init_Height2 = short.Parse(dGV_Mark.Rows[1].Cells[96].Value.ToString());
            //V1初定位侦测的点
            PasteInfo.Corner_V1_Init_Point2 = new PointF();
            PasteInfo.Corner_V1_Init_Point2.X = float.Parse(dGV_Mark.Rows[1].Cells[97].Value.ToString());
            PasteInfo.Corner_V1_Init_Point2.Y = float.Parse(dGV_Mark.Rows[1].Cells[98].Value.ToString());
            PasteInfo.Corner_V1_Init_Angle2 = double.Parse(dGV_Mark.Rows[1].Cells[99].Value.ToString());
            PasteInfo.Corner_V1_Init_Score2 = short.Parse(dGV_Mark.Rows[1].Cells[100].Value.ToString());//H1初定位 分数
            PasteInfo.Corner_V1_Init_MinAngle2 = double.Parse(dGV_Mark.Rows[1].Cells[101].Value.ToString());//H1初定位 最小角度
            PasteInfo.Corner_V1_Init_MaxAngle2 = double.Parse(dGV_Mark.Rows[1].Cells[102].Value.ToString());//H1初定位 最大角度

            PasteInfo.Corner_V1_Top2 = short.Parse(dGV_Mark.Rows[1].Cells[103].Value.ToString());
            PasteInfo.Corner_V1_Left2 = short.Parse(dGV_Mark.Rows[1].Cells[104].Value.ToString());
            PasteInfo.Corner_V1_Width2 = short.Parse(dGV_Mark.Rows[1].Cells[105].Value.ToString());
            PasteInfo.Corner_V1_Height2 = short.Parse(dGV_Mark.Rows[1].Cells[106].Value.ToString());
            PasteInfo.Corner_V1_EdgeStrength2 = short.Parse(dGV_Mark.Rows[1].Cells[107].Value.ToString());
            PasteInfo.Corner_V1_PicDir2 = dGV_Mark.Rows[1].Cells[108].Value.ToString();
            PasteInfo.Corner_V1_GrayValueDir2 = dGV_Mark.Rows[1].Cells[109].Value.ToString();
            //V2
            PasteInfo.Corner_V2_Point2 = new PointF();
            PasteInfo.Corner_V2_Point2.X = float.Parse(dGV_Mark.Rows[1].Cells[110].Value.ToString());
            PasteInfo.Corner_V2_Point2.Y = float.Parse(dGV_Mark.Rows[1].Cells[111].Value.ToString());

            PasteInfo.Corner_V2_CamPoint2 = new PointF();//拍照点
            PasteInfo.Corner_V2_CamPoint2.X = float.Parse(dGV_Mark.Rows[1].Cells[112].Value.ToString());
            PasteInfo.Corner_V2_CamPoint2.Y = float.Parse(dGV_Mark.Rows[1].Cells[113].Value.ToString());
            PasteInfo.Corner_V2_Shutter2 = double.Parse(dGV_Mark.Rows[1].Cells[114].Value.ToString());
            //V2初定位打光
            PasteInfo.bCorner_V2_Red2 = dGV_Mark.Rows[1].Cells[115].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_V2_Green2 = dGV_Mark.Rows[1].Cells[116].Value.ToString() == "1" ? true : false;
            PasteInfo.bCorner_V2_Blue2 = dGV_Mark.Rows[1].Cells[117].Value.ToString() == "1" ? true : false;
            PasteInfo.dCorner_V2_RedValue2 = double.Parse(dGV_Mark.Rows[1].Cells[118].Value.ToString());
            PasteInfo.dCorner_V2_GreenValue2 = double.Parse(dGV_Mark.Rows[1].Cells[119].Value.ToString());
            PasteInfo.dCorner_V2_BlueValue2 = double.Parse(dGV_Mark.Rows[1].Cells[120].Value.ToString());
            //V2初定位ROI
            PasteInfo.Corner_V2_Init_Top2 = short.Parse(dGV_Mark.Rows[1].Cells[121].Value.ToString());
            PasteInfo.Corner_V2_Init_Left2 = short.Parse(dGV_Mark.Rows[1].Cells[122].Value.ToString());
            PasteInfo.Corner_V2_Init_Width2 = short.Parse(dGV_Mark.Rows[1].Cells[123].Value.ToString());
            PasteInfo.Corner_V2_Init_Height2 = short.Parse(dGV_Mark.Rows[1].Cells[124].Value.ToString());
            //V2初定位侦测的点
            PasteInfo.Corner_V2_Init_Point2 = new PointF();
            PasteInfo.Corner_V2_Init_Point2.X = float.Parse(dGV_Mark.Rows[1].Cells[125].Value.ToString());
            PasteInfo.Corner_V2_Init_Point2.Y = float.Parse(dGV_Mark.Rows[1].Cells[126].Value.ToString());
            PasteInfo.Corner_V2_Init_Angle2 = double.Parse(dGV_Mark.Rows[1].Cells[127].Value.ToString());
            PasteInfo.Corner_V2_Init_Score2 = short.Parse(dGV_Mark.Rows[1].Cells[128].Value.ToString());//H1初定位 分数
            PasteInfo.Corner_V2_Init_MinAngle2 = double.Parse(dGV_Mark.Rows[1].Cells[129].Value.ToString());//H1初定位 最小角度
            PasteInfo.Corner_V2_Init_MaxAngle2 = double.Parse(dGV_Mark.Rows[1].Cells[130].Value.ToString());//H1初定位 最大角度

            PasteInfo.Corner_V2_Top2 = short.Parse(dGV_Mark.Rows[1].Cells[131].Value.ToString());
            PasteInfo.Corner_V2_Left2 = short.Parse(dGV_Mark.Rows[1].Cells[132].Value.ToString());
            PasteInfo.Corner_V2_Width2 = short.Parse(dGV_Mark.Rows[1].Cells[133].Value.ToString());
            PasteInfo.Corner_V2_Height2 = short.Parse(dGV_Mark.Rows[1].Cells[134].Value.ToString());
            PasteInfo.Corner_V2_EdgeStrength2 = short.Parse(dGV_Mark.Rows[1].Cells[135].Value.ToString());
            PasteInfo.Corner_V2_PicDir2 = dGV_Mark.Rows[1].Cells[136].Value.ToString();
            PasteInfo.Corner_V2_GrayValueDir2 = dGV_Mark.Rows[1].Cells[137].Value.ToString();

            PasteInfo.Corner_Point2 = new PointF();
            PasteInfo.Corner_Point2.X = float.Parse(dGV_Mark.Rows[1].Cells[138].Value.ToString());
            PasteInfo.Corner_Point2.Y = float.Parse(dGV_Mark.Rows[1].Cells[139].Value.ToString());

            PasteInfo.CornerAngleIndex2 = short.Parse(dGV_Mark.Rows[1].Cells[140].Value.ToString());

            PasteInfo.bRed2 = dGV_Mark.Rows[1].Cells[141].Value.ToString() == "1" ? true : false;
            PasteInfo.bGreen2 = dGV_Mark.Rows[1].Cells[142].Value.ToString() == "1" ? true : false;
            PasteInfo.bBlue2 = dGV_Mark.Rows[1].Cells[143].Value.ToString() == "1" ? true : false;
            PasteInfo.dRedValue2 = double.Parse(dGV_Mark.Rows[1].Cells[144].Value.ToString());
            PasteInfo.dGreenValue2 = double.Parse(dGV_Mark.Rows[1].Cells[145].Value.ToString());
            PasteInfo.dBlueValue2 = double.Parse(dGV_Mark.Rows[1].Cells[146].Value.ToString());

            PasteInfo.GainInit2 = double.Parse(dGV_Mark.Rows[1].Cells[147].Value.ToString());
            PasteInfo.OffsetInit2 = double.Parse(dGV_Mark.Rows[1].Cells[148].Value.ToString());
            PasteInfo.GainCircle2 = double.Parse(dGV_Mark.Rows[1].Cells[149].Value.ToString());
            PasteInfo.OffsetCircle2 = double.Parse(dGV_Mark.Rows[1].Cells[150].Value.ToString());
            PasteInfo.GainH1_2 = double.Parse(dGV_Mark.Rows[1].Cells[151].Value.ToString());
            PasteInfo.OffsetH1_2 = double.Parse(dGV_Mark.Rows[1].Cells[152].Value.ToString());
            PasteInfo.GainH2_2 = double.Parse(dGV_Mark.Rows[1].Cells[153].Value.ToString());
            PasteInfo.OffsetH2_2 = double.Parse(dGV_Mark.Rows[1].Cells[154].Value.ToString());
            PasteInfo.GainV1_2 = double.Parse(dGV_Mark.Rows[1].Cells[155].Value.ToString());
            PasteInfo.OffsetV1_2 = double.Parse(dGV_Mark.Rows[1].Cells[156].Value.ToString());
            PasteInfo.GainV2_2 = double.Parse(dGV_Mark.Rows[1].Cells[157].Value.ToString());
            PasteInfo.OffsetV2_2 = double.Parse(dGV_Mark.Rows[1].Cells[158].Value.ToString());

            PasteInfo.bAreaEN2 = dGV_Mark.Rows[1].Cells[159].Value.ToString() == "1" ? true : false;
            PasteInfo.iAreaMin2 = int.Parse(dGV_Mark.Rows[1].Cells[160].Value.ToString());
            PasteInfo.iAreaMax2 = int.Parse(dGV_Mark.Rows[1].Cells[161].Value.ToString());
            PasteInfo.iAreaOKStyle2 = short.Parse(dGV_Mark.Rows[1].Cells[162].Value.ToString());

            PasteInfo.GrabLine_EdgeStrength2 = double.Parse(dGV_Mark.Rows[1].Cells[163].Value.ToString());
            PasteInfo.GrabLine_PicDir2 = dGV_Mark.Rows[1].Cells[164].Value.ToString();
            PasteInfo.GrabLine_GrayValueDir2 = dGV_Mark.Rows[1].Cells[165].Value.ToString();
            PasteInfo.GrabLine_ROI2 = dGV_Mark.Rows[1].Cells[166].Value.ToString();
            PasteInfo.GrabLine_Enable2 = dGV_Mark.Rows[1].Cells[167].Value.ToString() == "True" ? true : false;
            #endregion


            //计算Mark
            PasteInfo.Mark1 = new PointF();
            CAM camera = (CAM)(CamIndexSelected - 1);
            if (PasteInfo.AlinIndex1 == 1 || PasteInfo.AlinIndex1 == 2)
            {
                PasteInfo.Mark1 = Point2CCDCenter(PasteInfo.CamPoint1, new PointContour(PasteInfo.Init_Point1.X, PasteInfo.Init_Point1.Y), camera,0);
            }
            if (PasteInfo.AlinIndex1 == 3 || PasteInfo.AlinIndex1 == 4 || PasteInfo.AlinIndex1 == 5)
            {
                PasteInfo.Mark1 = Point2CCDCenter(PasteInfo.CamPoint1, new PointContour(PasteInfo.S_Center1.X, PasteInfo.S_Center1.Y), camera,0);
            }
            if (PasteInfo.AlinIndex1 == 6 || PasteInfo.AlinIndex1 == 7 || PasteInfo.AlinIndex1 == 8 || PasteInfo.AlinIndex1 == 9 || PasteInfo.AlinIndex1 == 10)
            {
                PasteInfo.Mark1 = Point2CCDCenter(PasteInfo.CamPoint1, new PointContour(PasteInfo.Corner_Point1.X, PasteInfo.Corner_Point1.Y), camera,0);
            }

            dGV_Mark.Rows[0].Cells[4].Value = PasteInfo.Mark1.X.ToString();
            dGV_Mark.Rows[0].Cells[5].Value = PasteInfo.Mark1.Y.ToString();

            PasteInfo.Mark2 = new PointF();
            if (PasteInfo.AlinIndex2 == 1 || PasteInfo.AlinIndex2 == 2)
            {
                PasteInfo.Mark2 = Point2CCDCenter(PasteInfo.CamPoint2, new PointContour(PasteInfo.Init_Point2.X, PasteInfo.Init_Point2.Y), camera,0);
            }
            if (PasteInfo.AlinIndex2 == 3 || PasteInfo.AlinIndex2 == 4 || PasteInfo.AlinIndex2 == 5)
            {
                PasteInfo.Mark2 = Point2CCDCenter(PasteInfo.CamPoint2, new PointContour(PasteInfo.S_Center2.X, PasteInfo.S_Center2.Y), camera,0);
            }
            if (PasteInfo.AlinIndex2 == 6 || PasteInfo.AlinIndex2 == 7 || PasteInfo.AlinIndex2 == 8 || PasteInfo.AlinIndex2 == 9 || PasteInfo.AlinIndex2 == 10)
            {
                PasteInfo.Mark2 = Point2CCDCenter(PasteInfo.CamPoint2, new PointContour(PasteInfo.Corner_Point2.X, PasteInfo.Corner_Point2.Y), camera,0);
            }
            dGV_Mark.Rows[1].Cells[4].Value = PasteInfo.Mark2.X.ToString();
            dGV_Mark.Rows[1].Cells[5].Value = PasteInfo.Mark2.Y.ToString();

            bUpdataParameterLabel.BackColor = Color.GreenYellow;
        }

        private void bUpdataParameterLabel_MouseDown(object sender, MouseEventArgs e)
        {
            bUpdataParameterLabel.BackColor = Color.White;
        }

        private void bSaveLabelInfo_MouseDown(object sender, MouseEventArgs e)
        {
            bSaveLabelInfo.BackColor = Color.White;
        }

        private void bSaveLabelInfo_Click(object sender, EventArgs e)
        {
            //if (!PasswdCheck()) return;

            WriteXls2Data_Label(Variable.sPath_SYS_LABEL + "\\" + PasteInfo.PasteName);
            bSaveLabelInfo.BackColor = Color.GreenYellow;
        }

        private void bUpdateNewCoord_Click(object sender, EventArgs e)
        {
            try
            {
                PointF t1 = GlassHelper.MachinePoint2ActPoint(newMark1);
                PointF t2 = GlassHelper.MachinePoint2ActPoint(newMark2);
                dGV_Mark.Rows[0].Cells[0].Value = newMark1.X;
                dGV_Mark.Rows[0].Cells[1].Value = newMark1.Y;
                dGV_Mark.Rows[1].Cells[0].Value = newMark2.X;
                dGV_Mark.Rows[1].Cells[1].Value = newMark2.Y;
                dGV_Mark.Rows[0].Cells[4].Value = t1.X.ToString();
                dGV_Mark.Rows[0].Cells[5].Value = t1.Y.ToString();
                dGV_Mark.Rows[1].Cells[4].Value = t2.X.ToString();
                dGV_Mark.Rows[1].Cells[5].Value = t2.Y.ToString();
                for (int i = 0; i < dGV_Paste.Rows.Count - 1; i++)
                {
                    dGV_Paste.Rows[i].Cells[2].Value = PastePoints[i].X.ToString();
                    dGV_Paste.Rows[i].Cells[3].Value = PastePoints[i].Y.ToString();
                    dGV_Paste.Rows[i].Cells[13].Value = BadMarkPoints[i].X.ToString();
                    dGV_Paste.Rows[i].Cells[14].Value = BadMarkPoints[i].Y.ToString();
                    PasteInfo.PastePoints[i].X = PastePoints[i].X;
                    PasteInfo.PastePoints[i].Y = PastePoints[i].Y;
                    PasteInfo.PasteAngle[i] = PasteInfo.PasteAngle[i] - PasteAngle_Check;
                    dGV_Paste.Rows[i].Cells[4].Value = PasteInfo.PasteAngle[i].ToString("F3");
                }
                PasteInfo.Mark1.X = t1.X;
                PasteInfo.Mark1.Y = t1.Y;
                PasteInfo.Mark2.X = t2.X;
                PasteInfo.Mark2.Y = t2.Y;
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Update Fail!", "Info");
                }
                else
                {
                    MessageBox.Show("更新坐标错误", "提示");
                }
            }
        }

        private void bCamGoBadMarkPoint_Click(object sender, EventArgs e)
        {
            if (dGV_Paste.SelectedRows.Count > 0 && dGV_Paste.SelectedRows[0].Index != dGV_Paste.Rows.Count - 1)
            {
                PointF a = new PointF();
                a.X = float.Parse(dGV_Paste.SelectedRows[0].Cells[9 + Variable.NOZZLE_NUM].Value.ToString());
                a.Y = float.Parse(dGV_Paste.SelectedRows[0].Cells[10 + Variable.NOZZLE_NUM].Value.ToString());
                if (!this.All_ZGoSafeTillStop(2000, VariableSys.VelMode_Debug_Manual))
                {
                    short rtn = XYGoPos(a, VariableSys.VelMode_Slow_Manual);
                    if (rtn != 0)
                    {
                        if (VariableSys.LanguageFlag == 1)
                        {
                            MessageBox.Show("Go to Safe Height First!", "Info");
                        }
                        else
                        {
                            MessageBox.Show("请先回安全点", "提示");
                        }

                    }
                }
                else
                {
                    XYGoPos(a, VariableSys.VelMode_Slow_Manual);
                }
            }
        }

        private void bCalMark_Click(object sender, EventArgs e)
        {
            PasteInfo.Mark1 = new PointF();
            if (PasteInfo.AlinIndex1 == 1 || PasteInfo.AlinIndex1 == 2)
            {
                PasteInfo.Mark1 = Point2CCDCenter(PasteInfo.CamPoint1, new PointContour(PasteInfo.Init_Point1.X, PasteInfo.Init_Point1.Y), 0,0);
            }
            if (PasteInfo.AlinIndex1 == 3 || PasteInfo.AlinIndex1 == 4 || PasteInfo.AlinIndex1 == 5)
            {
                PasteInfo.Mark1 = Point2CCDCenter(PasteInfo.CamPoint1, new PointContour(PasteInfo.S_Center1.X, PasteInfo.S_Center1.Y), 0,0);
            }
            dGV_Mark.Rows[0].Cells[4].Value = PasteInfo.Mark1.X.ToString();
            dGV_Mark.Rows[0].Cells[5].Value = PasteInfo.Mark1.Y.ToString();

            PasteInfo.Mark2 = new PointF();
            if (PasteInfo.AlinIndex2 == 1 || PasteInfo.AlinIndex2 == 2)
            {
                PasteInfo.Mark2 = Point2CCDCenter(PasteInfo.CamPoint2, new PointContour(PasteInfo.Init_Point2.X, PasteInfo.Init_Point2.Y), 0, 0);
            }
            if (PasteInfo.AlinIndex1 == 3 || PasteInfo.AlinIndex1 == 4 || PasteInfo.AlinIndex1 == 5)
            {
                PasteInfo.Mark2 = Point2CCDCenter(PasteInfo.CamPoint2, new PointContour(PasteInfo.S_Center2.X, PasteInfo.S_Center2.Y), 0, 0);
            }
            dGV_Mark.Rows[1].Cells[4].Value = PasteInfo.Mark2.X.ToString();
            dGV_Mark.Rows[1].Cells[5].Value = PasteInfo.Mark2.Y.ToString();

        }

        private void cB_AlignIndex_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (Mark_Index > 1)
            {
                return;
            }
            this.bFindShape.Visible = false;
            dGV_Mark.Rows[Mark_Index].Cells[3].Value = (cB_AlignIndex.SelectedIndex).ToString();
            gb_GrabConer.Visible = true;
            switch (cB_AlignIndex.SelectedIndex - 1)//算法选择
            {
                case -1://无
                    gB_LearnEdit.Visible = false;
                    gB_Circle.Visible = false;
                    gB_Corner.Visible = false;
                    gb_GrabConer.Visible = false;
                    break;
                case 0://灰度匹配
                    gB_LearnEdit.Visible = true;
                    gB_Circle.Visible = false;
                    gB_Corner.Visible = true;
                    break;
                case 1://边缘匹配
                    gB_LearnEdit.Visible = true;
                    gB_Circle.Visible = false;
                    gB_Corner.Visible = true;
                    gb_GrabConer.Visible = true;
                    break;
                case 2://找圆
                    gB_LearnEdit.Visible = false;
                    gB_Circle.Visible = true;
                    gB_Corner.Visible = true;
                    break;
                case 3://灰度匹配+找圆
                    gB_LearnEdit.Visible = true;
                    gB_Circle.Visible = true;
                    gB_Corner.Visible = false;
                    break;
                case 4://边缘匹配+找圆
                    gB_LearnEdit.Visible = true;
                    gB_Circle.Visible = true;
                    gB_Corner.Visible = true;
                    break;
                case 5://找角
                    gB_LearnEdit.Visible = false;
                    gB_Circle.Visible = false;
                    gB_Corner.Visible = true;
                    break;
                case 6://灰度匹配+找角
                    gB_LearnEdit.Visible = true;
                    gB_Circle.Visible = false;
                    gB_Corner.Visible = true;
                    break;
                case 7://边缘匹配+找角
                    gB_LearnEdit.Visible = true;
                    gB_Circle.Visible = false;
                    gB_Corner.Visible = true;
                    break;
                case 8://各自找角(边缘匹配)
                    gB_LearnEdit.Visible = false;
                    gB_Circle.Visible = false;
                    gB_Corner.Visible = true;
                    break;
                case 9://各自找角(边缘匹配)
                    gB_LearnEdit.Visible = false;
                    gB_Circle.Visible = false;
                    gB_Corner.Visible = true;
                    break;
                case 12:
                    if (this.cB_PasteType.SelectedIndex == 1)
                        this.bFindShape.Visible = true;

                    gB_LearnEdit.Visible = false;
                    gB_Circle.Visible = false;
                    gB_Corner.Visible = false;
                    gb_GrabConer.Visible = true;
                    break;
            }
        }

        private void bShowROI_Pattern_Click(object sender, EventArgs e)
        {
            try
            {
                imageSet.Roi.Clear();
                double dleft, dtop, dwidth, dheight;
                dleft = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[7].Value.ToString());
                dtop = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[6].Value.ToString());
                dwidth = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[8].Value.ToString());
                dheight = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[9].Value.ToString());
                imageSet.Roi.Add(new RectangleContour(dleft, dtop, dwidth, dheight));
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }

        }

        private void bShowROI_Circle_Click(object sender, EventArgs e)
        {
            try
            {
                imageSet.Roi.Clear();
                double dleft, dtop, dwidth, dheight;
                dleft = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[19].Value.ToString());
                dtop = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[18].Value.ToString());
                dwidth = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[20].Value.ToString());
                dheight = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[21].Value.ToString());
                imageSet.Roi.Add(new RectangleContour(dleft, dtop, dwidth, dheight));
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }

        private void bShowROI_Corner_Click(object sender, EventArgs e)
        {
            double dleft, dtop, dwidth, dheight;
            if (rB_ROI_H1.Checked)
            {
                try
                {
                    imageSet.Roi.Clear();
                    dleft = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[29].Value.ToString());
                    dtop = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[28].Value.ToString());
                    dwidth = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[30].Value.ToString());
                    dheight = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[31].Value.ToString());
                    imageSet.Roi.Add(new RectangleContour(dleft, dtop, dwidth, dheight));
                }
                catch (System.Exception ex)
                {
                    MessageBox.Show(ex.ToString());
                }
            }

            if (rB_ROI_H2.Checked)
            {
                try
                {
                    imageSet.Roi.Clear();
                    dleft = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[36].Value.ToString());
                    dtop = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[35].Value.ToString());
                    dwidth = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[37].Value.ToString());
                    dheight = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[38].Value.ToString());
                    imageSet.Roi.Add(new RectangleContour(dleft, dtop, dwidth, dheight));
                }
                catch (System.Exception ex)
                {
                    MessageBox.Show(ex.ToString());
                }
            }

            if (rB_ROI_V1.Checked)
            {
                try
                {
                    imageSet.Roi.Clear();
                    dleft = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[47].Value.ToString());
                    dtop = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[46].Value.ToString());
                    dwidth = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[48].Value.ToString());
                    dheight = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[49].Value.ToString());
                    imageSet.Roi.Add(new RectangleContour(dleft, dtop, dwidth, dheight));
                }
                catch (System.Exception ex)
                {
                    MessageBox.Show(ex.ToString());
                }
            }

            if (rB_ROI_V2.Checked)
            {
                try
                {
                    imageSet.Roi.Clear();
                    dleft = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[56].Value.ToString());
                    dtop = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[55].Value.ToString());
                    dwidth = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[57].Value.ToString());
                    dheight = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[58].Value.ToString());
                    imageSet.Roi.Add(new RectangleContour(dleft, dtop, dwidth, dheight));
                }
                catch (System.Exception ex)
                {
                    MessageBox.Show(ex.ToString());
                }
            }

        }

        private void bLine1_Click(object sender, EventArgs e)
        {
            double gain = 1;
            double offset = 0;
            double EdgeStrength = 60;
            if (dGV_Mark.SelectedRows.Count > 0 && dGV_Mark.SelectedRows[0].Index != dGV_Mark.Rows.Count - 1)
            {
                if (imageSet.Roi.Count > 0)
                {
                    if (imageSet.Roi[0].Shape.GetType() != typeof(RectangleContour))
                    {
                        if (VariableSys.LanguageFlag == 1)
                        {
                            MessageBox.Show("NO ROI in image!", "Info");
                        }
                        else
                        {
                            MessageBox.Show("Image中没有矩形ROI！", "提示");
                        }
                        return;
                    }
                    try
                    {
                        EdgeStrength = double.Parse(tLineStrength.Text);
                    }
                    catch
                    {
                        if (VariableSys.LanguageFlag == 1)
                        {
                            MessageBox.Show("Input the wrong number!", "Info");
                        }
                        else
                        {
                            MessageBox.Show("边缘强度设置错误！", "提示");
                        }
                        return;
                    }
                    #region 寻边参数
                    SearchDirection searchDirection = new SearchDirection();
                    EdgePolaritySearchMode edgeMode = new EdgePolaritySearchMode();

                    if (rB_Dire_L2R.Checked)
                    {
                        searchDirection = SearchDirection.LeftToRight;
                    }
                    if (rB_Dire_R2L.Checked)
                    {
                        searchDirection = SearchDirection.RightToLeft;
                    }
                    if (rB_Dire_T2B.Checked)
                    {
                        searchDirection = SearchDirection.TopToBottom;
                    }
                    if (rB_Dire_B2T.Checked)
                    {
                        searchDirection = SearchDirection.BottomToTop;
                    }
                    if (rB_Dire_B2W.Checked)
                    {
                        edgeMode = EdgePolaritySearchMode.Rising;
                    }
                    else
                    {
                        edgeMode = EdgePolaritySearchMode.Falling;
                    }
                    #endregion
                    RectangleContour Roi_DetectLine;//=new Contour;
                    Roi_DetectLine = (RectangleContour)imageSet.Roi[0].Shape;
                    Algorithms.Extract(imageSet.Image, imageTemp, (RectangleContour)imageSet.Roi[0].Shape);
                    Algorithms.ImageToImage(GainOffset(imageTemp, gain, offset), imageSet.Image, new PointContour(((RectangleContour)imageSet.Roi[0].Shape).Left, ((RectangleContour)imageSet.Roi[0].Shape).Top));
                    short rtn = CamDetect_EdgeDetect(imageSet.Image, imageSet.Roi, EdgeStrength, searchDirection, edgeMode, ref P_Start, ref P_End);
                    if (rtn == 0)//OK
                    {
                        if (rB_ROI_H1.Checked)
                        {
                            dGV_Mark.Rows[Mark_Index].Cells[26].Value = ((P_Start.X + P_End.X) / 2).ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[27].Value = ((P_Start.Y + P_End.Y) / 2).ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[47].Value = Roi_DetectLine.Top.ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[48].Value = Roi_DetectLine.Left.ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[49].Value = Roi_DetectLine.Width.ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[50].Value = Roi_DetectLine.Height.ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[51].Value = EdgeStrength.ToString();

                            dGV_Mark.Rows[Mark_Index].Cells[151].Value = gain.ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[152].Value = offset.ToString();

                            if (searchDirection == SearchDirection.TopToBottom)
                            {
                                dGV_Mark.Rows[Mark_Index].Cells[52].Value = "Up2Bottom";
                            }
                            else
                            {
                                dGV_Mark.Rows[Mark_Index].Cells[52].Value = "Bottom2Up";
                            }
                            if (edgeMode == EdgePolaritySearchMode.Rising)
                            {
                                dGV_Mark.Rows[Mark_Index].Cells[53].Value = "Dark2Light";
                            }
                            else
                            {
                                dGV_Mark.Rows[Mark_Index].Cells[53].Value = "Light2Dark";
                            }
                        }
                        if (rB_ROI_H2.Checked)
                        {
                            dGV_Mark.Rows[Mark_Index].Cells[54].Value = ((P_Start.X + P_End.X) / 2).ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[55].Value = ((P_Start.Y + P_End.Y) / 2).ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[75].Value = Roi_DetectLine.Top.ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[76].Value = Roi_DetectLine.Left.ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[77].Value = Roi_DetectLine.Width.ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[78].Value = Roi_DetectLine.Height.ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[79].Value = EdgeStrength.ToString();

                            dGV_Mark.Rows[Mark_Index].Cells[153].Value = gain.ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[154].Value = offset.ToString();
                            if (searchDirection == SearchDirection.TopToBottom)
                            {
                                dGV_Mark.Rows[Mark_Index].Cells[80].Value = "Up2Bottom";
                            }
                            else
                            {
                                dGV_Mark.Rows[Mark_Index].Cells[80].Value = "Bottom2Up";
                            }
                            if (edgeMode == EdgePolaritySearchMode.Rising)
                            {
                                dGV_Mark.Rows[Mark_Index].Cells[81].Value = "Dark2Light";
                            }
                            else
                            {
                                dGV_Mark.Rows[Mark_Index].Cells[81].Value = "Light2Dark";
                            }
                        }
                        if (rB_ROI_V1.Checked)
                        {
                            dGV_Mark.Rows[Mark_Index].Cells[82].Value = ((P_Start.X + P_End.X) / 2).ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[83].Value = ((P_Start.Y + P_End.Y) / 2).ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[103].Value = Roi_DetectLine.Top.ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[104].Value = Roi_DetectLine.Left.ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[105].Value = Roi_DetectLine.Width.ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[106].Value = Roi_DetectLine.Height.ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[107].Value = EdgeStrength.ToString();

                            dGV_Mark.Rows[Mark_Index].Cells[155].Value = gain.ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[156].Value = offset.ToString();
                            if (searchDirection == SearchDirection.LeftToRight)
                            {
                                dGV_Mark.Rows[Mark_Index].Cells[108].Value = "Left2Right";
                            }
                            else
                            {
                                dGV_Mark.Rows[Mark_Index].Cells[108].Value = "Right2Left";
                            }
                            if (edgeMode == EdgePolaritySearchMode.Rising)
                            {
                                dGV_Mark.Rows[Mark_Index].Cells[109].Value = "Dark2Light";
                            }
                            else
                            {
                                dGV_Mark.Rows[Mark_Index].Cells[109].Value = "Light2Dark";
                            }
                        }
                        if (rB_ROI_V2.Checked)
                        {
                            dGV_Mark.Rows[Mark_Index].Cells[110].Value = ((P_Start.X + P_End.X) / 2).ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[111].Value = ((P_Start.Y + P_End.Y) / 2).ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[131].Value = Roi_DetectLine.Top.ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[132].Value = Roi_DetectLine.Left.ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[133].Value = Roi_DetectLine.Width.ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[134].Value = Roi_DetectLine.Height.ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[135].Value = EdgeStrength.ToString();

                            dGV_Mark.Rows[Mark_Index].Cells[157].Value = gain.ToString();
                            dGV_Mark.Rows[Mark_Index].Cells[158].Value = offset.ToString();
                            if (searchDirection == SearchDirection.LeftToRight)
                            {
                                dGV_Mark.Rows[Mark_Index].Cells[136].Value = "Left2Right";
                            }
                            else
                            {
                                dGV_Mark.Rows[Mark_Index].Cells[136].Value = "Right2Left";
                            }
                            if (edgeMode == EdgePolaritySearchMode.Rising)
                            {
                                dGV_Mark.Rows[Mark_Index].Cells[137].Value = "Dark2Light";
                            }
                            else
                            {
                                dGV_Mark.Rows[Mark_Index].Cells[137].Value = "Light2Dark";
                            }
                        }
                    }
                    else//NG
                    {
                        if (VariableSys.LanguageFlag == 1)
                        {
                            MessageBox.Show("Edge Detect Fail!", "Info");
                        }
                        else
                        {
                            MessageBox.Show("边缘侦测失败", "提示");
                        }

                    }

                }
                else
                {
                    if (VariableSys.LanguageFlag == 1)
                    {
                        MessageBox.Show("NO ROI in image!", "Info");
                    }
                    else
                    {
                        MessageBox.Show("Image中没有矩形ROI！", "提示");
                    }
                }
            }
        }

        /// <summary>
        /// 抓取直线的边定R
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void bGrabLine_Click(object sender, EventArgs e)
        {
            double gain = 1;
            double offset = 0;
            double EdgeStrength = 60;
            if (dGV_Mark.SelectedRows.Count > 0 && dGV_Mark.SelectedRows[0].Index != dGV_Mark.Rows.Count - 1)
            {
                if (imageSet.Roi.Count > 0)
                {
                    if (imageSet.Roi[0].Shape.GetType() != typeof(RectangleContour))
                    {
                        if (VariableSys.LanguageFlag == 1)
                        {
                            MessageBox.Show("NO ROI in image!", "Info");
                        }
                        else
                        {
                            MessageBox.Show("Image中没有矩形ROI！", "提示");
                        }
                        return;
                    }
                    try
                    {
                        EdgeStrength = double.Parse(tLineStrength.Text);
                    }
                    catch
                    {
                        if (VariableSys.LanguageFlag == 1)
                        {
                            MessageBox.Show("Input the wrong number!", "Info");
                        }
                        else
                        {
                            MessageBox.Show("边缘强度设置错误！", "提示");
                        }
                        return;
                    }

                    #region 寻边参数
                    SearchDirection searchDirection = new SearchDirection();
                    EdgePolaritySearchMode edgeMode = new EdgePolaritySearchMode();

                    if (rB_Dire_L2R.Checked)
                    {
                        searchDirection = SearchDirection.LeftToRight;
                    }
                    if (rB_Dire_R2L.Checked)
                    {
                        searchDirection = SearchDirection.RightToLeft;
                    }
                    if (rB_Dire_T2B.Checked)
                    {
                        searchDirection = SearchDirection.TopToBottom;
                    }
                    if (rB_Dire_B2T.Checked)
                    {
                        searchDirection = SearchDirection.BottomToTop;
                    }
                    if (rB_Dire_B2W.Checked)
                    {
                        edgeMode = EdgePolaritySearchMode.Rising;
                    }
                    else
                    {
                        edgeMode = EdgePolaritySearchMode.Falling;
                    }
                    #endregion

                    RectangleContour Roi_DetectLine;//=new Contour;
                    Roi_DetectLine = (RectangleContour)imageSet.Roi[0].Shape;
                    Algorithms.Extract(imageSet.Image, imageTemp, (RectangleContour)imageSet.Roi[0].Shape);
                    Algorithms.ImageToImage(GainOffset(imageTemp, gain, offset), imageSet.Image, new PointContour(((RectangleContour)imageSet.Roi[0].Shape).Left, ((RectangleContour)imageSet.Roi[0].Shape).Top));
                    short rtn = CamDetect_EdgeDetect(imageSet.Image, imageSet.Roi, EdgeStrength, searchDirection, edgeMode, ref P_Start, ref P_End);

                    if (rtn == 0)//OK
                    {
                        // 保存抓边的参数
                        //this.dGV_Mark.Rows[]
                        dGV_Mark.Rows[Mark_Index].Cells[163].Value = EdgeStrength.ToString();
                        dGV_Mark.Rows[Mark_Index].Cells[164].Value = ((int)searchDirection).ToString();
                        dGV_Mark.Rows[Mark_Index].Cells[165].Value = ((int)edgeMode).ToString();
                        dGV_Mark.Rows[Mark_Index].Cells[166].Value = $"{Roi_DetectLine.Top},{Roi_DetectLine.Left},{Roi_DetectLine.Width},{Roi_DetectLine.Height}";
                        dGV_Mark.Rows[Mark_Index].Cells[167].Value = cb_EnableGrabLine.Checked.ToString();
                    }
                    else//NG
                    {
                        MessageBox.Show("边缘侦测失败", "提示");
                    }
                }
                else
                {
                    MessageBox.Show("Image中没有矩形ROI！", "提示");
                }
            }
        }


        private void bCornerCamPoint_Click(object sender, EventArgs e)
        {
            PointF xy = this.XYPos;
            if (dGV_Mark.SelectedRows.Count > 0 && dGV_Mark.SelectedRows[0].Index != dGV_Mark.Rows.Count - 1)
            {
                if (rB_ROI_H1.Checked)
                {
                    dGV_Mark.Rows[Mark_Index].Cells[28].Value = xy.X.ToString("F3");
                    dGV_Mark.Rows[Mark_Index].Cells[29].Value = xy.Y.ToString("F3");
                }
                if (rB_ROI_H2.Checked)
                {
                    dGV_Mark.Rows[Mark_Index].Cells[56].Value = xy.X.ToString("F3");
                    dGV_Mark.Rows[Mark_Index].Cells[57].Value = xy.Y.ToString("F3");
                }
                if (rB_ROI_V1.Checked)
                {
                    dGV_Mark.Rows[Mark_Index].Cells[84].Value = xy.X.ToString("F3");
                    dGV_Mark.Rows[Mark_Index].Cells[85].Value = xy.Y.ToString("F3");
                }
                if (rB_ROI_V2.Checked)
                {
                    dGV_Mark.Rows[Mark_Index].Cells[112].Value = xy.X.ToString("F3");
                    dGV_Mark.Rows[Mark_Index].Cells[113].Value = xy.Y.ToString("F3");
                }
            }
        }

        private void bDetectCorner_Click(object sender, EventArgs e)
        {
            //显示参数
            if (dGV_Mark.SelectedRows.Count > 0 && dGV_Mark.SelectedRows[0].Index != dGV_Mark.Rows.Count - 1)
            {
                PointContour Center = new PointContour((double)0, (double)0);
                double Pt_H1_Mid_X = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[26].Value.ToString());
                double Pt_H1_Mid_Y = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[27].Value.ToString());
                double Pt_H2_Mid_X = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[54].Value.ToString());
                double Pt_H2_Mid_Y = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[55].Value.ToString());
                double Pt_V1_Mid_X = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[82].Value.ToString());
                double Pt_V1_Mid_Y = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[83].Value.ToString());
                double Pt_V2_Mid_X = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[110].Value.ToString());
                double Pt_V2_Mid_Y = double.Parse(dGV_Mark.Rows[Mark_Index].Cells[111].Value.ToString());
                P_Mid_H1 = new PointContour(Pt_H1_Mid_X, Pt_H1_Mid_Y);
                P_Mid_H2 = new PointContour(Pt_H2_Mid_X, Pt_H2_Mid_Y);
                P_Mid_V1 = new PointContour(Pt_V1_Mid_X, Pt_V1_Mid_Y);
                P_Mid_V2 = new PointContour(Pt_V2_Mid_X, Pt_V2_Mid_Y);
                if (cB_AlignIndex.SelectedIndex == 9 || cB_AlignIndex.SelectedIndex == 10)
                {
                    if (VariableSys.LanguageFlag == 1)
                    {
                        MessageBox.Show("Pls Update parameter!", "Info");
                    }
                    else
                    {
                        MessageBox.Show("多点计算交点请更新参数", "提示");
                    }
                }
                else
                {
                    Center = Algorithms.FindIntersectionPoint(new LineContour(P_Mid_H1, P_Mid_H2), new LineContour(P_Mid_V1, P_Mid_V2));
                    dGV_Mark.Rows[Mark_Index].Cells[138].Value = Center.X.ToString();
                    dGV_Mark.Rows[Mark_Index].Cells[139].Value = Center.Y.ToString();
                    if (rB_ShowLine.Checked)
                    {
                        imageSet.Image.Overlays.Default.AddLine(new LineContour(Center, P_Mid_H1), Rgb32Value.RedColor);
                        imageSet.Image.Overlays.Default.AddLine(new LineContour(Center, P_Mid_V2), Rgb32Value.RedColor);
                    }
                    else
                    {
                        imageSet.Image.Overlays.Default.AddPoint(P_Mid_H1, Rgb32Value.RedColor);
                        imageSet.Image.Overlays.Default.AddPoint(P_Mid_H2, Rgb32Value.GreenColor);
                        imageSet.Image.Overlays.Default.AddPoint(P_Mid_V1, Rgb32Value.GreenColor);
                        imageSet.Image.Overlays.Default.AddPoint(P_Mid_V2, Rgb32Value.GreenColor);
                        imageSet.Image.Overlays.Default.AddPoint(Center, Rgb32Value.YellowColor);
                    }
                }

            }
        }

        private void cB_Cali_CheckedChanged(object sender, EventArgs e)
        {
            this.tabCalib.Visible = cB_Cali.Checked;
            //gB_LabelCamOffset.Visible = VariableSys.bUpLabelCam && cB_Cali.Checked;
        }

        private void rB_ROI_H1_CheckedChanged(object sender, EventArgs e)
        {
            if (rB_ROI_H1.Checked)
            {
                rB_Dire_L2R.Enabled = false;
                rB_Dire_R2L.Enabled = false;
                rB_Dire_T2B.Enabled = true;
                rB_Dire_B2T.Enabled = true;
            }
        }

        private void rB_ROI_H2_CheckedChanged(object sender, EventArgs e)
        {
            if (rB_ROI_H2.Checked)
            {
                rB_Dire_L2R.Enabled = false;
                rB_Dire_R2L.Enabled = false;
                rB_Dire_T2B.Enabled = true;
                rB_Dire_B2T.Enabled = true;
            }
        }

        private void rB_ROI_V1_CheckedChanged(object sender, EventArgs e)
        {
            if (rB_ROI_V1.Checked)
            {
                rB_Dire_L2R.Enabled = true;
                rB_Dire_R2L.Enabled = true;
                rB_Dire_T2B.Enabled = false;
                rB_Dire_B2T.Enabled = false;
            }
        }

        private void rB_ROI_V2_CheckedChanged(object sender, EventArgs e)
        {
            if (rB_ROI_V2.Checked)
            {
                rB_Dire_L2R.Enabled = true;
                rB_Dire_R2L.Enabled = true;
                rB_Dire_T2B.Enabled = false;
                rB_Dire_B2T.Enabled = false;
            }
        }
        #endregion

        //todo IO表界面
        #region IO表
        private void cB_CardIO_Index_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (VariableSys.LanguageFlag == 1)
            {
                if (cB_CardIO_Index.SelectedIndex == 0)
                {
                    LIO_In[0].Text = "Grating";
                    LIO_In[1].Text = "AirPress";
                    LIO_In[2].Text = "R3";
                    LIO_In[3].Text = "L2";
                    LIO_In[4].Text = "L3";
                    LIO_In[5].Text = "";
                    LIO_In[6].Text = "L4";
                    LIO_In[7].Text = "R2";
                    LIO_In[8].Text = "LStripD";
                    LIO_In[9].Text = "Z1VaReach";
                    LIO_In[10].Text = "L1";
                    LIO_In[11].Text = "LFeeder";
                    LIO_In[12].Text = "RStripD";
                    LIO_In[13].Text = "Z2VaReach";
                    LIO_In[14].Text = "R1";
                    LIO_In[15].Text = "RFeeder";


                    LIO_Out[0].Text = "Heat2";
                    LIO_Out[1].Text = "DTri";
                    LIO_Out[2].Text = "LED";
                    LIO_Out[3].Text = "Heat1";
                    LIO_Out[4].Text = "Green";
                    LIO_Out[5].Text = "Alarm";
                    LIO_Out[6].Text = "Red";
                    LIO_Out[7].Text = "Yellow";
                    LIO_Out[8].Text = "Z1Va";
                    LIO_Out[9].Text = "Z1BreakVa";
                    LIO_Out[10].Text = "Heat3";
                    LIO_Out[11].Text = "Heat4";
                    LIO_Out[12].Text = "Z2Va";
                    LIO_Out[13].Text = "Z2BreakVa";
                    LIO_Out[14].Text = "Heat5";
                    LIO_Out[15].Text = "";
                }
                if (cB_CardIO_Index.SelectedIndex == 1)
                {
                    LIO_In[0].Text = "Fdoor";
                    LIO_In[1].Text = "HeatAlarm";
                    LIO_In[2].Text = "AfterRequest";
                    LIO_In[3].Text = "R4";
                    LIO_In[4].Text = "ConOUT";
                    LIO_In[5].Text = "BeforeReady";
                    LIO_In[6].Text = "Udoor";
                    LIO_In[7].Text = "Mdoor";
                    LIO_In[8].Text = "WaitOUT";
                    LIO_In[9].Text = "WaitIN";
                    LIO_In[10].Text = "SLOW";
                    LIO_In[11].Text = "Reach";
                    LIO_In[12].Text = "StopO";
                    LIO_In[13].Text = "StopM";
                    LIO_In[14].Text = "CarryO";
                    LIO_In[15].Text = "CarryM";


                    LIO_Out[0].Text = "UBlue";
                    LIO_Out[1].Text = "ProVA";
                    LIO_Out[2].Text = "URed";
                    LIO_Out[3].Text = "UGreen";
                    LIO_Out[4].Text = "DBlue";
                    LIO_Out[5].Text = "InformBackOut";
                    LIO_Out[6].Text = "DRed";
                    LIO_Out[7].Text = "DGreen";
                    LIO_Out[8].Text = "InformBeforeIn";
                    LIO_Out[9].Text = "";
                    LIO_Out[10].Text = "Heat6";
                    LIO_Out[11].Text = "";
                    LIO_Out[12].Text = "Stop";
                    LIO_Out[13].Text = "Carry";
                    LIO_Out[14].Text = "RStrip";
                    LIO_Out[15].Text = "RoutEN";
                }
            }
            else
            {
                if (cB_CardIO_Index.SelectedIndex == 0)
                {
                    LIO_In[0].Text = "Z2真空\r\nA0-IN1";
                    LIO_In[1].Text = "Z1真空\r\nA0-IN2";
                    LIO_In[2].Text = "Z3真空\r\nA0-IN4";
                    LIO_In[3].Text = "Z4真空\r\nA0-IN5";

                    LIO_In[4].Text = "左光纤0\r\nA1-IN1";
                    LIO_In[5].Text = "左FD存在\r\nA1-IN2";
                    LIO_In[6].Text = "进板到位\r\nA1-IN4";
                    LIO_In[7].Text = "安全门\r\nA1-IN5";

                    LIO_In[8].Text = "右光纤0\r\nA2-IN1";
                    LIO_In[9].Text = "右FD存在\r\nA2-IN2";
                    LIO_In[10].Text = "安全光栅\r\nA2-IN4";
                    LIO_In[11].Text = "备用\r\nA2-IN5";

                    LIO_In[12].Text = "启动按钮\r\nA3-IN1";
                    LIO_In[13].Text = "气压检测\r\nA3-IN2";
                    LIO_In[14].Text = "停止按钮\r\nA3-IN4";
                    LIO_In[15].Text = "复位按钮\r\nA3-IN5";

                    LIO_Out[0].Text = "下视觉-蓝\r\nA0-OUT4";
                    LIO_Out[1].Text = "外触发\r\nA0-OUT5";
                    LIO_Out[2].Text = "下视觉-绿\r\nA0-OUT6";
                    LIO_Out[3].Text = "下视觉-红\r\nA0-OUT7";

                    LIO_Out[4].Text = "红灯/蜂鸣\r\nA1-OUT4";
                    LIO_Out[5].Text = "轨道吹气\r\nA1-OUT5";
                    LIO_Out[6].Text = "黄灯\r\nA1-OUT6";
                    LIO_Out[7].Text = "绿灯\r\nA1-OUT7";

                    LIO_Out[8].Text = "Z2气缸原\r\n无用";
                    LIO_Out[9].Text = "Z2气缸动\r\n无用";
                    LIO_Out[10].Text = "Z1气缸动\r\n无用";
                    LIO_Out[11].Text = "上视觉-红\r\nA2-OUT7";

                    LIO_Out[12].Text = "停止灯\r\nA3-OUT4";
                    LIO_Out[13].Text = "复位灯\r\nA3-OUT5";
                    LIO_Out[14].Text = "LED灯\r\nA3-OUT6";
                    LIO_Out[15].Text = "启动灯\r\nA3-OUT7";
                }
                else if (cB_CardIO_Index.SelectedIndex == 1)
                {
                    LIO_In[0].Text = "夹板动点\r\nB0-IN1";
                    LIO_In[1].Text = "夹板原点\r\nB0-IN2";
                    LIO_In[2].Text = "备用\r\nB0-IN5";
                    LIO_In[3].Text = "阻板动点\r\nB0-IN4";

                    LIO_In[4].Text = "后要板\r\nB1-IN1";
                    LIO_In[5].Text = "前Ready\r\nB1-IN2";
                    LIO_In[6].Text = "轨道入口\r\nB1-IN4";
                    LIO_In[7].Text = "轨道出口\r\nB1-IN5";

                    LIO_In[8].Text = "左光纤1\r\nB2-IN1";
                    LIO_In[9].Text = "备用\r\nB2-IN2";
                    LIO_In[10].Text = "左光纤2\r\nB2-IN4";
                    LIO_In[11].Text = "左光纤3\r\nB2-IN5";

                    LIO_In[12].Text = "右光纤1\r\nB3-IN1";
                    LIO_In[13].Text = "备用\r\nB3-IN2";
                    LIO_In[14].Text = "右光纤2\r\nB3-IN4";
                    LIO_In[15].Text = "右光纤3\r\nB3-IN5";

                    LIO_Out[0].Text = "阻板原点\r\nB0-OUT4";
                    LIO_Out[1].Text = "阻板动点\r\nB0-OUT5";
                    LIO_Out[2].Text = "轨道动点\r\nB0-OUT6";
                    LIO_Out[3].Text = "轨道原点\r\nB0-OUT7";

                    LIO_Out[4].Text = "轨道正转\r\nB1-OUT4";
                    LIO_Out[5].Text = "轨道反转\r\nB1-OUT5";
                    LIO_Out[6].Text = "告后有板\r\nB1-OUT6";
                    LIO_Out[7].Text = "向前要板\r\nB1-OUT7";

                    LIO_Out[8].Text = "Z3真空\r\nB2-OUT4";
                    LIO_Out[9].Text = "Z4真空\r\nB2-OUT5";
                    LIO_Out[10].Text = "Z2真空\r\nB2-OUT6";
                    LIO_Out[11].Text = "Z1真空\r\nB2-OUT7";

                    LIO_Out[12].Text = "Z3破真空\r\nB3-OUT4";
                    LIO_Out[13].Text = "Z4破真空\r\nB3-OUT5";
                    LIO_Out[14].Text = "Z2破真空\r\nB3-OUT6";
                    LIO_Out[15].Text = "Z1破真空\r\nB3-OUT7";
                }
            }
        }
        #endregion

        #region 打光方案
        public void UpdateLightPlan()
        {
            VariableSys.bRedU = cB_Red_U.Checked;
            VariableSys.bGreenU = cB_Green_U.Checked;
            VariableSys.bBlueU = cB_Blue_U.Checked;
            VariableSys.bRedD = cB_Red_D.Checked;
            VariableSys.bGreenD = cB_Green_D.Checked;
            VariableSys.bBlueD = cB_Blue_D.Checked;
            VariableSys.dRedValue_U = (double)(nUpDown_RedU.Value);
            VariableSys.dGreenValue_U = (double)(nUpDown_GreenU.Value);
            VariableSys.dBlueValue_U = (double)(nUpDown_BlueU.Value);
            VariableSys.dRedValue_D = (double)(nUpDown_RedD.Value);
            VariableSys.dGreenValue_D = (double)(nUpDown_GreenD.Value);
            VariableSys.dBlueValue_D = (double)(nUpDown_BlueD.Value);
            LightON_Up(VariableSys.bRedU, VariableSys.bGreenU, VariableSys.bBlueU, VariableSys.dRedValue_U, VariableSys.dGreenValue_U, VariableSys.dBlueValue_U);
            LightON_Down(VariableSys.bRedD, VariableSys.bGreenD, VariableSys.bBlueD, VariableSys.dRedValue_D, VariableSys.dGreenValue_D, VariableSys.dBlueValue_D);
        }

        private void bConnectU_Click(object sender, EventArgs e)
        {
            try
            {
                Close_LightUp(VariableSys.LightUpVendor);
                Init_LightUp(VariableSys.LightUpVendor);
                bConnectU.BackColor = Color.GreenYellow;
            }
            catch
            {
                bConnectU.BackColor = Color.White;
            }
        }

        private void bConnectD_Click(object sender, EventArgs e)
        {
            try
            {
                Close_LightDown(VariableSys.LightDownVendor);
                Init_LightDown(VariableSys.LightDownVendor);
                bConnectD.BackColor = Color.GreenYellow;
            }
            catch
            {
                bConnectD.BackColor = Color.White;
            }
        }

        private void trackBar_RedU_Scroll(object sender, EventArgs e)
        {
            nUpDown_RedU.Value = trackBar_RedU.Value;
            //UpdateLightPlan();
        }

        private void trackBar_GreenU_Scroll(object sender, EventArgs e)
        {
            nUpDown_GreenU.Value = trackBar_GreenU.Value;
            //UpdateLightPlan();
        }

        private void trackBar_BlueU_Scroll(object sender, EventArgs e)
        {
            nUpDown_BlueU.Value = trackBar_BlueU.Value;
            //UpdateLightPlan();
        }

        private void trackBar_RedD_Scroll(object sender, EventArgs e)
        {
            nUpDown_RedD.Value = trackBar_RedD.Value;
            //UpdateLightPlan();
        }

        private void trackBar_GreenD_Scroll(object sender, EventArgs e)
        {
            nUpDown_GreenD.Value = trackBar_GreenD.Value;
            //UpdateLightPlan();
        }

        private void trackBar_BlueD_Scroll(object sender, EventArgs e)
        {
            nUpDown_BlueD.Value = trackBar_BlueD.Value;
            //UpdateLightPlan();
        }

        private void cB_Red_U_CheckedChanged(object sender, EventArgs e)
        {
            UpdateLightPlan();
        }

        private void cB_Green_U_CheckedChanged(object sender, EventArgs e)
        {
            UpdateLightPlan();
        }

        private void cB_Blue_U_CheckedChanged(object sender, EventArgs e)
        {
            UpdateLightPlan();
        }

        private void cB_Red_D_CheckedChanged(object sender, EventArgs e)
        {
            UpdateLightPlan();
        }

        private void cB_Green_D_CheckedChanged(object sender, EventArgs e)
        {
            UpdateLightPlan();
        }

        private void cB_Blue_D_CheckedChanged(object sender, EventArgs e)
        {
            UpdateLightPlan();
        }

        private void nUpDown_RedU_ValueChanged(object sender, EventArgs e)
        {
            trackBar_RedU.Value = (int)(nUpDown_RedU.Value);
            UpdateLightPlan();
        }

        private void nUpDown_GreenU_ValueChanged(object sender, EventArgs e)
        {
            trackBar_GreenU.Value = (int)(nUpDown_GreenU.Value);
            UpdateLightPlan();
        }

        private void nUpDown_BlueU_ValueChanged(object sender, EventArgs e)
        {
            trackBar_BlueU.Value = (int)(nUpDown_BlueU.Value);
            UpdateLightPlan();
        }

        private void UpDown_RedD_ValueChanged(object sender, EventArgs e)
        {
            trackBar_RedD.Value = (int)(nUpDown_RedD.Value);
            UpdateLightPlan();
        }

        private void nUpDown_GreenD_ValueChanged(object sender, EventArgs e)
        {
            trackBar_GreenD.Value = (int)(nUpDown_GreenD.Value);
            UpdateLightPlan();
        }

        private void nUpDown_BlueD_ValueChanged(object sender, EventArgs e)
        {
            trackBar_BlueD.Value = (int)(nUpDown_BlueD.Value);
            UpdateLightPlan();
        }

        private void trackBar_RedU_MouseUp(object sender, MouseEventArgs e)
        {
            UpdateLightPlan();
        }

        private void trackBar_GreenU_MouseUp(object sender, MouseEventArgs e)
        {
            UpdateLightPlan();
        }

        private void trackBar_BlueU_MouseUp(object sender, MouseEventArgs e)
        {
            UpdateLightPlan();
        }

        private void trackBar_RedD_MouseUp(object sender, MouseEventArgs e)
        {
            UpdateLightPlan();
        }

        private void trackBar_GreenD_MouseUp(object sender, MouseEventArgs e)
        {
            UpdateLightPlan();
        }

        private void trackBar_BlueD_MouseUp(object sender, MouseEventArgs e)
        {
            UpdateLightPlan();
        }

        #endregion

        #region 轴控手动控制
        private void Z1ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ZAxisIndex = 1;
            lZ.Text = "轴Z1";
        }

        private void Z2ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ZAxisIndex = 2;
            lZ.Text = "轴Z2";
        }

        private void Z3ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ZAxisIndex = 3;
            lZ.Text = "轴Z3";
        }

        private void Z4ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ZAxisIndex = 4;
            lZ.Text = "轴Z4";
        }

        private void R1ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            RAxisIndex = 1;
            tSelectR.Text = "R1轴";
        }

        private void R2ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            RAxisIndex = 2;
            tSelectR.Text = "R2轴";
        }


        private void R3ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            RAxisIndex = 3;
            tSelectR.Text = "R3轴";
        }


        private void R4ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            RAxisIndex = 4;
            tSelectR.Text = "R4轴";
        }


        private void bXPosGo_Click(object sender, EventArgs e)
        {
            if (!this.All_ZGoSafeTillStop(2000, VariableSys.VelMode_Debug_Manual))
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Z1 Z2 Go Safe height Fail!", "Info");
                }
                else
                {
                    MessageBox.Show("Z1或Z2轴回安全位置出错!", "提示");
                }

                return;
            }
            string str = tXPosKeyIn.Text;
            double p = 0;
            try
            {
                p = Convert.ToDouble(str);
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("输入数值有误！");
                }
                return;
            }
            this.X.axisDefine = 0;
            this.Y.axisDefine = 1;

            PointF cur = this.XYPos;
            cur.X = (float)p;
            this.XYGoPos(cur, VariableSys.VelMode_Current_Manual);
            //X.GoPos(p, VariableSys.VelMode_Current_Manual);
        }

        private void bYPosGo_Click(object sender, EventArgs e)
        {
            if (!this.All_ZGoSafeTillStop(2000, VariableSys.VelMode_Debug_Manual))
            {
                MessageBox.Show("Z1或Z2轴回安全位置出错!", "提示");
                return;
            }
            string str = tYPosKeyIn.Text;
            double p = 0;
            try
            {
                p = Convert.ToDouble(str);
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("输入数值有误！");
                }
                return;
            }
            PointF cur = this.XYPos;
            cur.Y = (float)p;
            this.XYGoPos(cur, VariableSys.VelMode_Current_Manual);
        }


        private void bGoZPos_Click(object sender, EventArgs e)
        {
            string str = tZPosKeyIn.Text;

            double p = 0;
            try
            {
                p = Convert.ToDouble(str);
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("输入数值有误！");
                }
                return;
            }
            this.Z_RunParamMap[(uint)ZAxisIndex - 1].GoPos(p, VariableSys.VelMode_Current_Manual);
        }

        private void pJog_XNSlow_MouseDown(object sender, MouseEventArgs e)
        {
            if (this.All_ZReachOrg())
            {
                pJog_XNSlow.Image = GeneralLabelerStation.Properties.Resources.左2;
                X.Jog(VariableSys.VelMode_Slow_Manual, false);
            }
            else
            {
                this.All_ZGoSafeTillStop(3000, VariableSys.VelMode_Current_Manual);
            }
        }

        private void pJog_XNFast_MouseDown(object sender, MouseEventArgs e)
        {
            if (this.All_ZReachOrg())
            {
                pJog_XNFast.Image = GeneralLabelerStation.Properties.Resources.左快2;
                X.Jog(VariableSys.VelMode_Run_Manual, false);
            }
            else
            {
                this.All_ZGoSafeTillStop(3000, VariableSys.VelMode_Current_Manual);
            }
        }

        private void pJog_XPFast_MouseDown(object sender, MouseEventArgs e)
        {
            if (this.All_ZReachOrg())
            {
                pJog_XPFast.Image = GeneralLabelerStation.Properties.Resources.右快2;
                X.Jog(VariableSys.VelMode_Run_Manual, true);
            }
            else
            {
                this.All_ZGoSafeTillStop(3000, VariableSys.VelMode_Current_Manual);
            }
        }

        private void pJog_XPSlow_MouseDown(object sender, MouseEventArgs e)
        {
            if (this.All_ZReachOrg())
            {
                pJog_XPSlow.Image = GeneralLabelerStation.Properties.Resources.右2;
                X.Jog(VariableSys.VelMode_Slow_Manual, true);
            }
            else
            {
                this.All_ZGoSafeTillStop(3000, VariableSys.VelMode_Current_Manual);
            }
        }

        private void pJog_XNSlow_MouseUp(object sender, MouseEventArgs e)
        {
            X.StopAxis(false);
            pJog_XNSlow.Image = GeneralLabelerStation.Properties.Resources.左1;
        }

        private void pJog_XNFast_MouseUp(object sender, MouseEventArgs e)
        {
            X.StopAxis(false);
            pJog_XNFast.Image = GeneralLabelerStation.Properties.Resources.左快1;
        }

        private void pJog_XPFast_MouseUp(object sender, MouseEventArgs e)
        {
            X.StopAxis(false);
            pJog_XPFast.Image = GeneralLabelerStation.Properties.Resources.右快1;
        }

        private void pJog_XPSlow_MouseUp(object sender, MouseEventArgs e)
        {
            X.StopAxis(false);
            pJog_XPSlow.Image = GeneralLabelerStation.Properties.Resources.右1;
        }
        //
        private void pJog_YPSlow_MouseDown(object sender, MouseEventArgs e)
        {
            if (this.All_ZReachOrg())
            {
                pJog_YPSlow.Image = GeneralLabelerStation.Properties.Resources.上2;
                Y.Jog(VariableSys.VelMode_Slow_Manual, true);
            }
            else
            {
                this.All_ZGoSafeTillStop(3000, VariableSys.VelMode_Current_Manual);
            }
        }

        private void pJog_YPFast_MouseDown(object sender, MouseEventArgs e)
        {
            if (this.All_ZReachOrg())
            {
                pJog_YPFast.Image = GeneralLabelerStation.Properties.Resources.上快2;
                Y.Jog(VariableSys.VelMode_Run_Manual, true);
            }
            else
            {
                this.All_ZGoSafeTillStop(3000, VariableSys.VelMode_Current_Manual);
            }
        }

        private void pJog_YNFast_MouseDown(object sender, MouseEventArgs e)
        {
            if (this.All_ZReachOrg())
            {
                pJog_YNFast.Image = GeneralLabelerStation.Properties.Resources.下快2;
                Y.Jog(VariableSys.VelMode_Run_Manual, false);
            }
            else
            {
                this.All_ZGoSafeTillStop(3000, VariableSys.VelMode_Current_Manual);
            }
        }

        private void pJog_YNSlow_MouseDown(object sender, MouseEventArgs e)
        {
            if (this.All_ZReachOrg())
            {
                pJog_YNSlow.Image = GeneralLabelerStation.Properties.Resources.下2;
                Y.Jog(VariableSys.VelMode_Slow_Manual, false);
            }
            else
            {
                this.All_ZGoSafeTillStop(3000, VariableSys.VelMode_Current_Manual);
            }
        }
        //
        private void pJog_YPSlow_MouseUp(object sender, MouseEventArgs e)
        {
            Y.StopAxis(false);
            pJog_YPSlow.Image = GeneralLabelerStation.Properties.Resources.上1;
        }

        private void pJog_YPFast_MouseUp(object sender, MouseEventArgs e)
        {
            Y.StopAxis(false);
            pJog_YPFast.Image = GeneralLabelerStation.Properties.Resources.上快1;
        }

        private void pJog_YNFast_MouseUp(object sender, MouseEventArgs e)
        {
            Y.StopAxis(false);
            pJog_YNFast.Image = GeneralLabelerStation.Properties.Resources.下快1;

        }

        private void pJog_YNSlow_MouseUp(object sender, MouseEventArgs e)
        {
            Y.StopAxis(false);
            pJog_YNSlow.Image = GeneralLabelerStation.Properties.Resources.下1;

        }
        //
        private void pJog_ZPSlow_MouseDown(object sender, MouseEventArgs e)
        {
            pJog_ZPSlow.Image = GeneralLabelerStation.Properties.Resources.上2;

            this.Z_RunParamMap[(uint)ZAxisIndex - 1].Jog(VariableSys.VelMode_Debug_Manual, this.Z_RunParamMap[(uint)ZAxisIndex - 1].MoveDir == -1);
        }

        private void pJog_ZNSlow_MouseDown(object sender, MouseEventArgs e)
        {
            pJog_ZNSlow.Image = GeneralLabelerStation.Properties.Resources.下2;
            this.Z_RunParamMap[(uint)ZAxisIndex - 1].Jog(VariableSys.VelMode_Debug_Manual, this.Z_RunParamMap[(uint)ZAxisIndex - 1].MoveDir == 1);
        }

        private void pJog_ZPSlow_MouseUp(object sender, MouseEventArgs e)
        {
            pJog_ZPSlow.Image = GeneralLabelerStation.Properties.Resources.上1;
            this.Z_RunParamMap[(uint)ZAxisIndex - 1].StopAxis();
        }

        private void pJog_ZNSlow_MouseUp(object sender, MouseEventArgs e)
        {
            pJog_ZNSlow.Image = GeneralLabelerStation.Properties.Resources.下1;
            this.Z_RunParamMap[(uint)ZAxisIndex - 1].StopAxis();
        }

        private void cB_KeyBoard_CheckedChanged(object sender, EventArgs e)
        {
            VariableSys.bKeyBoardMoveEnable = cB_KeyBoard.Checked;
            if (!cB_KeyBoard.Checked)
            {
                this.KeyMove_Jog_or_Trim = false;
            }
        }

        private void pR1N_MouseDown(object sender, MouseEventArgs e)
        {
            pR1N.Image = GeneralLabelerStation.Properties.Resources.RN2;
            R_RunParam rParam = this.R_RunParamMap[(uint)RAxisIndex - 1];
            rParam.Jog(VariableSys.VelMode_Run_Manual, false);
        }

        private void pR1N_MouseUp(object sender, MouseEventArgs e)
        {
            pR1N.Image = GeneralLabelerStation.Properties.Resources.RN;
            R_RunParam rParam = this.R_RunParamMap[(uint)RAxisIndex - 1];
            rParam.Stop();
        }

        private void pR1P_MouseDown(object sender, MouseEventArgs e)
        {
            pR1P.Image = GeneralLabelerStation.Properties.Resources.RS2;
            R_RunParam rParam = this.R_RunParamMap[(uint)RAxisIndex - 1];
            rParam.Jog(VariableSys.VelMode_Run_Manual, true);
        }

        private void pR1P_MouseUp(object sender, MouseEventArgs e)
        {
            pR1P.Image = GeneralLabelerStation.Properties.Resources.RS;
            R_RunParam rParam = this.R_RunParamMap[(uint)RAxisIndex - 1];
            rParam.Stop();
        }

        private void bR1_GO_Click(object sender, EventArgs e)
        {
            string str = tR1.Text;
            double p = 0;
            try
            {
                p = Convert.ToDouble(str);
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("输入数值有误！");
                }

                return;
            }

            R_RunParam rParam = this.R_RunParamMap[(uint)RAxisIndex - 1];
            rParam.GoPosManual(p, VariableSys.VelMode_Current_Manual);
        }

        private void bR1Init_Go_Click(object sender, EventArgs e)
        {
            R_RunParam rParam = this.Get_R_RunParam(this.tSelectR.Text);
            rParam.RGoInitPos(VariableSys.VelMode_Current_Manual);
        }

        private void pConveyorN_MouseDown(object sender, MouseEventArgs e)
        {
            pConveyorN.Image = GeneralLabelerStation.Properties.Resources.左2;
            if (cB_Conveyor.SelectedIndex == 0)//中轨道
            {
                if (rBVelNormal.Checked)
                {
                    ConveyorJog(false);
                }
                else
                {
                    ConveyorJog(false);
                }
            }
            if (cB_Conveyor.SelectedIndex == 1)//左轨道
            {
                if (rBVelNormal.Checked)
                {
                    ConveyorJog(false);
                }
                else
                {
                    ConveyorJog(false);
                }
            }
            if (cB_Conveyor.SelectedIndex == 2)//右轨道
            {
                if (rBVelNormal.Checked)
                {
                    ConveyorJog(false);
                }
                else
                {
                    ConveyorJog(false);
                }
            }
        }

        private void pConveyorN_MouseUp(object sender, MouseEventArgs e)
        {
            if (rB_Release.Checked)
            {
                if (cB_Conveyor.SelectedIndex == 0)//中轨道
                {
                    ConveyorStop();
                }
            }
            pConveyorN.Image = GeneralLabelerStation.Properties.Resources.左1;
        }

        private void pConveyorP_MouseDown(object sender, MouseEventArgs e)
        {
            pConveyorP.Image = GeneralLabelerStation.Properties.Resources.右2;
            if (cB_Conveyor.SelectedIndex == 0)//中轨道
            {
                if (rBVelNormal.Checked)
                {
                    ConveyorJog(true);
                }
                else
                {
                    ConveyorJog(true);
                }
            }
            if (cB_Conveyor.SelectedIndex == 1)//左轨道
            {
                if (rBVelNormal.Checked)
                {
                    ConveyorJog(true);
                }
                else
                {
                    ConveyorJog(true);
                }
            }
            if (cB_Conveyor.SelectedIndex == 2)//右轨道
            {
                if (rBVelNormal.Checked)
                {
                    ConveyorJog(true);
                }
                else
                {
                    ConveyorJog(true);
                }
            }
        }

        private void pConveyorP_MouseUp(object sender, MouseEventArgs e)
        {
            if (rB_Release.Checked)
            {
                if (cB_Conveyor.SelectedIndex == 0)//中轨道
                {
                    ConveyorStop();
                }
                if (cB_Conveyor.SelectedIndex == 1)//左轨道
                {
                    ConveyorStop();
                }
                if (cB_Conveyor.SelectedIndex == 2)//右轨道
                {
                    ConveyorStop();
                }
            }
            pConveyorP.Image = GeneralLabelerStation.Properties.Resources.右1;
        }

        private void bStopAxis_Click(object sender, EventArgs e)
        {
            StopAllAxis();
        }

        private void imageSet_ImageMouseDown(object sender, ImageMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                if (cB_MouseTrim.Checked && CameraDefine.Instance[(CAM)(CamIndexSelected - 1)].IsCailb)
                {
                    PointContour temp_Point = new PointContour();
                    temp_Point.X = e.Point.X;
                    temp_Point.Y = e.Point.Y;
                    PointF xy = this.XYPos;

                    xy = Point2CCDCenter(xy, temp_Point, (CAM)(CamIndexSelected - 1), 0);

                    if (this.All_ZGoSafeTillStop(2000, VariableSys.VelMode_Debug_Manual))
                    {
                        XYGoPos(xy, VariableSys.VelMode_Slow_Manual);
                    }
                }
            }
        }

        private void Form_Main_KeyDown(object sender, KeyEventArgs e)
        {
            if (VariableSys.bKeyBoardMoveEnable && (RunMode != 1))
            {
                switch (e.KeyCode)
                {
                    case Keys.W:
                        {
                            lKey_W.BackColor = Color.GreenYellow;
                            if (this.KeyMove_Jog_or_Trim)
                                Y.Jog(VariableSys.VelMode_Debug_Manual, true);
                            else
                                Y.MoveTrim(1 * double.Parse(cB_Trim.Text), VariableSys.VelMode_Debug_Manual);
                        }
                        break;
                    case Keys.S:
                        {
                            lKey_S.BackColor = Color.GreenYellow;
                            if (this.KeyMove_Jog_or_Trim)
                                Y.Jog(VariableSys.VelMode_Debug_Manual, false);
                            else
                                Y.MoveTrim(-1 * double.Parse(cB_Trim.Text), VariableSys.VelMode_Debug_Manual);
                        }
                        break;
                    case Keys.A:
                        {
                            lKey_A.BackColor = Color.GreenYellow;
                            if (this.KeyMove_Jog_or_Trim)
                                X.Jog(VariableSys.VelMode_Debug_Manual, false);
                            else
                                X.MoveTrim(-1 * double.Parse(cB_Trim.Text), VariableSys.VelMode_Debug_Manual);
                        }
                        break;
                    case Keys.D:
                        {
                            lKey_D.BackColor = Color.GreenYellow;
                            if (this.KeyMove_Jog_or_Trim)
                                X.Jog(VariableSys.VelMode_Debug_Manual, true);
                            else
                                X.MoveTrim(1 * double.Parse(cB_Trim.Text), VariableSys.VelMode_Debug_Manual);
                        }
                        break;
                    case Keys.R:
                        {
                            lKey_R.BackColor = Color.GreenYellow;
                            if (this.KeyMove_Jog_or_Trim)
                                this.Z_RunParamMap[(uint)(ZAxisIndex - 1)].Jog(VariableSys.VelMode_Debug_Manual, false);
                            else
                                this.Z_RunParamMap[(uint)(ZAxisIndex - 1)].MoveTrim(-1 * double.Parse(cB_Trim.Text), VariableSys.VelMode_Debug_Manual);
                        }
                        break;
                    case Keys.F:
                        {
                            lKey_F.BackColor = Color.GreenYellow;
                            if (this.KeyMove_Jog_or_Trim)
                                this.Z_RunParamMap[(uint)(ZAxisIndex - 1)].Jog(VariableSys.VelMode_Debug_Manual, true);
                            else
                                this.Z_RunParamMap[(uint)(ZAxisIndex - 1)].MoveTrim(1 * double.Parse(cB_Trim.Text), VariableSys.VelMode_Debug_Manual);
                        }
                        break;
                    default:
                        break;
                }
            }
        }

        private void Form_Main_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.Control)
            {
                if (e.KeyCode == Keys.D)
                {
                    StatisticsHelper.Instance.Reoprt.Total.TotalDrop = 0;
                }
                else
                {
                    VariableSys.bSafeDoorEN = false;
                }
            }

            if (VariableSys.bKeyBoardMoveEnable && (RunMode != 1))
            {
                if (e.KeyCode == Keys.A)//A X-
                {
                    lKey_A.BackColor = Color.White;
                }
                else if (e.KeyCode == Keys.S)//S Y-
                {
                    lKey_S.BackColor = Color.White;
                }
                else if (e.KeyCode == Keys.D)//D X+
                {
                    lKey_D.BackColor = Color.White;
                }
                else if (e.KeyCode == Keys.W)//W Y+
                {
                    lKey_W.BackColor = Color.White;
                }
                else if (e.KeyCode == Keys.R)//R Z-
                {
                    lKey_R.BackColor = Color.White;
                }
                else if (e.KeyCode == Keys.F)//F Z+
                {
                    lKey_F.BackColor = Color.White;
                }

                if (this.KeyMove_Jog_or_Trim)
                    StopAllAxis();
            }
        }

        private void rB_Jog_CheckedChanged(object sender, EventArgs e)
        {
            if (rB_Jog.Checked)
            {
                KeyMove_Jog_or_Trim = true;
            }
        }

        private void rB_Trim_CheckedChanged(object sender, EventArgs e)
        {
            if (rB_Trim.Checked)
            {
                KeyMove_Jog_or_Trim = false;
            }
        }

        private void bNozzletoCam_Click(object sender, EventArgs e)
        {
            try
            {
                PointF pt = this.XYPos;
                pt = NozzleToCamPoint(pt, ZAxisIndex - 1);
                this.XYGoPos(pt, VariableSys.VelMode_Debug);
            }
            catch { }
        }

        private void bCamtoNozzle_Click(object sender, EventArgs e)
        {
            try
            {
                PointF pt = this.XYPos;
                pt = CamToNozzlePoint(pt, ZAxisIndex - 1);
                this.XYGoPos(pt, VariableSys.VelMode_Debug);
            }
            catch { }
        }

        private void bConveyorLow_Click(object sender, EventArgs e)
        {
            ConveyorStop();
            if (cB_Conveyor.SelectedIndex == 0)//中轨道
            {
                ConveyorJog(true);
            }
            if (cB_Conveyor.SelectedIndex == 1)//左轨道
            {
                ConveyorJog(true);
            }
            if (cB_Conveyor.SelectedIndex == 2)//右轨道
            {
                ConveyorJog(true);
            }
        }

        private void bConveyorHigh_Click(object sender, EventArgs e)
        {
            ConveyorStop();
            if (cB_Conveyor.SelectedIndex == 0)//中轨道
            {
                ConveyorJog(true);
            }
            if (cB_Conveyor.SelectedIndex == 1)//左轨道
            {
                ConveyorJog(true);
            }
            if (cB_Conveyor.SelectedIndex == 2)//右轨道
            {
                ConveyorJog(true);
            }
        }
        #endregion

        #region FEEDER
        private void bLabelPath1_Click_1(object sender, EventArgs e)
        {
            folderBrowserDialog.SelectedPath = Variable.sPath_SYS_LABEL;
            if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
            {
                string A = folderBrowserDialog.SelectedPath.Substring(folderBrowserDialog.SelectedPath.LastIndexOf("\\") + 1);
                lLabel_Left.Text = A;

                string feeder = this.cbSelectFeeder.SelectedIndex == 0 ? "Feeder_Left" : "Feeder_Right";
                string direct = $"{ Variable.sPath_SYS_Program}\\{lProgramName.Text}\\{feeder}\\Label";
                if (Directory.Exists(direct))
                {
                    DirectoryInfo a = new DirectoryInfo(direct);
                    a.Delete(true);
                }
                CopyDirectory(folderBrowserDialog.SelectedPath, direct);

                #region Dispose Image
                try
                {
                    Feeder[this.cbSelectFeeder.SelectedIndex].Label.Align1?.Dispose();
                    Feeder[this.cbSelectFeeder.SelectedIndex].Label.Align2?.Dispose();
                }
                catch
                {
                }
                #endregion

                bool OKNG = false;
                Feeder[this.cbSelectFeeder.SelectedIndex].PN = A;
                Feeder[this.cbSelectFeeder.SelectedIndex].Label = ReadXls2Label($"{direct}", ref OKNG);

                if (!OKNG)
                {
                    MessageBox.Show("Label信息导入失败", "提示");
                    return;
                }
            }
        }

        private void bAdd1_Click(object sender, EventArgs e)
        {
            //获取当前选定的Index
            if (dGV_FeederLeft.SelectedRows.Count > 0 && (dGV_FeederLeft.SelectedRows[0].Index != dGV_FeederLeft.Rows.Count - 1))
            {
                dGV_FeederLeft.Rows.Insert(dGV_FeederLeft.SelectedRows[0].Index + 1, 1);
                AddRowHeader(dGV_FeederLeft);
                DataGridViewRow item = dGV_FeederLeft.Rows[dGV_FeederLeft.SelectedRows[0].Index + 1];
                item.Cells[0].Value = "0";
                item.Cells[1].Value = "0";

                for (int nz = 0; nz < Variable.NOZZLE_NUM; ++nz)
                {
                    item.Cells[2 + nz].Value = "0";
                }

                item.Cells[2 + Variable.NOZZLE_NUM].Value = "0";
                item.Cells[3 + Variable.NOZZLE_NUM].Value = "0";
            }
            else
            {
                dGV_FeederLeft.Rows.Insert(0, 1);
                AddRowHeader(dGV_FeederLeft);
                DataGridViewRow item = dGV_FeederLeft.Rows[0];
                item.Cells[0].Value = "0";
                item.Cells[1].Value = "0";

                for (int nz = 0; nz < Variable.NOZZLE_NUM; ++nz)
                {
                    item.Cells[2 + nz].Value = "0";
                }

                item.Cells[2 + Variable.NOZZLE_NUM].Value = "0";
                item.Cells[3 + Variable.NOZZLE_NUM].Value = "0";
            }
            bAdd1.BackColor = Color.Transparent;
        }

        private void bDel1_Click(object sender, EventArgs e)
        {
            if (dGV_FeederLeft.SelectedRows.Count > 0)
            {
                //获取当前选中的行（单行或者多行）
                DialogResult RSS;
                if (VariableSys.LanguageFlag == 1)
                {
                    RSS = MessageBox.Show(this, "Are you sure to delete the data？", "Info", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                }
                else
                {
                    RSS = MessageBox.Show(this, "确定要删除选中行数据？", "提示", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                }
                switch (RSS)
                {
                    case DialogResult.Yes:
                        //获取当前选定的Index
                        for (int i = this.dGV_FeederLeft.SelectedRows.Count; i > 0; i--)
                        {
                            if (dGV_FeederLeft.SelectedRows[i - 1].Index == (dGV_FeederLeft.RowCount - 1))
                            {
                                if (VariableSys.LanguageFlag == 1)
                                {
                                    MessageBox.Show("Delete the end line fail!", "Info");
                                }
                                else
                                {
                                    MessageBox.Show("末尾行无数据不可删除！", "提示");
                                }
                                break;
                            }
                            int Index = dGV_FeederLeft.SelectedRows[i - 1].Index;
                            dGV_FeederLeft.Rows.RemoveAt(Index);
                        }
                        AddRowHeader(dGV_FeederLeft);
                        break;
                    case DialogResult.No:
                        break;
                }
            }
        }

        private void bCam2Pos1_Click(object sender, EventArgs e)
        {
            if (dGV_FeederLeft.SelectedRows.Count > 0 && (dGV_FeederLeft.SelectedRows[0].Index != dGV_FeederLeft.RowCount - 1))
            {
                try
                {
                    XYGoPos(new PointF(float.Parse(dGV_FeederLeft.SelectedRows[0].Cells[0].Value.ToString()), float.Parse(dGV_FeederLeft.SelectedRows[0].Cells[1].Value.ToString())), VariableSys.VelMode_Current_Manual);
                }
                catch { }
            }
        }

        private void b1Nozzle2Pos1_Click(object sender, EventArgs e)
        {
            if (dGV_FeederLeft.SelectedRows.Count > 0 && (dGV_FeederLeft.SelectedRows[0].Index != dGV_FeederLeft.RowCount - 1))
            {
                try
                {
                    PointF pt = new PointF();
                    pt.X = float.Parse(dGV_FeederLeft.SelectedRows[0].Cells[0].Value.ToString());
                    pt.Y = float.Parse(dGV_FeederLeft.SelectedRows[0].Cells[1].Value.ToString());

                    pt = this.GetNewXIPos((uint)ZAxisIndex - 1, dGV_FeederLeft.SelectedRows[0].Index, ref Feeder[this.cbSelectFeeder.SelectedIndex], VariableSys.bEnableAsyncXI);

                    XYGoPos(pt, VariableSys.VelMode_Current_Manual);
                }
                catch { }
            }
        }

        private void bCamGoUp1_Click(object sender, EventArgs e)
        {
            if (dGV_JOB_U.SelectedRows.Count > 0)
            {
                try
                {
                    XYGoPos(new PointF(float.Parse(dGV_JOB_U.SelectedRows[0].Cells[1].Value.ToString()), float.Parse(dGV_JOB_U.SelectedRows[0].Cells[2].Value.ToString())), VariableSys.VelMode_Current_Manual);
                }
                catch
                {
                }
            }
        }

        private void bCamGoUp2_Click(object sender, EventArgs e)
        {
            if (dGV_JOB_U.SelectedRows.Count > 0)
            {
                try
                {
                    XYGoPos(new PointF(float.Parse(dGV_JOB_U.SelectedRows[0].Cells[3].Value.ToString()), float.Parse(dGV_JOB_U.SelectedRows[0].Cells[4].Value.ToString())), VariableSys.VelMode_Current_Manual);
                }
                catch
                {
                }
            }
        }

        private void bXY1_N1_Click(object sender, EventArgs e)
        {
            if (dGV_FeederLeft.SelectedRows.Count > 0 && (dGV_FeederLeft.SelectedRows[0].Index != dGV_FeederLeft.RowCount - 1))
            {
                for (int i_Temp = 0; i_Temp < dGV_FeederLeft.SelectedRows.Count; i_Temp++)
                {
                    if (dGV_FeederLeft.SelectedRows[i_Temp].Index != dGV_FeederLeft.Rows.Count - 1)
                    {
                        var nz = this.OtherToNz1(this.XYPos, this.ZAxisIndex - 1);
                        dGV_FeederLeft.Rows[dGV_FeederLeft.SelectedRows[i_Temp].Index].Cells[0].Value = nz.X.ToString("f2");
                        dGV_FeederLeft.Rows[dGV_FeederLeft.SelectedRows[i_Temp].Index].Cells[1].Value = nz.Y.ToString("f2");
                    }
                }
            }
            bXY1_N1.BackColor = Color.MediumSpringGreen;
        }

        private void tLeftZPos_Click(object sender, EventArgs e)
        {
            if (dGV_FeederLeft.SelectedRows.Count > 0 && (dGV_FeederLeft.SelectedRows[0].Index != dGV_FeederLeft.RowCount - 1))
            {
                for (int i_Temp = 0; i_Temp < dGV_FeederLeft.SelectedRows.Count; i_Temp++)
                {
                    if (dGV_FeederLeft.SelectedRows[i_Temp].Index != dGV_FeederLeft.Rows.Count - 1)
                    {
                        dGV_FeederLeft.Rows[dGV_FeederLeft.SelectedRows[i_Temp].Index].Cells[1 + ZAxisIndex].Value = Z_RunParamMap[(uint)ZAxisIndex - 1].Pos.ToString("f3");
                    }
                }
            }

            this.tLeftZPos.BackColor = Color.MediumSpringGreen;
        }

        private void dGV_FeederLeft_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (dGV_FeederLeft.SelectedRows[0].Index == dGV_FeederLeft.Rows.Count - 1)
                {
                    return;
                }
                AddRowHeader(dGV_FeederLeft);
            }
            catch (System.Exception ex)
            {

            }
        }
        #endregion

        #region JOB
        private void bAddPaste_Click(object sender, EventArgs e)
        {
            //获取当前选定的Index
            if (dGV_JOB_U.SelectedRows.Count > 0)
            {
                dGV_JOB_U.Rows.Insert(dGV_JOB_U.SelectedRows[0].Index + 1, 1);
                AddRowHeader(dGV_JOB_U, false);
                DataGridViewRow item = dGV_JOB_U.Rows[dGV_JOB_U.SelectedRows[0].Index + 1];
                item.Cells[0].Value = "0";
                item.Cells[1].Value = "0";
                item.Cells[2].Value = "0";
                item.Cells[3].Value = "0";
                item.Cells[4].Value = "0";
                item.Cells[5].Value = "0";
                item.Cells[6].Value = "0";
                item.Cells[7].Value = "0";
                item.Cells[8].Value = "0";
                item.Cells[9].Value = "0";
                item.Cells[10].Value = "0";
            }
            else
            {
                dGV_JOB_U.Rows.Insert(0, 1);
                AddRowHeader(dGV_JOB_U, false);
                DataGridViewRow item = dGV_JOB_U.Rows[0];
                item.Cells[0].Value = "0";
                item.Cells[1].Value = "0";
                item.Cells[2].Value = "0";
                item.Cells[3].Value = "0";
                item.Cells[4].Value = "0";
                item.Cells[5].Value = "0";
                item.Cells[6].Value = "0";
                item.Cells[7].Value = "0";
                item.Cells[8].Value = "0";
                item.Cells[9].Value = "0";
                item.Cells[10].Value = "0";
            }
        }

        private void bDelPaste_Click(object sender, EventArgs e)
        {
            if (dGV_JOB_U.SelectedRows.Count > 0)
            {
                //获取当前选中的行（单行或者多行）
                DialogResult RSS;
                if (VariableSys.LanguageFlag == 1)
                {
                    RSS = MessageBox.Show(this, "Are you sure to delete the data？", "Info", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                }
                else
                {
                    RSS = MessageBox.Show(this, "确定要删除选中行数据码？", "提示", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                }
                switch (RSS)
                {
                    case DialogResult.Yes:
                        //获取当前选定的Index
                        for (int i = this.dGV_JOB_U.SelectedRows.Count; i > 0; i--)
                        {
                            int Index = dGV_JOB_U.SelectedRows[i - 1].Index;
                            dGV_JOB_U.Rows.RemoveAt(Index);
                        }
                        AddRowHeader(dGV_JOB_U, false);
                        break;
                    case DialogResult.No:
                        break;
                }
            }
        }

        private void bUpCamXYCoord_Click(object sender, EventArgs e)
        {
            if (dGV_JOB_U.SelectedRows.Count > 0)
            {
                for (int i_Temp = 0; i_Temp < dGV_JOB_U.SelectedRows.Count; i_Temp++)
                {
                    PointF xy = this.XYPos;
                    dGV_JOB_U.Rows[dGV_JOB_U.SelectedRows[i_Temp].Index].Cells[1].Value = xy.X.ToString();
                    dGV_JOB_U.Rows[dGV_JOB_U.SelectedRows[i_Temp].Index].Cells[2].Value = xy.Y.ToString();
                }
            }
            bUpCamXYCoord.BackColor = Color.MediumSpringGreen;
        }

        private void bLoadPASTE_Click(object sender, EventArgs e)
        {
            String PasteName = "";
            folderBrowserDialog.SelectedPath = Variable.sPath_SYS_PASTE;
            if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
            {
                if (dGV_JOB_U.SelectedRows.Count > 0)
                {
                    for (int i_Temp = 0; i_Temp < dGV_JOB_U.SelectedRows.Count; i_Temp++)
                    {
                        dGV_JOB_U.Rows[dGV_JOB_U.SelectedRows[i_Temp].Index].Cells[0].Value = folderBrowserDialog.SelectedPath.Substring(folderBrowserDialog.SelectedPath.LastIndexOf("\\") + 1);
                        PasteName = folderBrowserDialog.SelectedPath.Substring(folderBrowserDialog.SelectedPath.LastIndexOf("\\") + 1);
                    }
                }
            }

            if (Directory.Exists(Variable.sPath_SYS_Program + "\\" + VariableSys.sProgramName + "\\PASTE\\" + PasteName))
            {
                DirectoryInfo a = new DirectoryInfo(Variable.sPath_SYS_Program + "\\" + VariableSys.sProgramName + "\\PASTE\\" + PasteName);
                a.Delete(true);
            }
            CopyDirectory(Variable.sPath_SYS_PASTE + "\\" + PasteName, Variable.sPath_SYS_Program + "\\" + VariableSys.sProgramName + "\\PASTE\\" + PasteName);

            bLoadPASTE.BackColor = Color.MediumSpringGreen;
        }

        private void bUpCamXYCoord2_Click(object sender, EventArgs e)
        {
            if (dGV_JOB_U.SelectedRows.Count > 0)
            {
                for (int i_Temp = 0; i_Temp < dGV_JOB_U.SelectedRows.Count; i_Temp++)
                {
                    PointF xy = this.XYPos;
                    dGV_JOB_U.Rows[dGV_JOB_U.SelectedRows[i_Temp].Index].Cells[3].Value = xy.X.ToString();
                    dGV_JOB_U.Rows[dGV_JOB_U.SelectedRows[i_Temp].Index].Cells[4].Value = xy.Y.ToString();
                }
            }
            bUpCamXYCoord2.BackColor = Color.MediumSpringGreen;
        }

        private void bUpCamXYCoord_MouseDown(object sender, MouseEventArgs e)
        {
            bUpCamXYCoord.BackColor = Color.Transparent;
        }

        private void bUpCamXYCoord2_MouseDown(object sender, MouseEventArgs e)
        {
            bUpCamXYCoord2.BackColor = Color.Transparent;
        }

        private void bLoadPASTE_MouseDown(object sender, MouseEventArgs e)
        {
            bLoadPASTE.BackColor = Color.Transparent;
        }

        private void bRO_Click(object sender, EventArgs e)
        {
            PointF xy = this.XYPos;
            tOX.Text = xy.X.ToString();
            tOY.Text = xy.Y.ToString();
        }

        private void bRY_Click(object sender, EventArgs e)
        {
            PointF xy = this.XYPos;
            tVX.Text = xy.X.ToString();
            tVY.Text = xy.Y.ToString();
        }

        private void bRX_Click(object sender, EventArgs e)
        {
            PointF xy = this.XYPos;
            tHX.Text = xy.X.ToString();
            tHY.Text = xy.Y.ToString();
        }

        private void bExpandPASTE_Click(object sender, EventArgs e)
        {
            PointF ORIGIN = new PointF();
            PointF XCoord = new PointF();
            PointF YCoord = new PointF();
            short Xcount = 0;
            short Ycount = 0;
            if (dGV_JOB_U.SelectedRows.Count > 0)
            {
                try
                {
                    ORIGIN.X = float.Parse(tOX.Text);
                    ORIGIN.Y = float.Parse(tOY.Text);
                    XCoord.X = float.Parse(tHX.Text);
                    XCoord.Y = float.Parse(tHY.Text);
                    YCoord.X = float.Parse(tVX.Text);
                    YCoord.Y = float.Parse(tVY.Text);
                    Xcount = short.Parse(tHCount.Text);
                    Ycount = short.Parse(tVCount.Text);
                }
                catch
                {
                    if (VariableSys.LanguageFlag == 1)
                    {
                        MessageBox.Show("expand fail!", "Info");
                    }
                    else
                    {
                        MessageBox.Show("未完成三点法扩展或者扩展数目未正确填写！", "提示");
                    }

                    return;
                }
                List<PointF> Point2Expand_Mark1 = new List<PointF>();
                for (int ii = 0; ii < dGV_JOB_U.SelectedRows.Count; ii++)
                {
                    Point2Expand_Mark1.Add(new PointF(float.Parse(dGV_JOB_U.SelectedRows[ii].Cells[1].Value.ToString()), float.Parse(dGV_JOB_U.SelectedRows[ii].Cells[2].Value.ToString())));
                }
                PointF[] Points2Add_Mark1 = ExpandtoAddPoints(Point2Expand_Mark1.ToArray(), ORIGIN, XCoord, YCoord, Xcount, Ycount);

                List<PointF> Point2Expand_Mark2 = new List<PointF>();
                for (int ii = 0; ii < dGV_JOB_U.SelectedRows.Count; ii++)
                {
                    Point2Expand_Mark2.Add(new PointF(float.Parse(dGV_JOB_U.SelectedRows[ii].Cells[3].Value.ToString()), float.Parse(dGV_JOB_U.SelectedRows[ii].Cells[4].Value.ToString())));
                }
                PointF[] Points2Add_Mark2 = ExpandtoAddPoints(Point2Expand_Mark2.ToArray(), ORIGIN, XCoord, YCoord, Xcount, Ycount);

                AddPasteInfoPoints(Points2Add_Mark1, Points2Add_Mark2);
            }
            else
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Pls select points to expand!", "Info");
                }
                else
                {
                    MessageBox.Show("请选择要扩展的点!", "提示");
                }

            }
            bExpand.BackColor = Color.GreenYellow;
        }

        private void AddPasteInfoPoints(PointF[] Points1, PointF[] Points2)
        {
            if (dGV_JOB_U.SelectedRows.Count <= 0)
                return;

            for (int i = 0; i < Points1.Length; i++)
            {
                int rowIndex = dGV_JOB_U.Rows.Add();
                dGV_JOB_U.Rows[rowIndex].Cells[0].Value = dGV_JOB_U.SelectedRows[0].Cells[0].Value.ToString();
                dGV_JOB_U.Rows[rowIndex].Cells[1].Value = Points1[i].X.ToString();
                dGV_JOB_U.Rows[rowIndex].Cells[2].Value = Points1[i].Y.ToString();
                dGV_JOB_U.Rows[rowIndex].Cells[3].Value = Points2[i].X.ToString();
                dGV_JOB_U.Rows[rowIndex].Cells[4].Value = Points2[i].Y.ToString();
                dGV_JOB_U.Rows[rowIndex].Cells[5].Value = "0";
                dGV_JOB_U.Rows[rowIndex].Cells[6].Value = "0";
                dGV_JOB_U.Rows[rowIndex].Cells[7].Value = "0";
                dGV_JOB_U.Rows[rowIndex].Cells[8].Value = "0";
                dGV_JOB_U.Rows[rowIndex].Cells[9].Value = "0";
                dGV_JOB_U.Rows[rowIndex].Cells[10].Value = "0";
            }
            AddRowHeader(dGV_JOB_U, false);
        }//增加扩展点-拍照点1和拍照点2

        private void dGV_JOB_U_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                #region 根据保存的OKNG信息来画图设置
                //清除图点
                //bool found = false;
                //PastePane_Set.GraphPane.Title = lJobName.Text;
                //PastePane_Set.GraphPane.CurveList.Clear();
                //PastePane_Set.GraphPane.GraphItemList.Clear();
                //for (int i_DrawPoint = 0; i_DrawPoint < dGV_JOB_U.RowCount - 1; i_DrawPoint++)
                //{
                //    double[] x = new double[1];
                //    double[] y = new double[1];
                //    x[0] = double.Parse(dGV_JOB_U.Rows[i_DrawPoint].Cells[1].Value.ToString());
                //    y[0] = double.Parse(dGV_JOB_U.Rows[i_DrawPoint].Cells[2].Value.ToString());
                //    double[] x2 = new double[1];
                //    double[] y2 = new double[1];
                //    x2[0] = double.Parse(dGV_JOB_U.Rows[i_DrawPoint].Cells[3].Value.ToString());
                //    y2[0] = double.Parse(dGV_JOB_U.Rows[i_DrawPoint].Cells[4].Value.ToString());
                //    //根据OKNG 重新画图
                //    found = false;
                //    for (int j = 0; j < dGV_JOB_U.SelectedRows.Count; j++)
                //    {
                //        if (i_DrawPoint == dGV_JOB_U.SelectedRows[j].Index && i_DrawPoint != dGV_JOB_U.Rows.Count - 1)
                //        {
                //            if (j == 0)
                //            {
                //                tOffSetX_Paste.Text = dGV_JOB_U.Rows[i_DrawPoint].Cells[5].Value.ToString();
                //                tOffSetY_Paste.Text = dGV_JOB_U.Rows[i_DrawPoint].Cells[6].Value.ToString();
                //                tOffSetR_Paste.Text = dGV_JOB_U.Rows[i_DrawPoint].Cells[7].Value.ToString();
                //            }
                //            found = true;
                //        }
                //    }

                //    if (found)//
                //    {
                //        LineItem curve = PastePane_Set.GraphPane.AddCurve("", x, y, Color.Red, SymbolType.Circle);
                //        LineItem curve1 = PastePane_Set.GraphPane.AddCurve("", x2, y2, Color.Brown, SymbolType.Circle);
                //        curve.Line.IsVisible = false;
                //        curve.Symbol.Size = 15;
                //        curve.Symbol.Fill = new Fill(Color.Red);
                //        curve1.Line.IsVisible = false;
                //        curve1.Symbol.Size = 15;
                //        curve1.Symbol.Fill = new Fill(Color.Brown);
                //    }
                //    else
                //    {
                //        LineItem curve = PastePane_Set.GraphPane.AddCurve("", x, y, Color.Blue, SymbolType.Circle);
                //        LineItem curve1 = PastePane_Set.GraphPane.AddCurve("", x2, y2, Color.Green, SymbolType.Circle);
                //        curve.Line.IsVisible = false;
                //        curve.Symbol.Size = 15;
                //        curve.Symbol.Fill = new Fill(Color.Blue);
                //        curve1.Line.IsVisible = false;
                //        curve1.Symbol.Size = 15;
                //        curve1.Symbol.Fill = new Fill(Color.Green);
                //    }

                //}
                //PastePane_Set.AxisChange();
                //PastePane_Set.Refresh();
                //PastePane_Set.Invalidate();
                #endregion
                //AddRowHeader(dGV_JOB_U,false);
            }
            catch
            {

            }
        }

        private void dGV_JOB_U_SelectionChanged(object sender, EventArgs e)
        {
            try
            {
                #region 根据保存的OKNG信息来画图设置
                //清除图点
                bool found = false;
                PastePane_Set.GraphPane.Title.Text = VariableSys.sProgramName;
                PastePane_Set.GraphPane.CurveList.Clear();
                PastePane_Set.GraphPane.GraphObjList.Clear();
                for (int i_DrawPoint = 0; i_DrawPoint < dGV_JOB_U.RowCount; i_DrawPoint++)
                {
                    double[] x = new double[1];
                    double[] y = new double[1];
                    x[0] = double.Parse(dGV_JOB_U.Rows[i_DrawPoint].Cells[1].Value.ToString());
                    y[0] = double.Parse(dGV_JOB_U.Rows[i_DrawPoint].Cells[2].Value.ToString());
                    double[] x2 = new double[1];
                    double[] y2 = new double[1];
                    x2[0] = double.Parse(dGV_JOB_U.Rows[i_DrawPoint].Cells[3].Value.ToString());
                    y2[0] = double.Parse(dGV_JOB_U.Rows[i_DrawPoint].Cells[4].Value.ToString());
                    //根据OKNG 重新画图
                    found = false;
                    for (int j = 0; j < dGV_JOB_U.SelectedRows.Count; j++)
                    {
                        if (i_DrawPoint == dGV_JOB_U.SelectedRows[j].Index)
                        {
                            if (j == 0)
                            {
                                tOffSetX_Paste.Text = dGV_JOB_U.Rows[i_DrawPoint].Cells[5].Value.ToString();
                                tOffSetY_Paste.Text = dGV_JOB_U.Rows[i_DrawPoint].Cells[6].Value.ToString();
                                tOffSetR_Paste.Text = dGV_JOB_U.Rows[i_DrawPoint].Cells[7].Value.ToString();
                                this.tFeederNo.Text = dGV_JOB_U.Rows[i_DrawPoint].Cells[8].Value.ToString();
                                this.tNozzleNo.Text = dGV_JOB_U.Rows[i_DrawPoint].Cells[9].Value.ToString();
                                this.tFlyDelay.Text = dGV_JOB_U.Rows[i_DrawPoint].Cells[10].Value.ToString();
                            }
                            found = true;
                        }
                    }

                    if (found)//
                    {
                        ZedGraph.LineItem curve = PastePane_Set.GraphPane.AddCurve("", x, y, Color.Red, ZedGraph.SymbolType.Circle);
                        ZedGraph.LineItem curve1 = PastePane_Set.GraphPane.AddCurve("", x2, y2, Color.Brown, ZedGraph.SymbolType.Circle);
                        curve.Line.IsVisible = false;
                        curve.Symbol.Size = 15;
                        curve.Symbol.Fill = new ZedGraph.Fill(Color.Red);
                        curve1.Line.IsVisible = false;
                        curve1.Symbol.Size = 15;
                        curve1.Symbol.Fill = new ZedGraph.Fill(Color.Brown);
                    }
                    else
                    {
                        ZedGraph.LineItem curve = PastePane_Set.GraphPane.AddCurve("", x, y, Color.Blue, ZedGraph.SymbolType.Circle);
                        ZedGraph.LineItem curve1 = PastePane_Set.GraphPane.AddCurve("", x2, y2, Color.Green, ZedGraph.SymbolType.Circle);
                        curve.Line.IsVisible = false;
                        curve.Symbol.Size = 15;
                        curve.Symbol.Fill = new ZedGraph.Fill(Color.Blue);
                        curve1.Line.IsVisible = false;
                        curve1.Symbol.Size = 15;
                        curve1.Symbol.Fill = new ZedGraph.Fill(Color.Green);
                    }

                }
                PastePane_Set.AxisChange();
                PastePane_Set.Refresh();
                PastePane_Set.Invalidate();
                #endregion
                //AddRowHeader(dGV_JOB_U,false);
            }
            catch
            {

            }
        }

        private void bSetOffset_Click(object sender, EventArgs e)
        {


        }

        private void bJobUp_Click(object sender, EventArgs e)
        {
            if (dGV_JOB_U.SelectedRows.Count > 0)
            {
                int index = dGV_JOB_U.SelectedRows[0].Index;
                if (index == 0)
                {
                    return;
                }
                List<string> list = new List<string>();
                for (int i = 0; i < dGV_JOB_U.Columns.Count; i++)
                {
                    list.Add(dGV_JOB_U.SelectedRows[0].Cells[i].Value.ToString());   //把当前选中行的数据存入list数组中  
                }
                for (int j = 0; j < dGV_JOB_U.Columns.Count; j++)
                {
                    dGV_JOB_U.Rows[index].Cells[j].Value = dGV_JOB_U.Rows[index - 1].Cells[j].Value;
                    dGV_JOB_U.Rows[index - 1].Cells[j].Value = list[j].ToString();
                }
                dGV_JOB_U.Rows[index].Selected = false;
                dGV_JOB_U.Rows[index - 1].Selected = true;
            }
        }

        private void bJobDown_Click(object sender, EventArgs e)
        {
            if (dGV_JOB_U.SelectedRows.Count > 0)
            {
                int index = dGV_JOB_U.SelectedRows[0].Index;
                if (index == dGV_JOB_U.RowCount - 2)
                {
                    return;
                }
                List<string> list = new List<string>();
                for (int i = 0; i < dGV_JOB_U.Columns.Count; i++)
                {
                    list.Add(dGV_JOB_U.SelectedRows[0].Cells[i].Value.ToString());   //把当前选中行的数据存入list数组中  
                }

                for (int j = 0; j < dGV_JOB_U.Columns.Count; j++)
                {
                    dGV_JOB_U.Rows[index].Cells[j].Value = dGV_JOB_U.Rows[index + 1].Cells[j].Value;
                    dGV_JOB_U.Rows[index + 1].Cells[j].Value = list[j].ToString();
                }
                dGV_JOB_U.Rows[index + 1].Selected = true;
                dGV_JOB_U.Rows[index].Selected = false;
            }
        }

        #endregion

        #region 参数-流程控制
        //*******************************************[流程控制]**************************************************
        private short iLabelDetectResult = -1;
        private PointF pSuckLabelPoint = new PointF();
        private double dSuckAngle = 0;
        //*******************************************[流程控制]**************************************************
        private double[] m_dataScaled = new double[16];//压力Sensor数值数组
        private double dPressure_Nozzle1 = 0;//吸嘴1压力值
        private double dPressure_Nozzle2 = 0;//吸嘴2压力值
        private int[] RUN_AlarmInfo = new int[10];//报警种类
        private double R = 0;
        private bool bTest = false;
        //烧机线程
        private short TestIndex = 0;
        private bool TestInit = false;
        //上视觉自动侦测Mark点
        private PointF newMark1 = new PointF();
        private PointF newMark2 = new PointF();
        //坐标系转换
        private CoordinateSystem BaseCoordinateSystem = new CoordinateSystem();
        private CoordinateSystem MeasurementSystems = new CoordinateSystem();
        //
        public bool bSystemExit = false;

        /// <summary>
        /// 0-系统初始化 1-自动运行 2-暂停 手动模式 3-ByPass
        /// </summary>
        public short RunMode = 0;

        public int FlowIndex = 0;
        public bool IsDownPhoto = false;
        private string FlowIndex_Name = "";
        private int FlowDoneIndex = 0;
        private bool FlowInit = false;

        public Variable.CamReturn[] UpCCDResult = new Variable.CamReturn[2];//上视觉计算结果 1X2

        public Variable.CamReturn[] GlobalMark = new Variable.CamReturn[2]; // 上视觉Global Mark

        public int RUN_GloablIndex = 0;
        public double RUN_GloablAngle = 0;

        private Stopwatch StopWatch_FlowIndex = new Stopwatch();//流程码表
        private Stopwatch StopWatch_Nozzle = new Stopwatch();//吸嘴吸取码表
        private Stopwatch StopWatch_FlowIndex_Conveyor = new Stopwatch();//轨道流程码表
        private bool bAlrmIgnore = false;//系统报警忽略设置
        private short Status_ScanIO = 0;//扫描IO状态 0-OK 1-NG
        public Variable.IO_IN_Parameter bArr_IO_IN_Status = new Variable.IO_IN_Parameter();

        public delegate short VoidDO();//通用代理
        public delegate short VoidDO_Str(string str);//通用代理


        private short iCommandReSendTime = 0;//轴卡指令连续发送次数
        private short iGG_rtn = 0;//轴卡反馈
        private short SuckTime = 0;//吸取次数
        private short[] XI_IndexG = new short[2];//吸取次序1
        private short iCamReconnectTime = 0;//相机重连次数

        private bool RUN_Init = false;//贴附初次执行
        private bool RUN_Scan_Paste = false;//true -扫描 false -Pastes
        private short RUN_UpCCD_DoneCount = 0;//上视觉计算过的结果个数

        private PointF RUN_BadMarkPoint = new PointF();//BadMark点

        private PointF RUN_Mark1Point = new PointF();//Mark1点拍照点
        private PointF RUN_Mark2Point = new PointF();//Mark2点拍照点

        private PointF RUN_MarkPointH1 = new PointF();//Mark1点拍照点H1
        private PointF RUN_MarkPointH2 = new PointF();//Mark2点拍照点H2
        private PointF RUN_MarkPointV1 = new PointF();//Mark1点拍照点V1
        private PointF RUN_MarkPointV2 = new PointF();//Mark2点拍照点V2

        // private short iRUN_NozzleIndex;//左吸嘴-1 右吸嘴-2

        //private short RUN_dNozzle1DownVisionED = 0;//当次左吸嘴上Label是否过下视觉 0-不使用 1-使用未过 2-使用已过下视觉OK 4-使用已过下视觉NG 3-已贴完
        //private short RUN_dNozzle2DownVisionED = 0;//当次右吸嘴上Label是否过下视觉 0-不使用 1-使用未过 2-使用已过下视觉OK 4-使用已过下视觉NG 3-已贴完

        //private short RUN_Nozzle1_FeederIndex = 0;//当次左吸嘴吸取Feeder 号码 1-左 2-右
        //private short RUN_Nozzle2_FeederIndex = 0;//当次右吸嘴吸取Feeder 号码 1-左 2-右


        //private short RUN_PastePointIndexLeft = 0;//当次左吸嘴在贴板子的第几个点
        //private short RUN_PastePointIndexRight = 0;//当次右吸嘴在贴板子的第几个点

        private PointF RUN_PrePastePoint = new PointF();//吸嘴大概贴附位置（提前走）
        private PointF RUN_PastePoint = new PointF();//最终贴付位置
        //private double RUN_PasteRealAngle = 0;//吸嘴真正贴附角度

        //private PointF Nozzle1_DownXY_Pos = new PointF();//吸嘴1 MARK
        //private double Nozzle1_Down_Angle = 0;//吸嘴1 角度
        //private PointF Nozzle2_DownXY_Pos = new PointF();//吸嘴2 MARK
        //private double Nozzle2_Down_Angle = 0;//吸嘴2 角度


        private bool RUN_bReachOK = false;//送板到位-------------与轨道线程沟通
        private bool RUN_bPasteOK = false;//贴附OK-------------与轨道线程沟通
        /// <summary>
        /// 最后使用的Feeder序列号 1还是2 用于判断 下视觉的拍摄顺序
        /// </summary>
        private short RUN_Index_LastFeederUsed = 0;
        private short RUN_SnapMethod = 0;//走停拍摄方法 【1】-双正拍 1-（2）-3-（4） 【2】-双反拍（4）-3-（2）-1 【3】-单拍1吸嘴 1-（2） 【4】-单拍2吸嘴 3-（4）
        private short RUN_CCDReturn = 0;//CCD计算返回值
        private bool[] RUN_SFCS_ISBadMark;//BadMark 从TXT返回的结果
        private bool bFound_BadMark = false;//BadMark搜索结果-要扫描的结果
        private bool bFound_LocalFidicial = false;//LocalFidicial结果
        private short RUN_BadMarkSFCSRtn = 0;//BadMarkSFCS 返回的结果

        private List<uint> RUN_DropList = new List<uint>();

        /// <summary>
        /// 照 Mark 点下标
        /// </summary>
        private int RUN_MarkIndex = 0;

        private PointF RUN_GoPos = new PointF();

        private uint RUN_FlyDir = 0;

        /// <summary>
        /// 照 Badmark 点时 大板的下标
        /// </summary>
        private int RUN_ReadBadmark_PasteIndex = 0;

        /// <summary>
        /// 照 Badmark 点 大板上小板的下标
        /// </summary>
        private int RUN_ReadBadmark_MarkIndex = 0;


        /// <summary>
        /// 是否启用指定Mark点功能
        /// </summary>
        private bool EnableAppointMark = true;

        /// <summary>
        /// Mark 点映射表
        /// </summary>
        private List<Tuple<int, int>> RUN_MarkList = new List<Tuple<int, int>>();

        private List<List<Variable.PasteItem>> RUN_UpFlyMark = new List<List<Variable.PasteItem>>();

        /// <summary>
        /// 吸标步序
        /// </summary>
        private int RUN_XIIndex = 0;

        /// <summary>
        /// 吸标的列表
        /// </summary>
        private List<uint> RUN_XIList = new List<uint>();

        /// <summary>
        /// 抛料吸嘴下标
        /// </summary>
        private uint RUN_ThrowNozzle = 0;

        /// <summary>
        /// 贴标的吸嘴下标
        /// </summary>
        private uint RUN_PasteNozzle = 0;

        /// <summary>
        /// 下视觉步序
        /// </summary>
        private int RUN_DownVisionIndex = 0;

        private bool RUN_BadMarkChange = false;//BadMark 从SFCS 失败 自动切入到自扫描 BadMark
        private double RUN_R1Init = 0;
        private double RUN_R2Init = 0;
        public Variable.PASTAE[] RUN_PASTEInfo;//List 2 array 扩展前列表 的 数组
        private bool FlowInit_Conveyor = false;
        private short FlowIndex_Conveyor = 100;
        private short FlowIndex_Conveyor_Done = 0;
        private string FlowIndex_ConveyorName = "";
        /// <summary>
        /// 吸标时正在吸取的Feeder
        /// </summary>
        private int RUN_FeedrIndex = 0;
        #endregion

        #region 吸标动作
        /// <summary>
        /// 移动到吸标位
        /// </summary>
        /// <param name="zIndex">Z 轴序号</param>
        /// <param name="zParam">Z 轴参数</param>
        /// <param name="rParam">R 轴参数</param>
        /// <param name="feeder">Feeder 参数</param>
        /// <param name="XI_Index">吸取下标</param>
        /// <param name="Label_Status">Feeder 感应状态</param>
        /// <returns></returns>
        private bool DoXIStep_GoXIPos(uint zIndex1, uint zIndex2, ref Variable.FEEDER feeder, ref short XI_Index, ref int[] Label_Status)
        {
            //10010
            Z_RunParam zParam1 = Z_RunParamMap[zIndex1];
            R_RunParam rParam1 = R_RunParamMap[zIndex1];

            Z_RunParam zParam2 = Z_RunParamMap[zIndex2];
            R_RunParam rParam2 = R_RunParamMap[zIndex2];

            // 如果有一个没用
            if (!zParam1.RUN_bNozzleUse)
            {
                zParam1 = zParam2;
            }
            else if (!zParam2.RUN_bNozzleUse)
            {
                zParam2 = zParam1;
            }

            if (!FlowInit)
            {
                #region 到吸标位 或 拍照位
                if (FlowDoneIndex != 10010)
                    RestartStopwatch();

                FlowIndex_Name = "吸嘴XY到Feeder位置";

                if (XI_Index >= feeder.PointCount) // 如果超出下标
                    XI_Index = 0;

                int i_fd = feeder.ReachSensorIndex[XI_Index] / 4 % 2;

                if (this.ClosedFD[i_fd]) // 是否屏蔽
                {
                    XI_Index++;
                    return false;
                }

                if (IO.IOManager.Instance.FDReInputLabel[i_fd])
                {
                    #region  到左/右feeder 第一个点
                    for (int i = 0; i < feeder.PointCount; ++i)
                    {
                        int fd = feeder.ReachSensorIndex[i] / 4 % 2;
                        if (fd == i_fd)
                        {
                            XI_Index = (short)i;
                            break;
                        }
                    }
                    IO.IOManager.Instance.FDReInputLabel[i_fd] = false;
                    if(this.RUN_XIIndex > 0)
                        Thread.Sleep(feeder.Delay);
                    #endregion
                }

                if (Label_Status[feeder.ReachSensorIndex[XI_Index]] != 1)
                {
                    if ((DateTime.Now - IO.IOManager.Instance.FDMonitor[i_fd]).TotalMilliseconds > VariableSys.iTimeOut_Feeder) // 是否超时
                    {
                        string tt = i_fd > 0 ? "右Feeder" : "左Feeder";
                        this.AlarmInfoInvoke($"步骤[贴标]10010:{tt} 上无料或者卡料请检查!!!", AlarmLevel.Tips);
                        return false;
                    }
                    XI_Index++;
                }
                else
                {
                    XIPOINT_ = this.GetNewXIPos(zIndex1, XI_Index, ref feeder);

                    if (XIPOINT_.X < VariableSys.dXSafeMinX || XIPOINT_.X > VariableSys.dXSafeMaxX) // 超出吸标区域直接不去吸
                    {
                        this.AlarmInfoInvoke("步骤[贴标]10010:吸标区域超出安全区域,请检查行程是否足够!!", AlarmLevel.Warn);
                        FlowInit = false;
                        FlowDoneIndex = FlowIndex;
                        this.FlowIndex = 10015;
                        return false;
                    }

                    zParam1.PO_vaccum.ResetIO();
                    zParam2.PO_vaccum.ResetIO();

                    XYGoPos(XIPOINT_, VariableSys.VelMode_Current);
                    rParam1.GoPos(feeder.XI_Degree[XI_Index], VariableSys.VelMode_Current);
                    rParam2.GoPos(feeder.XI_Degree[XI_Index], VariableSys.VelMode_Current);
                    this.TurnGo(VariableSys.dTurnXIAngle, VariableSys.VelMode_Current);
                    if (feeder.bReachXI || VariableSys.bEnableVaccumCheck)
                    {
                        zParam1.XI_vaccum.SetIO();
                        zParam2.XI_vaccum.SetIO();
                    }

                    this.FlowInit = true;
                }
            }
            #endregion
            else
            {
                #region 是否到达 吸标位
                if (rParam1.AxisReach(feeder.XI_Degree[XI_Index])
                    && rParam2.AxisReach(feeder.XI_Degree[XI_Index])
                    && AxisReach(XIPOINT_)
                    && this.TurnReach(VariableSys.dTurnXIAngle))
                {
                    if (feeder.NeedWaitReach)
                    {
                        feeder.NeedWaitReach = false;
                        Thread.Sleep(feeder.Delay);
                    }

                    FlowInit = false;
                    FlowDoneIndex = FlowIndex;
                    FlowIndex = 10011;
                }
                else
                {
                    if (!rParam1.bAxisIsRunning || !rParam2.bAxisIsRunning)
                    {
                        rParam1.GoPos(feeder.XI_Degree[XI_Index], VariableSys.VelMode_Current);
                        rParam2.GoPos(feeder.XI_Degree[XI_Index], VariableSys.VelMode_Current);
                    }

                    if (!X.bAxisIsRunning || !Y.bAxisIsRunning)
                        XYGoPos(XIPOINT_, VariableSys.VelMode_Current);

                    if (!Turn.bAxisIsRunning)
                        TurnGo(VariableSys.dTurnXIAngle, VariableSys.VelMode_Current);
                }
                #endregion
            }

            if (StopWatch_FlowIndex.ElapsedMilliseconds > VariableSys.iTimeOut_Feeder)
                this.AlarmInfoInvoke("步骤[贴标]10010:动作到位超时请检查伺服是否丢脉冲或者报警", AlarmLevel.Warn);

            if (FlowIndex != 10010)
                this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[贴标]10010:出标到位且XY到Feeder吸料位置:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
            return true;
        }

        /// <summary>
        /// 吸嘴到 吸料高度
        /// </summary>
        /// <param name="zIndex">Z 轴序号</param>
        /// <param name="zParam">Z 轴参数</param>
        /// <param name="rParam">R 轴参数</param>
        /// <param name="feeder">Feeder 参数</param>
        /// <param name="XI_Index">吸取下标</param>
        /// <param name="Label_Status">Feeder 感应状态</param>
        /// <returns></returns>
        private bool DoXIStep_GoXIHeigh(uint zIndex1, uint zIndex2, ref Variable.FEEDER feeder, ref short XI_Index)
        {
            //10011
            Z_RunParam zParam1 = Z_RunParamMap[zIndex1];
            R_RunParam rParam1 = R_RunParamMap[zIndex1];
            Z_RunParam zParam2 = Z_RunParamMap[zIndex2];
            R_RunParam rParam2 = R_RunParamMap[zIndex2];

            // 如果有一个没用
            if (!zParam1.RUN_bNozzleUse)
            {
                zParam1 = zParam2;
            }
            else if (!zParam2.RUN_bNozzleUse)
            {
                zParam2 = zParam1;
            }

            //10011
            if (!FlowInit)
            {
                FlowIndex_Name = "吸嘴到 到吸料高度";
                RestartStopwatch();
                FlowInit = true;
                iCommandReSendTime = 0;
                zParam1.RUN_ZPos = feeder.XIHeight[XI_Index][(int)zIndex1];//RUN_PASTEInfo[zParam1.RUN_PasteInfoIndex_List].PasteHeight[zParam1.RUN_PastePointIndex][(int)zIndex1];
                zParam2.RUN_ZPos = feeder.XIHeight[XI_Index][(int)zIndex2]; //RUN_PASTEInfo[zParam2.RUN_PasteInfoIndex_List].PasteHeight[zParam2.RUN_PastePointIndex][(int)zIndex2];

                zParam1.GoPos(zParam1.RUN_ZPos, VariableSys.VelMode_Current);
                zParam2.GoPos(zParam2.RUN_ZPos, VariableSys.VelMode_Current);
            }
            else
            {
                if (zParam1.AxisReach(zParam1.RUN_ZPos) && zParam2.AxisReach(zParam2.RUN_ZPos))
                {
                    FlowInit = false;
                    FlowDoneIndex = FlowIndex;
                    this.FlowIndex = 10013;

                    if (!feeder.bReachXI)
                    {
                        zParam1.XI_vaccum.SetIO();
                        zParam2.XI_vaccum.SetIO();
                    }

                    Thread.Sleep(VariableSys.iDelay_BeforeXI);
                }
                else
                {
                    zParam1.GoPos(zParam1.RUN_ZPos, VariableSys.VelMode_Current);
                    zParam2.GoPos(zParam2.RUN_ZPos, VariableSys.VelMode_Current);
                }
            }

            if (StopWatch_FlowIndex.ElapsedMilliseconds > VariableSys.iTimeOut_Normal)
                this.AlarmInfoInvoke("步骤[贴标]10011:Z1 到吸料高度超时", AlarmLevel.Warn);

            if (FlowIndex != 10011)
                this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[贴标]10011:Z1 到吸料高度时间:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
            return true;
        }

        /// <summary>
        /// Z 轴到 安全高度
        /// </summary>
        /// <param name="zIndex"></param>
        /// <param name="zParam"></param>
        /// <param name="rParam"></param>
        /// <param name="feeder"></param>
        /// <param name="XI_Index"></param>
        /// <returns></returns>
        private bool DoXIStep_GOSafeHeight(uint zIndex1, uint zIndex2)
        {
            if (!Z_RunParamMap[zIndex2].RUN_bNozzleUse)
            {
                zIndex2 = zIndex1;
            }
            else if (!Z_RunParamMap[zIndex1].RUN_bNozzleUse)
            {
                zIndex1 = zIndex2;
            }

            //10013
            if (FlowInit == false)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    FlowIndex_Name = "NZ go to safe height";
                }
                else
                {
                    FlowIndex_Name = "Z 到安全高度";
                }

                RestartStopwatch();
                FlowInit = true;
                this.All_ZGoSafe(VariableSys.VelMode_Current);
            }
            else
            {
                if (this.All_ZReachOrg())//安全高度达到
                {
                    FlowInit = false;
                    FlowDoneIndex = FlowIndex;
                    FlowIndex = 10014;
                    R_RunParamMap[zIndex1].GoPos(Feeder[Z_RunParamMap[zIndex1].RUN_Nozzle_FeederIndex - 1].Cam_Degree, VariableSys.VelMode_Current);
                    R_RunParamMap[zIndex2].GoPos(Feeder[Z_RunParamMap[zIndex1].RUN_Nozzle_FeederIndex - 1].Cam_Degree, VariableSys.VelMode_Current);
                }
                else
                {
                    this.All_ZGoSafe(VariableSys.VelMode_Current);
                }
            }
            if (StopWatch_FlowIndex.ElapsedMilliseconds > VariableSys.iTimeOut_Normal)
                this.AlarmInfoInvoke("步骤[贴标]10013:Z1 到安全高度超时", AlarmLevel.Warn);

            if (FlowIndex != 10013)
                this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[贴标]10013:Z1 到安全高度时间:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//

            return true;
        }

        /// <summary>
        /// 检测真空是否达到
        /// </summary>
        /// <param name="zIndex"></param>
        /// <param name="zParam"></param>
        /// <param name="rParam"></param>
        /// <param name="feeder"></param>
        /// <param name="XI_Index"></param>
        /// <returns></returns>
        private bool DoXIStep_CheckVaccum(uint zIndex1, uint zIndex2, ref short XI_Index)
        {
            if (!Z_RunParamMap[zIndex2].RUN_bNozzleUse)
            {
                zIndex2 = zIndex1;
            }
            else if (!Z_RunParamMap[zIndex1].RUN_bNozzleUse)
            {
                zIndex1 = zIndex2;
            }

            // 10014
            if (VariableSys.LanguageFlag == 1)
            {
                FlowIndex_Name = "Check Vacuum";
            }
            else
            {
                FlowIndex_Name = "检测真空是否达到";
            }

            Z_RunParam zParam1 = Z_RunParamMap[zIndex1];
            R_RunParam rParam1 = R_RunParamMap[zIndex1];
            Z_RunParam zParam2 = Z_RunParamMap[zIndex2];
            R_RunParam rParam2 = R_RunParamMap[zIndex2];

            if (zParam1.Check_vaccum.GetIO() || zParam2.Check_vaccum.GetIO())//真空达到
            {
                if (!zParam1.RUN_bNozzleUse)
                    zParam1.RUN_dNozzleDownVisionED = 5;

                if (!zParam2.RUN_bNozzleUse)
                    zParam2.RUN_dNozzleDownVisionED = 5;

                RUN_Index_LastFeederUsed = zParam1.RUN_Nozzle_FeederIndex;//目前最后使用Feeder 为1
                RUN_Index_LastFeederUsed = zParam2.RUN_Nozzle_FeederIndex;//目前最后使用Feeder 为1

                XI_Index++;
                StatisticsHelper.Instance.Reoprt.Pick(zIndex1);
                FlowInit = false;
                FlowDoneIndex = FlowIndex;
                this.FlowIndex = 10015;
            }
            else
            {
                SuckTime++;
                if (SuckTime >= VariableSys.iXIRetry)
                {
                    if (!zParam1.RUN_bNozzleUse)
                        zParam1.RUN_dNozzleDownVisionED = 5;

                    if (!zParam2.RUN_bNozzleUse)
                        zParam2.RUN_dNozzleDownVisionED = 5;

                    RUN_Index_LastFeederUsed = zParam1.RUN_Nozzle_FeederIndex;//目前最后使用Feeder 为1
                    RUN_Index_LastFeederUsed = zParam2.RUN_Nozzle_FeederIndex;//目前最后使用Feeder 为1

                    XI_Index++;
                    FlowInit = false;
                    FlowDoneIndex = FlowIndex;
                    this.FlowIndex = 10015;
                    StatisticsHelper.Instance.Reoprt.Pick(zIndex1, true);

                    ZDTHelper.Instance.UpdateProdctPickMessage();
                    //this.Invoke(new VoidDO_Str(AlarmInfo), new object[] { $"吸嘴{zIndex1+1}连续吸取标签失败，请手动将标签取出" });//
                    SuckTime = 0;
                }
                else
                {
                    FlowInit = false;
                    FlowDoneIndex = FlowIndex;
                    FlowIndex = 10010;//重新吸取
                }
            }
            //     }
            // }
            if (FlowIndex != 10014)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "Step[Labeler]10014:Check Vacuum time:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
                }
                else
                {
                    this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[贴标]10014:检测真空是否达到时间:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
                }
            }
            return false;
        }
        #endregion

        #region 点拍下视觉动作
        /// <summary>
        /// 点拍过下视觉---到拍照位 转角度 并 设置曝光打开光源
        /// </summary>
        /// <returns></returns>
        private bool DoPointPhoto_GoPos()
        {
            if (!FlowInit)
            {
                if (VariableSys.machineVersion == 3)
                {
                    Task.Factory.StartNew(() =>
                    {
                        SetLightAndShutter();
                    });
                }

                FlowInit = true;
            }

            if (AxisReach(VariableSys.pReadyPoint)
                && TurnReach(VariableSys.dTurnPasteAngle))
            {
                FlowInit = false;
                FlowDoneIndex = FlowIndex;
                FlowIndex = 20011;
            }
            else
            {
                if (!X.bAxisIsRunning || !Y.bAxisIsRunning)
                    XYGoPos(VariableSys.pReadyPoint, VariableSys.VelMode_Current);

                if (!Turn.bAxisIsRunning)
                    this.TurnGo(VariableSys.dTurnPasteAngle, VariableSys.VelMode_Current);
            }
            return true;
        }

        /// <summary>
        /// 点拍过下视觉---采图 并计算
        /// </summary>
        /// <param name="zParam">Z 轴参数</param>
        /// <param name="rParam">R 轴参数</param>
        /// <param name="feeder">Feeder 参数</param>
        /// <param name="pointIndex">拍照点 0:拍照点1   1:拍照点2</param>
        /// <returns></returns>
        private bool DoPointPhoto_Cal()
        {
            FlowIndex_Name = "下视觉拍照";
            RestartStopwatch();
            try
            {
                Thread.Sleep(VariableSys.iDownCamDelay);
                if (Z_RunParamMap[0].RUN_bNozzleUse || Z_RunParamMap[1].RUN_bNozzleUse)
                {
                    Z_RunParamMap[0].CaptureImage?.Dispose();
                    Z_RunParamMap[1].CaptureImage?.Dispose();

                    Z_RunParamMap[0].CaptureImage = CameraDefine.Instance[CAM.Bottom1]._Session.Grab(null, true);
                    Z_RunParamMap[1].CaptureImage = new VisionImage();
                    Algorithms.Copy(Z_RunParamMap[0].CaptureImage, Z_RunParamMap[1].CaptureImage);
                }
                if (Z_RunParamMap[0].RUN_bNozzleUse)
                {
                    DownCaler.Cal(0);
                }

                if (Z_RunParamMap[1].RUN_bNozzleUse)
                {
                    DownCaler.Cal(1);
                }

                if (Z_RunParamMap[2].RUN_bNozzleUse || Z_RunParamMap[3].RUN_bNozzleUse)
                {
                    Z_RunParamMap[2].CaptureImage?.Dispose();
                    Z_RunParamMap[3].CaptureImage?.Dispose();
                    Z_RunParamMap[2].CaptureImage = CameraDefine.Instance[CAM.Bottom2]._Session.Grab(null, true);
                    Z_RunParamMap[3].CaptureImage = new VisionImage();
                    Algorithms.Copy(Z_RunParamMap[2].CaptureImage, Z_RunParamMap[3].CaptureImage);
                }

                if (Z_RunParamMap[2].RUN_bNozzleUse)
                {
                    DownCaler.Cal(2);
                }

                if (Z_RunParamMap[3].RUN_bNozzleUse)
                {
                    DownCaler.Cal(3);
                }

                FlowInit = false;
                FlowDoneIndex = FlowIndex;
                this.FlowIndex = 20012;
            }
            catch (VisionException ex)
            {
                this.AlarmInfoInvoke($"单拍-取图异常 相机掉线!!!{ex.Message}", AlarmLevel.Warn);
            }

            this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[贴标]:拍照时间" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//

            return true;
        }
        #endregion

        #region 抛料动作
        /// <summary>
        /// 到抛料点
        /// </summary>
        /// <param name="zParam"></param>
        /// <param name="rParam"></param>
        /// <returns></returns>
        public bool DoThrow_GoPos(List<uint> DropList)
        {
            //20211
            Z_RunParam zParam = this.Z_RunParamMap[DropList[0]];
            R_RunParam rParam = this.R_RunParamMap[DropList[0]];

            if (!FlowInit)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    FlowIndex_Name = "go to NZ drop position";
                }
                else
                {
                    FlowIndex_Name = "吸嘴XY到抛料点";
                }

                RestartStopwatch();
                FlowInit = true;

                RUN_PrePastePoint = zParam.ThrowPoint1;

                RUN_PrePastePoint.X += (StatisticsHelper.Instance.Reoprt.Total.TotalDrop % 4 * 8);
                RUN_PrePastePoint.Y -= ((StatisticsHelper.Instance.Reoprt.Total.TotalDrop / 4 % 4) * 8);

                XYGoPos(RUN_PrePastePoint, VariableSys.VelMode_Current);
                TurnGo(VariableSys.dTurnXIAngle, VariableSys.VelMode_Current);
                zParam.ThrowLabelCount++;
            }
            else
            {
                if (AxisReach(RUN_PrePastePoint)
                    && TurnReach(VariableSys.dTurnXIAngle))//
                {
                    FlowInit = false;
                    FlowDoneIndex = FlowIndex;
                    FlowIndex = 20212;
                }

                if (!X.bAxisIsRunning || !Y.bAxisIsRunning)
                    XYGoPos(RUN_PrePastePoint, VariableSys.VelMode_Current);

                if (!this.TurnReach(VariableSys.dTurnXIAngle))
                    TurnGo(VariableSys.dTurnXIAngle, VariableSys.VelMode_Current);
            }

            if (StopWatch_FlowIndex.ElapsedMilliseconds > VariableSys.iTimeOut_Normal)
                this.AlarmInfoInvoke("步骤[贴标]20210:XY到抛料点超时", AlarmLevel.Warn);

            if (FlowIndex != 20211)
            {
                this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[贴标]20210:XY到抛料点时间:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
            }

            return true;
        }

        /// <summary>
        /// 到抛料高度
        /// </summary>
        /// <param name="zParam"></param>
        /// <param name="rParam"></param>
        /// <returns></returns>
        public bool DoThrow_GoThrowHeigh(List<uint> DropList)
        {
            // 20212
            if (!FlowInit)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    FlowIndex_Name = "Z go to throw paste height";
                }
                else
                {
                    FlowIndex_Name = "Z 到抛料贴料高度";
                }

                if (VariableSys.bEnableThrowPut)
                {
                    bool firstDrop = false;
                    if (DropList.Contains(0) || DropList.Contains(2))
                    {
                        this.Z_RunParamMap[0].GoPos(this.Z_RunParamMap[0].ThrowHeight, VariableSys.VelMode_Current);
                        this.Z_RunParamMap[0].XI_vaccum.ResetIO();
                        this.Z_RunParamMap[0].PO_vaccum.SetIO();
                        firstDrop = true;
                    }

                    if (DropList.Contains(2))
                    {
                        this.Z_RunParamMap[2].GoPos(this.Z_RunParamMap[2].ThrowHeight, VariableSys.VelMode_Current);
                        this.Z_RunParamMap[2].XI_vaccum.ResetIO();
                        this.Z_RunParamMap[2].PO_vaccum.SetIO();
                        firstDrop = true;
                    }

                    if (firstDrop)
                    {
                        Thread.Sleep(VariableSys.iThrowTime);
                    }

                    bool secendDrop = false;
                    if (DropList.Contains(1))
                    {
                        this.Z_RunParamMap[1].GoPos(this.Z_RunParamMap[1].ThrowHeight, VariableSys.VelMode_Current);
                        this.Z_RunParamMap[1].XI_vaccum.ResetIO();
                        this.Z_RunParamMap[1].PO_vaccum.SetIO();
                        secendDrop = true;
                    }

                    if (DropList.Contains(3))
                    {
                        this.Z_RunParamMap[3].GoPos(this.Z_RunParamMap[3].ThrowHeight, VariableSys.VelMode_Current);
                        this.Z_RunParamMap[3].XI_vaccum.ResetIO();
                        this.Z_RunParamMap[3].PO_vaccum.SetIO();
                        secendDrop = true;
                    }

                    if (secendDrop)
                    {
                        Thread.Sleep(VariableSys.iThrowTime);
                    }

                    this.FlowIndex = 20213;
                    this.FlowInit = false;
                    return true;
                }

                RestartStopwatch();
                FlowInit = true;
            }
            else
            {
                for (int i = 0; i < DropList.Count; ++i)
                {
                    this.Z_RunParamMap[DropList[i]].XI_vaccum.ResetIO();
                    this.Z_RunParamMap[DropList[i]].PO_vaccum.SetIO();
                }

                Thread.Sleep(VariableSys.iThrowTime);
                this.FlowIndex = 20213;
                this.FlowInit = false;
            }

            if (StopWatch_FlowIndex.ElapsedMilliseconds > VariableSys.iTimeOut_Normal)
                this.AlarmInfoInvoke("步骤[贴标]20211:Z1 到贴料高度超时", AlarmLevel.Warn);

            if (FlowIndex != 20212)
            {
                this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[贴标]20211:Z1 到贴料高度高度时间:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
            }
            return true;
        }

        /// <summary>
        /// 到安全高度
        /// </summary>
        /// <param name="zIndex"></param>
        /// <returns></returns>
        public bool DoThrow_GoSafeHeigh(List<uint> DropList)
        {
            // 20213
            if (!FlowInit)
            {
                FlowIndex_Name = "到安全高度";

                this.All_ZGoSafe(VariableSys.VelMode_Current);

                for (int i = 0; i < DropList.Count; ++i)
                    StatisticsHelper.Instance.Reoprt.DropPCS(DropList[i]);

                ZDTHelper.Instance.UpdateProdctRejectMessage();
                RestartStopwatch();
                FlowInit = true;
            }
            else
            {
                if (this.All_ZReachOrg())
                {
                    for (int i = 0; i < DropList.Count; ++i)
                    {
                        Z_RunParam zParam = this.Z_RunParamMap[DropList[i]];
                        zParam.XI_vaccum.ResetIO();
                        zParam.PO_vaccum.ResetIO();
                        zParam.RUN_dNozzleDownVisionED = 1;
                        zParam.CalFinished = false;
                        if (zParam.RUN_bNozzleUse && JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].iPasteED[zParam.RUN_PastePointIndex] == 0)
                            JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].iPasteED[zParam.RUN_PastePointIndex] = 0;

                        zParam.RUN_bNozzleUse = false;
                    }

                    bUpdateChart = true;
                    FlowInit = false;
                    FlowDoneIndex = FlowIndex;
                    FlowIndex = 20214;//
                }
                else
                {
                    this.All_ZGoSafe(VariableSys.VelMode_Current);
                }
            }
            if (StopWatch_FlowIndex.ElapsedMilliseconds > VariableSys.iTimeOut_Normal)
                this.AlarmInfoInvoke("步骤[贴标]20212:Z1 到安全高度超时", AlarmLevel.Warn);

            if (FlowIndex != 20213)
            {
                int haveAlam = -1;
                for (int i = 0; i < DropList.Count; ++i)
                {
                    Z_RunParam zParam = this.Z_RunParamMap[DropList[i]];
                    zParam.ThrowWarningCount++;
                    if (zParam.ThrowWarningCount >= VariableSys.iThrowAlarmTime)
                    {
                        haveAlam = (int)DropList[i];
                        zParam.ThrowWarningCount = 0;
                        zParam.ThrowLabelCount = 0;
                        zParam.SuckFailCount = 0;
                    }
                }

                if (haveAlam >= 0)
                    this.AlarmInfoInvoke($"步骤[贴标]20212:Z{haveAlam+1} 连续抛料超过设定次数", AlarmLevel.Alarm);

                int throwTotal = 0;
                for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
                {
                    throwTotal += this.Z_RunParamMap[i].ThrowLabelCount;
                }

                if (throwTotal > VariableSys.iThrowAlarmAddTime)
                {
                    this.AlarmInfoInvoke($"步骤[贴标]20212:Z{haveAlam + 1}累计抛料超过设定次数", AlarmLevel.Alarm);
                    for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
                    {
                        this.Z_RunParamMap[i].ThrowWarningCount = 0;
                        this.Z_RunParamMap[i].ThrowLabelCount = 0;
                        this.Z_RunParamMap[i].SuckFailCount = 0;
                    }
                }

                this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[贴标]20212:Z1 到安全高度时间:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
            }
            return true;
        }
        #endregion

        //todo 贴标动作
        #region 贴标动作
        /// <summary>
        /// 贴标-到贴标位
        /// </summary>
        /// <param name="zIndex"></param>
        /// <returns></returns>
        private bool DoPaste_GoPos(uint zIndex)
        {
            Z_RunParam zParam = this.Z_RunParamMap[zIndex];
            R_RunParam rParam = this.R_RunParamMap[zIndex];

            if (FlowInit == false)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    FlowIndex_Name = "NZ go to Paste point";
                }
                else
                {
                    FlowIndex_Name = "吸嘴XY到PASTE信息的贴附点";
                }

                RestartStopwatch();

                double angle = Feeder[zParam.RUN_Nozzle_FeederIndex - 1].Cam_Degree;

                RUN_PastePoint = this.CalPastePoint(zIndex, angle);
                if (RUN_PastePoint.X < VariableSys.dXSafeMinX || RUN_PastePoint.X > VariableSys.dXSafeMaxX)
                {
                    this.AlarmInfoInvoke("X轴贴服位置超过安全位置 请检查 选择的贴标吸嘴", AlarmLevel.Warn);
                    return false;
                }
                else
                {
                    XYGoPos(RUN_PastePoint, VariableSys.VelMode_Current);
                    PressSensorHelper.Instance.SendZeroAll();
                    TurnGo(VariableSys.dTurnPasteAngle, VariableSys.VelMode_Current);
                }

                rParam.GoPos(zParam.RUN_PasteRealAngle, VariableSys.VelMode_Current);
                uint nextZ = zIndex + 1;

                if (VariableSys.machineVersion == 2)
                {
                    if (nextZ < Variable.NOZZLE_NUM && this.Z_RunParamMap[nextZ].RUN_bNozzleUse)
                    {
                        double nextangle = RUN_PASTEInfo[this.Z_RunParamMap[nextZ].RUN_PasteInfoIndex_List].PasteAngle[this.Z_RunParamMap[nextZ].RUN_PastePointIndex];
                        this.R_RunParamMap[nextZ].GoPos(nextangle, VariableSys.VelMode_Current);
                    }
                }
            
                FlowInit = true;
            }
            else
            {
                if (rParam.AxisReach(zParam.RUN_PasteRealAngle)
                    && AxisReach(RUN_PastePoint)
                    && TurnReach(VariableSys.dTurnPasteAngle))
                {
                    FlowInit = false;
                    FlowDoneIndex = FlowIndex;
                    FlowIndex = 20312;
                }
                else
                {
                    if (!rParam.bAxisIsRunning)
                        rParam.GoPos(zParam.RUN_PasteRealAngle, VariableSys.VelMode_Current);

                    if (!X.bAxisIsRunning || !Y.bAxisIsRunning)
                        XYGoPos(RUN_PastePoint, VariableSys.VelMode_Current);

                    if (!Turn.bAxisIsRunning)
                        this.TurnGo(VariableSys.dTurnPasteAngle, VariableSys.VelMode_Current);
                }
            }
            if (StopWatch_FlowIndex.ElapsedMilliseconds > VariableSys.iTimeOut_Normal)
                this.AlarmInfoInvoke("步骤[贴标]20311:XY到PASTE信息的贴附点超时", AlarmLevel.Warn);

            if (FlowIndex != 20311)
            {
                this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[贴标]20311:XY到PASTE信息的贴附点时间:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
            }

            return true;
        }

        /// <summary>
        /// 贴标-到贴标高度
        /// </summary>
        /// <param name="zIndex"></param>
        /// <returns></returns>
        private bool DoPaste_PutDown(uint zIndex)
        {
            //20312
            Z_RunParam zParam = this.Z_RunParamMap[zIndex];

            if (FlowInit == false)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    FlowIndex_Name = "Z go to paste height";
                }
                else
                {
                    FlowIndex_Name = "Z 到贴料高度";
                }

                zParam.RUN_ZPos = RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].PasteHeight[zParam.RUN_PastePointIndex][(int)zIndex]
                    + zParam.PasteHeight;
                zParam.GoPos(zParam.RUN_ZPos, VariableSys.VelMode_Current);
                RestartStopwatch();
                FlowInit = true;
            }
            else
            {
                if (zParam.AxisReach(zParam.RUN_ZPos))// 达到动点
                {
                    zParam.XI_vaccum.ResetIO();
                    zParam.PO_vaccum.SetIO();

                    // 保压延时
                    Thread.Sleep(RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].Delay[zParam.RUN_PastePointIndex]);
                    FlowInit = false;
                    FlowDoneIndex = FlowIndex;
                    FlowIndex = 20313;
                }
                else
                {
                    zParam.GoPos(zParam.RUN_ZPos, VariableSys.VelMode_Current);
                }
            }

            if (StopWatch_FlowIndex.ElapsedMilliseconds > VariableSys.iTimeOut_Normal)
                this.AlarmInfoInvoke("步骤[贴标]20312:Z 到贴料高度超时", AlarmLevel.Warn);

            if (FlowIndex != 20312)
                this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[贴标]20312:Z 到贴料高度高度时间:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
            return true;
        }

        /// <summary>
        /// 贴标-到安全高度
        /// </summary>
        /// <param name="zIndex"></param>
        /// <returns></returns>
        private bool DoPaste_GoSafe(uint zIndex)
        {
            //20313
            Z_RunParam zParam = this.Z_RunParamMap[zIndex];

            if (FlowInit == false)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    FlowIndex_Name = "Z go safe height";
                }
                else
                {
                    FlowIndex_Name = "Z 到安全高度";
                }

                zParam.ThrowLabelCount = 0;
                RestartStopwatch();
                FlowInit = true;
                zParam.GoSafePos(VariableSys.VelMode_Current);
            }
            else
            {
                if (zParam.IsSafePos)//安全高度达到
                {
                    this.R_RunParamMap[zIndex].GoPos(0, VariableSys.VelMode_Current);

                    zParam.PO_vaccum.ResetIO();
                    zParam.CalFinished = false;
                    zParam.ThrowWarningCount = 0;

                    if (FeederHelper.Instance.FeederInfo[zParam.RUN_Nozzle_FeederIndex - 1].RemainCount > 0)
                        FeederHelper.Instance.FeederInfo[zParam.RUN_Nozzle_FeederIndex - 1].RemainCount--;

                    StatisticsHelper.Instance.Reoprt.ProductPCS(VariableSys.sProgramName);
                    if (PressSensorHelper.Instance.ShowPastePress((int)zIndex, zParam.RUN_PasteInfoIndex, zParam.RUN_PastePointIndex))
                    {
                        this.AlarmInfoInvoke($"吸嘴{zIndex + 1} 连续贴附超压,请确认贴附高度!!!", AlarmLevel.Warn);
                    }

                    zParam.RUN_dNozzleDownVisionED = 3;
                    zParam.RUN_LasteDownVisionED = 3;
                    zParam.RUN_LastFeederIndex = zParam.RUN_Nozzle_FeederIndex;
                    zParam.RUN_LastPasteIndex = zParam.RUN_PasteInfoIndex;
                    zParam.RUN_LastPastePoint = zParam.RUN_PastePointIndex;
                    zParam.RUN_bNozzleUse = false;
                    JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].iPasteED[zParam.RUN_PastePointIndex] = 1;
                    bUpdateChart = true;

                    FlowInit = false;
                    FlowDoneIndex = FlowIndex;
                    this.FlowIndex = 20310;
                }
                else
                {
                    zParam.GoSafePos(VariableSys.VelMode_Current);
                }
            }

            if (StopWatch_FlowIndex.ElapsedMilliseconds > VariableSys.iTimeOut_Normal)
                this.AlarmInfoInvoke("步骤[贴标]20313:Z 到安全高度超时", AlarmLevel.Warn);

            if (FlowIndex != 20313)
                this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[贴标]20313:Z 到安全高度时间:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
            return true;
        }

        #endregion

        #region 辅助函数
        private PointF XIPOINT_ = new PointF();

        /// <summary>
        /// 吸取坐标
        /// </summary>
        /// <param name="zIndex">吸嘴号</param>
        /// <param name="XI_Index">吸取位</param>
        /// <param name="feeder">Feeder</param>
        /// <returns></returns>
        public PointF GetNewXIPos(uint zIndex, int XI_Index, ref Variable.FEEDER feeder, bool enableAsyncXI = false)
        {
            var pt = this.Nz1ToOther(feeder.CamPoints[XI_Index], (int)zIndex);
            return pt;
        }

        public int GetRUNPasteIndex(int index)
        {
            for (int i = 0; i < RUN_PASTEInfo.Length; ++i)
            {
                if (JOB.PasteName[index] == RUN_PASTEInfo[i].PasteName)
                    return i;
            }

            return 0;
        }

        public int GetRUNPasteIndex(string name)
        {
            for (int i = 0; i < RUN_PASTEInfo.Length; ++i)
            {
                if (name == RUN_PASTEInfo[i].PasteName)
                    return i;
            }

            return 0;
        }

        /// <summary>
        /// 吸标动作优化
        /// </summary>
        /// <returns></returns>
        public List<uint> OpmiztionXI(ref short XI_Index, ref int[] bArrReach, ref Variable.FEEDER feeder, int feederIndex)
        {
            List<uint> xiIndex = new List<uint>();

            try
            {
                // 如果Feeder上无料就从第一个开始吸 或者 上一次吸得是最后一个
                if (bArrReach.Sum() == 0 || XI_Index >= feeder.PointCount)
                {
                    XI_Index = 0;
                }

                int labelCount = feeder.PointCount - XI_Index;
                int needLabelCount = 0;
                for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
                {
                    if (Z_RunParamMap[i].RUN_bNozzleUse && Z_RunParamMap[i].RUN_Nozzle_FeederIndex == feederIndex)
                    {
                        needLabelCount++;
                    }
                }
                bool labelNum = labelCount % 2 == 0; // 双数true 单数 false
                bool nozzleNum = needLabelCount % 2 == 0; // 双数true 单数false

                if (feeder.PointCount == 1 || needLabelCount <= labelCount || (labelNum && nozzleNum))
                {
                    for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
                    {
                        if (Z_RunParamMap[i].RUN_bNozzleUse && Z_RunParamMap[i].RUN_Nozzle_FeederIndex == feederIndex)
                        {
                            xiIndex.Add(i);
                            xiIndex.Add(i);
                        }
                    }
                }
                else
                {
                    for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
                    {
                        if (Z_RunParamMap[i].RUN_bNozzleUse && Z_RunParamMap[i].RUN_Nozzle_FeederIndex == feederIndex)
                        {
                            if (labelCount > 0)
                            {
                                xiIndex.Add(i);
                                xiIndex.Add(i);
                                labelCount--;
                            }
                            else
                            {
                                Z_RunParamMap[i].RUN_bNozzleUse = false;
                            }
                        }
                    }
                }
            }
            catch (Exception ex) { this.PutInLog($"吸标错误:{ex.Message}"); }

            return xiIndex;
        }
        #endregion

        #region 相机照BadMark
        /// <summary>
        /// 到 Badmark 读取位置
        /// </summary>
        /// <param name="pasteIndex">大板号</param>
        /// <param name="badmarkIndex">badmark 下标</param>
        /// <returns></returns>
        private bool DoCamBadMark_GoPos(int pasteIndex, int badmarkIndex)
        {
            if (FlowInit == false)
            {
                int runPasteIndex = this.GetRUNPasteIndex(pasteIndex);
                if (VariableSys.LanguageFlag == 1)
                {
                    FlowIndex_Name = "go to BadMark Position";
                }
                else
                {
                    FlowIndex_Name = "XY 到 Badmark 拍照位";
                }

                // 不启用 Badmark 或者说 该板已经认定为NG
                if (!RUN_PASTEInfo[runPasteIndex].BadMarkEN[badmarkIndex] || JOB.PASTEInfo[pasteIndex].iBadMarkED[badmarkIndex] != 0)
                {
                    this.FlowIndex = 20413;
                    this.FlowInit = false;
                    return true;
                }

                RUN_BadMarkPoint = RUN_PASTEInfo[runPasteIndex].BadMarkPoints[badmarkIndex];

                // 打光 曝光

                LightON_Up(RUN_PASTEInfo[runPasteIndex].bRed1
                    , RUN_PASTEInfo[runPasteIndex].bGreen1
                    , RUN_PASTEInfo[runPasteIndex].bBlue1
                    , RUN_PASTEInfo[runPasteIndex].dRedValue1
                    , RUN_PASTEInfo[runPasteIndex].dGreenValue1
                    , RUN_PASTEInfo[runPasteIndex].dBlueValue1);

                SetShutter((int)RUN_PASTEInfo[runPasteIndex].BadMark_Shutter, CAM.Top);

                RestartStopwatch();
                FlowInit = true;
                XYGoPos(RUN_BadMarkPoint, VariableSys.VelMode_Current);
                this.TurnGo(VariableSys.dTurnPasteAngle, VariableSys.VelMode_Current);
            }
            else
            {
                if (AxisReach(RUN_BadMarkPoint)
                    && !RUN_bPasteOK
                    && RUN_bReachOK
                    && this.TurnReach(VariableSys.dTurnPasteAngle))
                {
                    Thread.Sleep(VariableSys.iUpCamDelay);
                    CameraDefine.Instance[CAM.Top]._Session.Snap(ImageCapture_BadMark);

                    FlowInit = false;
                    FlowDoneIndex = FlowIndex;
                    FlowIndex = 20412;
                }
                else
                {
                    if (!X.bAxisIsRunning || !Y.bAxisIsRunning)
                        XYGoPos(RUN_BadMarkPoint, VariableSys.VelMode_Current);

                    if (!Turn.bAxisIsRunning)
                        this.TurnGo(VariableSys.dTurnPasteAngle, VariableSys.VelMode_Current);
                }
            }

            if (FlowIndex != 20411)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "Step[Mark]20411:go to Mark time:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
                }
                else
                {
                    this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[Mark]20411:XY 到 PASTE 信息的 BadMark 时间:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
                }
            }

            return true;
        }

        /// <summary>
        /// 计算 Badmark 是否通过
        /// </summary>
        /// <param name="pasteIndex">大板号</param>
        /// <param name="badmarkIndex">badmark 下标</param>
        /// <returns></returns>
        private bool DoCamBadMark_Photo(int pasteIndex, int badmarkIndex)
        {
            if (!FlowInit)
            {

                if (VariableSys.LanguageFlag == 1)
                {
                    FlowIndex_Name = "capture Badmark";
                }
                else
                {
                    FlowIndex_Name = "上视觉拍照（Badmark）";
                }

                RestartStopwatch();
                FlowInit = true;
            }
            else
            {
                int runPasteIndex = this.GetRUNPasteIndex(pasteIndex);

                #region 面积算法
                if (RUN_PASTEInfo[runPasteIndex].BadMark_AlgthrimIndex == 1)//面积算法
                {
                    bool AreaWhite = false;
                    if (RUN_PASTEInfo[runPasteIndex].ISBadMarkWhite == 0 || RUN_PASTEInfo[runPasteIndex].ISBadMarkWhite == 2)
                    {
                        AreaWhite = true;
                    }
                    else
                    {
                        AreaWhite = false;
                    }
                    int Area = AreaCount(ImageCapture_BadMark,
                        new Roi(new RectangleContour(RUN_PASTEInfo[runPasteIndex].BadMark_ROI_Left,
                        RUN_PASTEInfo[runPasteIndex].BadMark_ROI_Top,
                        RUN_PASTEInfo[runPasteIndex].BadMark_ROI_Width,
                        RUN_PASTEInfo[runPasteIndex].BadMark_ROI_Height)), AreaWhite);

                    if (RUN_PASTEInfo[runPasteIndex].ISBadMarkWhite == 0
                        || RUN_PASTEInfo[runPasteIndex].ISBadMarkWhite == 1)
                    {
                        if (Area < RUN_PASTEInfo[runPasteIndex].BadMark_LimtArea)//BADMARK
                        {
                            for (int i = 0; i < RUN_PASTEInfo[runPasteIndex].PastePoints.Length; i++)
                            {
                                if (RUN_PASTEInfo[runPasteIndex].PastePN[badmarkIndex] == RUN_PASTEInfo[runPasteIndex].PastePN[i])
                                {
                                    JOB.PASTEInfo[pasteIndex].iPasteED[i] = 1;
                                    JOB.PASTEInfo[pasteIndex].iBadMarkED[i] = 2;
                                }
                            }

                            this.ShowVisionStatus(0, false, ImageCapture_BadMark, false);
                        }
                        else//好的
                        {
                            for (int i = 0; i < RUN_PASTEInfo[runPasteIndex].PastePoints.Length; i++)
                            {
                                if (RUN_PASTEInfo[runPasteIndex].PastePN[badmarkIndex] == RUN_PASTEInfo[runPasteIndex].PastePN[i])
                                {
                                    JOB.PASTEInfo[pasteIndex].iBadMarkED[i] = 1;
                                }
                            }
                            this.ShowVisionStatus(0, true, ImageCapture_BadMark);
                        }
                    }
                    else
                    {
                        if (Area > RUN_PASTEInfo[runPasteIndex].BadMark_LimtArea)//BADMARK
                        {
                            for (int i = 0; i < RUN_PASTEInfo[runPasteIndex].PastePoints.Length; i++)
                            {
                                if (RUN_PASTEInfo[runPasteIndex].PastePN[badmarkIndex] == RUN_PASTEInfo[runPasteIndex].PastePN[i])
                                {
                                    JOB.PASTEInfo[pasteIndex].iPasteED[i] = 1;
                                    JOB.PASTEInfo[pasteIndex].iBadMarkED[i] = 2;
                                }
                            }
                            this.ShowVisionStatus(0, false, ImageCapture_BadMark, false);
                        }
                        else//好的
                        {
                            for (int i = 0; i < RUN_PASTEInfo[runPasteIndex].PastePoints.Length; i++)
                            {
                                if (RUN_PASTEInfo[runPasteIndex].PastePN[badmarkIndex] == RUN_PASTEInfo[runPasteIndex].PastePN[i])
                                {
                                    JOB.PASTEInfo[pasteIndex].iBadMarkED[i] = 1;
                                }
                            }
                            this.ShowVisionStatus(0, true, ImageCapture_BadMark);
                        }
                    }
                }
                #endregion
                #region 匹配算法
                else if (RUN_PASTEInfo[runPasteIndex].BadMark_AlgthrimIndex == 2)//匹配算法
                {
                    Variable.CamReturn a = new Variable.CamReturn();

                    RectangleContour rect = new RectangleContour(RUN_PASTEInfo[runPasteIndex].BadMark_ROI_Left, RUN_PASTEInfo[runPasteIndex].BadMark_ROI_Top, RUN_PASTEInfo[runPasteIndex].BadMark_ROI_Width, RUN_PASTEInfo[runPasteIndex].BadMark_ROI_Height);

                    short rtnBadMark = CamDetect_PatternMatch(ImageCapture_BadMark, RUN_PASTEInfo[runPasteIndex].BadMark_Image, (float)RUN_PASTEInfo[runPasteIndex].BadMark_Score, 1, (float)RUN_PASTEInfo[runPasteIndex].BadMark_MinAngle, (float)RUN_PASTEInfo[runPasteIndex].BadMark_MaxAngle, rect.ConvertToRoi(), ref a, 0, 0);

                    if (rtnBadMark != 0)//BADMARK
                    {
                        for (int i = 0; i < RUN_PASTEInfo[runPasteIndex].PastePoints.Length; i++)
                        {
                            if (RUN_PASTEInfo[runPasteIndex].PastePN[badmarkIndex] == RUN_PASTEInfo[runPasteIndex].PastePN[i])
                            {
                                JOB.PASTEInfo[pasteIndex].iPasteED[i] = 1;
                                JOB.PASTEInfo[pasteIndex].iBadMarkED[i] = 2;
                            }
                        }

                        this.ShowVisionStatus(0, false, ImageCapture_BadMark, false);
                    }
                    else//好的
                    {
                        for (int i = 0; i < RUN_PASTEInfo[runPasteIndex].PastePoints.Length; i++)
                        {
                            if (RUN_PASTEInfo[runPasteIndex].PastePN[badmarkIndex] == RUN_PASTEInfo[runPasteIndex].PastePN[i])
                            {
                                JOB.PASTEInfo[pasteIndex].iBadMarkED[i] = 1;
                            }
                        }
                        this.ShowVisionStatus(0, true, ImageCapture_BadMark);
                    }
                }
                #endregion

                this.FlowIndex = 20413;
                this.FlowInit = false;
            }

            return true;
        }

        #endregion

        #region 相机照Mark
        /// <summary>
        /// 相机到 Mark 点
        /// </summary>
        /// <param name="pasteIndex">大板号</param>
        /// <param name="markIndex">mark 点序号</param>
        /// <returns></returns>
        private bool DoCamMark_GoPos(int pasteIndex, int markIndex)
        {
            if (FlowInit == false)
            {
                int runPasteIndex = this.GetRUNPasteIndex(pasteIndex);

                if (VariableSys.LanguageFlag == 1)
                {
                    FlowIndex_Name = "go to Mark2";
                }
                else
                {
                    FlowIndex_Name = "XY到PASTE信息的Mark";
                }

                if (markIndex == 0)
                {
                    RUN_Mark1Point = JOB.Cam_Mark1Point[pasteIndex];

                    // 打光 曝光
                    LightON_Up_PASTE1(ref RUN_PASTEInfo[runPasteIndex]);
                    SetShutter((int)RUN_PASTEInfo[runPasteIndex].Shutter1, CAM.Top);
                }
                else
                {
                    RUN_Mark1Point = JOB.Cam_Mark2Point[pasteIndex];
                    // 打光 曝光
                    LightON_Up_PASTE2(ref RUN_PASTEInfo[runPasteIndex]);
                    SetShutter((int)RUN_PASTEInfo[runPasteIndex].Shutter2, CAM.Top);
                }

                RestartStopwatch();
                FlowInit = true;
                XYGoPos(RUN_Mark1Point, VariableSys.VelMode_Current);
                this.TurnGo(VariableSys.dTurnPasteAngle, VariableSys.VelMode_Current);
            }
            else
            {
                if (AxisReach(RUN_Mark1Point)
                    && !RUN_bPasteOK
                    && RUN_bReachOK
                    && this.TurnReach(VariableSys.dTurnPasteAngle))
                {
                    FlowInit = false;
                    FlowDoneIndex = FlowIndex;
                    FlowIndex = 20113;
                }
                else
                {
                    if (!X.bAxisIsRunning || !Y.bAxisIsRunning)
                        XYGoPos(RUN_Mark1Point, VariableSys.VelMode_Current);

                    if (!Turn.bAxisIsRunning)
                        this.TurnGo(VariableSys.dTurnPasteAngle, VariableSys.VelMode_Current);
                }
            }

            if (FlowIndex != 20112)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "Step[Mark]20112:go to Mark time:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
                }
                else
                {
                    this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[Mark]20112:XY 到 PASTE 信息的Mark 时间:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
                }
            }

            return true;
        }

        /// <summary>
        /// 相机计算 Mark 点
        /// </summary>
        /// <param name="pasteIndex">大板号</param>
        /// <param name="markIndex">mark 点序号</param>
        /// <returns></returns>
        private bool DoCamMark_Photo(int pasteIndex, int markIndex)
        {
            if (!FlowInit)
            {
                FlowIndex_Name = "上视觉拍照（MARK1）";
                RestartStopwatch();
                FlowInit = true;
            }
            else
            {
                if (AxisReach(RUN_Mark1Point))
                {
                    Thread.Sleep(VariableSys.iUpCamDelay);
                    try
                    {
                        int runPasteIndex = this.GetRUNPasteIndex(pasteIndex);
                        ImageCapture_Up1?.Dispose();
                        ImageCapture_Up1 = new VisionImage();
                        CameraDefine.Instance[CAM.Top]._Session.Snap(ImageCapture_Up1);
                        FlowInit = false;
                        FlowDoneIndex = FlowIndex;
                        //上视觉拍照次数 

                        if (markIndex == 0)
                        {
                            UpCCDResult[markIndex] = Auto_Detect1(ref RUN_PASTEInfo[runPasteIndex], ImageCapture_Up1, 0);
                            JOB.UpCCDResult1[pasteIndex] = UpCCDResult[markIndex];
                        }
                        else
                        {
                            UpCCDResult[markIndex] = Auto_Detect2(ref RUN_PASTEInfo[runPasteIndex], ImageCapture_Up1);
                            var pt = this.Point2CCDCenter(JOB.Cam_Mark2Point[pasteIndex],
                                new PointContour(UpCCDResult[markIndex].X, UpCCDResult[markIndex].Y), CAM.Top,0);
                            JOB.UpCCDResult2[pasteIndex] = UpCCDResult[markIndex]; ;
                        }

                        //更新
                        this.ShowVisionStatus(0, UpCCDResult[markIndex].IsOK, ImageCapture_Up1, UpCCDResult[markIndex].IsOK);

                        if (UpCCDResult[markIndex].IsOK)
                        {
                            JOB.iUpCCDResult[pasteIndex] = 1;
                            if (markIndex == 0)
                                JOB.PASTEInfo[pasteIndex].bMark1ED = true;
                            else
                                JOB.PASTEInfo[pasteIndex].bMark2ED = true;

                            FlowIndex = 20114;
                        }
                        else //计算NG
                        {
                            if (JOB.bLocalMode && JOB.iLocalAlign == 1)
                                this.EnableAppointMark = false;
                            else
                                this.EnableAppointMark = true;

                            this.AlarmInfoInvoke("Mark 点侦测失败!!!请出板清料，重新开始!!!", AlarmLevel.Err);

                            if (false)
                            {
                                #region 手动指定Mark点
                                short rtn = (short)this.Invoke(new VoidDO_Str(AlarmInfoFindMark), new object[] { "Mark点 侦测失败 是否手动指定Mark点 Yes:指定 No:忽略 Cancel:暂停" });//
                                if (rtn == 1) //! 等待指定Mark
                                {
                                    while (this.NeedAppointMark && RunMode == 1)
                                    {
                                        Thread.Sleep(10);
                                    }

                                    if (markIndex == 0)
                                    {
                                        JOB.UpCCDResult1[pasteIndex].Angle = 0;
                                        JOB.UpCCDResult1[pasteIndex].IsOK = UpCCDResult[markIndex].IsOK = true;
                                        JOB.UpCCDResult1[pasteIndex].X = appointMark.X;
                                        JOB.UpCCDResult1[pasteIndex].Y = appointMark.Y;
                                        JOB.iUpCCDResult[pasteIndex] = 1;
                                        JOB.PASTEInfo[pasteIndex].bMark1ED = true;
                                    }
                                    else
                                    {
                                        JOB.UpCCDResult2[pasteIndex].Angle = 0;
                                        JOB.UpCCDResult2[pasteIndex].IsOK = UpCCDResult[markIndex].IsOK = true;
                                        JOB.UpCCDResult2[pasteIndex].X = appointMark.X;
                                        JOB.UpCCDResult2[pasteIndex].Y = appointMark.Y;
                                        JOB.iUpCCDResult[pasteIndex] = 1;
                                        JOB.PASTEInfo[pasteIndex].bMark2ED = true;
                                    }

                                    FlowIndex = 20114;
                                }
                                else //! 忽略该Mark点
                                {
                                    FlowIndex = 20114;
                                    if (markIndex == 0)
                                        JOB.PASTEInfo[pasteIndex].bMark1ED = true;
                                    else
                                        JOB.PASTEInfo[pasteIndex].bMark2ED = true;

                                    JOB.iUpCCDResult[pasteIndex] = 2;
                                }
                                #endregion
                            }
                            else
                            {
                                FlowIndex = 20114;
                                if (markIndex == 0)
                                    JOB.PASTEInfo[pasteIndex].bMark1ED = true;
                                else
                                    JOB.PASTEInfo[pasteIndex].bMark2ED = true;

                                JOB.iUpCCDResult[pasteIndex] = 2;
                                for (int i = 0; i < Form_Main.Instance.JOB.PASTEInfo[pasteIndex].iPasteED.Length; ++i)
                                {
                                    Form_Main.Instance.JOB.PASTEInfo[pasteIndex].iPasteED[i] = 1;
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                    }
                }
            }
            if (FlowIndex != 20113)
            {
                this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[贴标]10290:上视觉拍照（MARK1）拍照1时间:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
            }

            return true;
        }

        /// <summary>
        /// 该贴服位置Mark点失败，重新照下一个吸嘴能贴服的点
        /// </summary>
        /// <param name="zIndex">吸嘴号</param>
        /// <returns>是否找到下一个贴附位</returns>
        private bool FindNextCanPastePoint(uint zIndex)
        {
            Z_RunParam zParam = this.Z_RunParamMap[zIndex];

            // 重新分配
            for (int i = 0; i < JOB.PasteCount; i++)//
            {
                if (JOB.iUpCCDResult[i] == 1) //拍完上视觉结果OK且贴附未完成
                {
                    for (int j = 0; j < RUN_PASTEInfo.Length; j++)
                    {
                        if (JOB.PasteName[i] == RUN_PASTEInfo[j].PasteName)
                        {
                            for (int k = 0; k < RUN_PASTEInfo[j].PastePoints.Length; k++)
                            {
                                bool find = false;

                                if (JOB.bLocalMode)
                                    find = JOB.UsedNz[i] == (zIndex + 1);
                                else
                                    find = RUN_PASTEInfo[j].NozzleIndex[k] == (zIndex + 1);

                                if (find && JOB.PASTEInfo[i].iPasteED[k] == 0)
                                {
                                    zParam.RUN_PasteInfoIndex = (short)i;//当次左吸嘴在贴第几块板子
                                    zParam.RUN_PastePointIndex = (short)k;
                                    zParam.RUN_PasteInfoIndex_List = (short)j;
                                    return true;
                                }
                            }
                        }
                    }
                }
            }

            return false;
        }

        /// <summary>
        /// 寻找下一个可贴服的吸嘴 0 : Success 1:wait down finished -1: Fail
        /// </summary>
        /// <param name="dir">寻找方向  true 正向 false 负向</param>
        /// <param name="zIndex">Z轴号</param>
        /// <returns>0 : Success 1:wait down finished -1: Fail</returns>
        private int FindNextPasteNozzle(bool dir, out uint zIndex)
        {
            int index = 0;
            zIndex = 0;
            int step = 1;
            if (!dir)
            {
                index = Variable.NOZZLE_NUM - 1;
                step = -1;
            }

            for (; index < Variable.NOZZLE_NUM && index >= 0; index += step)
            {
                Z_RunParam zParam = this.Z_RunParamMap[(uint)index];
                if (zParam.RUN_PasteInfoIndex != -1 && zParam.RUN_bNozzleUse && JOB.bCalMark) // 吸嘴可用 且 上视觉成功 且 板子
                {
                    if (!zParam.CalFinished) //等待 下视觉计算完成
                    {
                        return 1;
                    }

                    if (zParam.RUN_dNozzleDownVisionED == 2) // 下视觉成功
                    {
                        if (JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].iPasteED[zParam.RUN_PastePointIndex] == 0
                            && JOB.iUpCCDResult[zParam.RUN_PasteInfoIndex] == 1) // 可直接贴服
                        {
                            zIndex = (uint)index;
                            return 0;
                        }
                        else // 已被Badmark
                        {
                            if (this.FindNextCanPastePoint((uint)index)) // 找到下一个可贴服点
                            {
                                zIndex = (uint)index;
                                return 0;
                            }
                            else
                            {
                                zParam.RUN_dNozzleDownVisionED = 4; // 抛掉
                            }
                        }
                    }
                }
            }

            return -1; // not found
        }

        /// <summary>
        /// 寻找下一个可抛的料 0 : Success 1:wait down finished -1: Fail
        /// </summary>
        /// <param name="dir">寻找方向</param>
        /// <param name="zIndex">Z轴号</param>
        /// <returns>0 : Success 1:wait down finished -1: Fail</returns>
        private int FindNextDropNozzle(bool dir, out List<uint> dropList)
        {
            int index = 0;
            int step = 1;
            dropList = new List<uint>();
            if (!dir)
            {
                index = Variable.NOZZLE_NUM - 1;
                step = -1;
            }

            for (; index < Variable.NOZZLE_NUM && index >= 0; index += step)
            {
                Z_RunParam zParam = this.Z_RunParamMap[(uint)index];
                if (zParam.RUN_bNozzleUse)
                {
                    if (zParam.RUN_dNozzleDownVisionED == 4)
                    {
                        if (VariableSys.bEnableAsyncXI)
                        {
                            dropList.Add(0);
                            dropList.Add(1);
                            dropList.Add(2);
                            dropList.Add(3);
                            return 0;
                        }

                        dropList.Add((uint)index);
                    }
                }
                else if (zParam.RUN_dNozzleDownVisionED == 5)
                {
                    if (VariableSys.bEnableAsyncXI)
                    {
                        dropList.Add(0);
                        dropList.Add(1);
                        dropList.Add(2);
                        dropList.Add(3);
                        return 0;
                    }

                    dropList.Add((uint)index);
                }
            }

            if (dropList.Count == 0)
            {
                return -1; // not found
            }

            return 0; // found finished
        }
        #endregion

        #region 相机照Global Mark
        private void DoGoGlobalMark(int GloablIndex)
        {
            if (!FlowInit)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    FlowIndex_Name = "go to Mark";
                }
                else
                {
                    FlowIndex_Name = "XY到PASTE信息的Mark";
                }
                RestartStopwatch();

                try
                {
                    // 打光 曝光
                    LightON_Up(JOB.GlobalConfig.Mark[GloablIndex].Light);
                    this.SetShutter(JOB.GlobalConfig.Mark[GloablIndex].Exp, CAM.Top);
                }
                catch { }

                XYGoPos(JOB.GlobalConfig.Mark[GloablIndex].CamPos, VariableSys.VelMode_Current);
                FlowInit = true;
            }
            else
            {
                if (AxisReach(JOB.GlobalConfig.Mark[GloablIndex].CamPos)
                    && !RUN_bPasteOK
                    && RUN_bReachOK)
                {
                    FlowInit = false;
                    FlowDoneIndex = FlowIndex;
                    FlowIndex = 20102;
                }
                else
                {
                    if (!X.bAxisIsRunning || !Y.bAxisIsRunning)
                    {
                        XYGoPos(JOB.GlobalConfig.Mark[GloablIndex].CamPos, VariableSys.VelMode_Current);
                    }
                }
            }

            if (FlowIndex != 20101)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "Step[Mark]10510:go to Mark time:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
                }
                else
                {
                    this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[Mark]10510:XY 到 PASTE 信息的Mark 时间:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
                }
            }
        }

        public RectangleContour string2Roi(string roi)
        {
            RectangleContour rect = new RectangleContour();

            try
            {
                var arr = roi.Split(',');
                rect.Top = double.Parse(arr[0]);
                rect.Left = double.Parse(arr[1]);
                rect.Width = double.Parse(arr[2]);
                rect.Height = double.Parse(arr[3]);
            }
            catch { }

            return rect;
        }

        private void DoCalGlobalMark(int GloablIndex)
        {
            if (!FlowInit)
            {
                FlowIndex_Name = "上视觉拍照（MARK1）";
                RestartStopwatch();
                FlowInit = true;
            }
            else
            {
                if ((StopWatch_FlowIndex.ElapsedMilliseconds > VariableSys.iUpCamDelay))
                {
                    try
                    {
                        CameraDefine.Instance[CAM.Top]._Session.Grab(ImageCapture_Up1, false);
                        FlowInit = false;
                        FlowDoneIndex = FlowIndex;
                        //上视觉拍照次数 
                        ImageCapture_Up1 = Form_Main.Instance.GainOffset(ImageCapture_Up1, JOB.GlobalConfig.Mark[GloablIndex].Gain, JOB.GlobalConfig.Mark[GloablIndex].Offset);
                        RectangleContour roi = this.string2Roi(JOB.GlobalConfig.Mark[GloablIndex].ROI);
                        PointContour A = new PointContour();
                        double r = 0;
                        short rtn = CamDetect_Circle(ImageCapture_Up1, roi.ConvertToRoi(), JOB.GlobalConfig.Mark[GloablIndex].MinR, JOB.GlobalConfig.Mark[GloablIndex].MaxR, ref A, ref r);

                        //更新
                        this.ShowVisionStatus(0, rtn == 0, ImageCapture_Up1);

                        if (rtn == 0)
                        {
                            PointF mark = Point2CCDCenter(JOB.GlobalConfig.Mark[GloablIndex].CamPos, A, CAM.Top ,0);
                            GlobalMark[GloablIndex].X = mark.X;
                            GlobalMark[GloablIndex].Y = mark.Y;
                            GlobalMark[GloablIndex].IsOK = true;
                        }
                        else
                        {
                            if (this.EnableAppointMark)
                            {
                                this.AlarmInfoInvoke("Mark点 侦测失败请清料,暂停出板", AlarmLevel.Alarm);
                                #region 手动指定Mark点
                                //short result = this.AlarmInfoInvoke("Mark点 侦测失败 是否手动指定Mark点", AlarmLevel.Alarm);

                                //if (result == 1) //! 等待指定Mark
                                //{
                                //    while (this.NeedAppointMark && RunMode == 1)
                                //    {
                                //        Thread.Sleep(10);
                                //    }

                                //    GlobalMark[GloablIndex].X = appointMark.X;
                                //    GlobalMark[GloablIndex].Y = appointMark.Y;
                                //    GlobalMark[GloablIndex].IsOK = true;
                                //}
                                //else //! 出板
                                //{
                                // this.AlarmInfoInvoke("Mark点 侦测失败请暂停出板", AlarmLevel.Alarm);
                                //}
                                #endregion
                            }
                        }
                        this.FlowInit = false;
                        this.FlowIndex = 20103;
                    }
                    catch { }
                }
            }

            if (FlowIndex != 20102)
                this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[贴标]20102:上视觉拍照（MARK1）拍照1时间:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
        }
        #endregion

        #region 相机照条码
        private void GoReadCodePos(ReadCodeBean codeBean, ref string code, int nextIndex)
        {
            if (!this.FlowInit)
            {
                FlowIndex_Name = "到读码位置";
                RestartStopwatch();
                this.XYGoPos(codeBean.BarcodePos, VariableSys.VelMode_Current);
                this.TurnGo(VariableSys.dTurnPasteAngle, VariableSys.VelMode_Current);
                codeBean.OpenLight();

                this.SetShutter((int)codeBean.Shutter, CAM.Top);
                FlowInit = true;
            }
            else
            {
                if (this.AxisReach(codeBean.BarcodePos) && RUN_bReachOK
                    && this.TurnReach(VariableSys.dTurnPasteAngle))
                {
                    Thread.Sleep(VariableSys.iUpCamDelay);
                    CameraDefine.Instance[CAM.Top]._Session.Grab(ImageCapture_Up1, false);
                    for (int i = 0; i < codeBean.Cycle; ++i)
                        ImageCapture_Up1 = this.GainOffset(ImageCapture_Up1, codeBean.Gain, codeBean.Offset);
                    code = ReadCodeHelper.ReadCode(ImageCapture_Up1, codeBean.ROI.ConvertToRoi(), codeBean.CodeType);
                    ImageCapture_Up1.Overlays.Default.AddText(RUN_BadmarkCode, new PointContour(500, 500), Rgb32Value.BlueColor, new OverlayTextOptions("Consolas", 60));

                    Algorithms.Copy(ImageCapture_Up1, imageUp.Image);

                    this.FlowIndex = nextIndex;
                    this.FlowInit = false;
                }
                else
                {
                    this.XYGoPos(codeBean.BarcodePos, VariableSys.VelMode_Current);
                    this.TurnGo(VariableSys.dTurnPasteAngle, VariableSys.VelMode_Current);
                }
            }
        }
        #endregion

        #region 下视觉光源设置
        public void SetLightAndShutter()
        {
            Task.Factory.StartNew(() =>
            {
                bool lighton = false;
                if (Z_RunParamMap[0].RUN_bNozzleUse || Z_RunParamMap[0].RUN_dNozzleDownVisionED == 3)
                {
                    this.SetShutter((int)Feeder[Z_RunParamMap[0].RUN_Nozzle_FeederIndex - 1].Label.Shutter1, CAM.Bottom1);
                    if (!lighton)
                        this.LightON_Down_PASTE1(ref Feeder[Z_RunParamMap[0].RUN_Nozzle_FeederIndex - 1].Label);
                    lighton = true;
                }
                else if (Z_RunParamMap[1].RUN_bNozzleUse || Z_RunParamMap[1].RUN_dNozzleDownVisionED == 3)
                {
                    this.SetShutter((int)Feeder[Z_RunParamMap[1].RUN_Nozzle_FeederIndex - 1].Label.Shutter1, CAM.Bottom1);
                    if (!lighton)
                        this.LightON_Down_PASTE1(ref Feeder[Z_RunParamMap[1].RUN_Nozzle_FeederIndex - 1].Label);
                    lighton = true;
                }

                if (Z_RunParamMap[2].RUN_bNozzleUse || Z_RunParamMap[2].RUN_dNozzleDownVisionED == 3)
                {
                    this.SetShutter((int)Feeder[Z_RunParamMap[2].RUN_Nozzle_FeederIndex - 1].Label.Shutter1, CAM.Bottom2);
                    if (!lighton)
                        this.LightON_Down_PASTE1(ref Feeder[Z_RunParamMap[2].RUN_Nozzle_FeederIndex - 1].Label);
                    lighton = true;
                }
                else if (Z_RunParamMap[3].RUN_bNozzleUse || Z_RunParamMap[3].RUN_dNozzleDownVisionED == 3)
                {
                    this.SetShutter((int)Feeder[Z_RunParamMap[3].RUN_Nozzle_FeederIndex - 1].Label.Shutter1, CAM.Bottom2);
                    if (!lighton)
                        this.LightON_Down_PASTE1(ref Feeder[Z_RunParamMap[3].RUN_Nozzle_FeederIndex - 1].Label);
                    lighton = true;
                }
            });

        }
        #endregion

        #region 回拍检测
        /// <summary>
        /// 回拍线程
        /// </summary>
        public Task<string> CheckLabelTask = null;

        /// <summary>
        /// 回拍图片
        /// </summary>
        public VisionImage[] RUN_CheckLabelImg = new VisionImage[2];

        /// <summary>
        /// 图片是否计算过
        /// </summary>
        public bool[] RUN_CheckLabelCaled = new bool[2];

        /// <summary>
        /// 是否有沾料
        /// </summary>
        /// <param name="label">视觉方法</param>
        /// <param name="image">图片</param>
        /// <param name="nozzle">吸嘴</param>
        /// <returns></returns>
        public bool LabelAreaCheck(ref Variable.PASTAE label, uint nozzle)
        {
            uint index = nozzle / 2;
            if (!this.RUN_CheckLabelCaled[index])
            {
                this.RUN_CheckLabelImg[index] = GainOffset(this.RUN_CheckLabelImg[index], label.GainInit1, label.OffsetInit1);
                this.RUN_CheckLabelCaled[index] = true;
            }

            int areacount = AreaCount(this.RUN_CheckLabelImg[index], VariableSys.rDownROI[(int)nozzle].ConvertToRoi(), label.iAreaOKStyle1 == 1);

            if (areacount > (label.iAreaMin1 / 2))
                return true;
            else
                return false;
        }

        private void CheckLabel()
        {
            #region 真空加视觉检测
            CheckLabelTask = Task<string>.Factory.StartNew(() =>
            {
                string nzHabelLabel = string.Empty;
                for (uint nz = 0; nz < Variable.NOZZLE_NUM; ++nz)
                {
                    if (this.Z_RunParamMap[nz].RUN_LasteDownVisionED == 3
                    && this.Z_RunParamMap[nz].RUN_LastFeederIndex > 0)
                    {
                        this.Z_RunParamMap[nz].RUN_LasteDownVisionED = 0;
                        if (this.LabelAreaCheck(
                            ref this.Feeder[this.Z_RunParamMap[nz].RUN_LastFeederIndex - 1].Label
                            , nz))
                        {
                            nzHabelLabel += $"吸嘴{nz + 1},";
                            JOB.PASTEInfo[this.Z_RunParamMap[nz].RUN_LastPasteIndex].iPasteED[this.Z_RunParamMap[nz].RUN_LastPastePoint] = 0;
                        }
                    }
                }

                LightOFF_D();
                return nzHabelLabel;
            });
            #endregion
        }

        #endregion

        #region 线程及线程使用的函数
        private void thread_Main()//主流程//自动流程
        {
            string alarm = string.Empty;
            while (!bSystemExit)
            {
                Thread.Sleep(1);
                // 未登陆状态
                if (Variable.PassWordOK == 0 || Variable.PassWordOK == 1)
                {
                    continue;
                }

                // 暂停状态
                if (this.RunMode != 1)
                {
                    Thread.Sleep(100);
                    continue;
                }

                try
                {
                    #region 检测伺服报警
                    if (alarm != string.Empty)
                    {
                        alarm = string.Empty;
                    }

                    if (X.bAxisServoWarning)
                    {
                        alarm = "X";
                    }
                    else if (Y.bAxisServoWarning)
                    {
                        alarm = "Y";
                    }
                    else if (Turn.bAxisServoWarning)
                    {
                        alarm = "Turn";
                    }

                    for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
                    {
                        if (this.Z_RunParamMap[i].bAxisServoWarning)
                        {
                            alarm = string.Format("Z{0}", i + 1); break;
                        }

                        if(this.R_RunParamMap[i].bAxisServoWarning)
                        {
                            alarm = string.Format($"R{i + 1}");break;
                        }
                    }

                    if (alarm != string.Empty)
                    {
                        this.AlarmInfoInvoke($"{alarm}轴 伺服报警,请重新复位...", AlarmLevel.Err);
                        Thread.Sleep(200);
                        continue;
                    }

                    #endregion
                    #region 检测是否到达极限
                    if (X.bPosLimit || X.bNegLimit)
                    {
                        alarm = "X";
                    }
                    else if (Y.bNegLimit || Y.bNegLimit)
                    {
                        alarm = "Y";
                    }

                    if (alarm != string.Empty)
                    {
                        StopAllAxis();
                        this.AlarmInfoInvoke($"{alarm} 轴到达极限,请重新复位...", AlarmLevel.Err);
                        Thread.Sleep(200);
                        continue;
                    }
                    #endregion

                    #region 检测安全门是否打开
                    if (VariableSys.bSafeDoorEN)//安全门非屏蔽下
                    {
                        if (!bArr_IO_IN_Status.bIN_SafeDoor.GetIO() || !bArr_IO_IN_Status.bIN_SafeGrant.GetIO())//门打开
                        {
                            StopAllAxis(false);
                            this.AlarmInfoInvoke("安全门打开，请关闭安全门后重新复位运行！", AlarmLevel.Tips);
                            FlowIndex = FlowDoneIndex;
                            FlowInit = false;
                            Thread.Sleep(200);
                            continue;
                        }
                    }

                    #endregion

                    #region 缺料检测报警-当余量 = 0 的时候 背胶自动更新
                    if (ZDTHelper.Instance.BJZS_Config.EnableAlarmCount)
                    {
                        if (FlowIndex == 10000)
                        {
                            for (int i = 0; i < 2; ++i)
                            {
                                if (FeederHelper.Instance.FeederInfo[i].IfAlarm)
                                {
                                    this.AlarmInfoInvoke($"Feeder{i + 1}编号: {ZDTHelper.Instance.BJZS_Config.FeederID} 缺料请上料!!!", AlarmLevel.Warn);
                                    FlowIndex = FlowDoneIndex;
                                    FlowInit = false;
                                    Thread.Sleep(200);
                                    RunMode = 0;
                                    continue;
                                }
                            }
                        }
                    }
                    #endregion

                    #region 物料时间管控检测
                    if (ZDTHelper.Instance.BJZS_Config.EnableAlarmHour)
                    {
                        for (int i = 0; i < 2; i++)
                        {
                            TimeSpan span = FeederHelper.Instance.FeederInfo[i].BeginUserTime.AddHours(ZDTHelper.Instance.BJZS_Config.AlarmHour) - DateTime.Now;

                            if (span.Seconds < 3 &&
                                 FeederHelper.Instance.MaterialList.ContainsKey(ZDTHelper.Instance.BJZS_Config.FeederID[i])
                               )
                            {
                                this.AlarmInfoInvoke($"Feeder{i + 1}编号: {ZDTHelper.Instance.BJZS_Config.FeederID[i]} 物料存放时间超出管控时间请重新上料!!!", AlarmLevel.Warn);
                                FlowIndex = FlowDoneIndex;
                                FlowInit = false;
                                Thread.Sleep(200);
                                RunMode = 0;
                                continue;
                            }
                        }
                    }
                    #endregion

                    switch (this.FlowIndex)
                    {
                        #region 0- 所有Z 轴回安全高度
                        case 0://Z回安全高度 
                            if (FlowInit == false)
                            {
                                FlowIndex_Name = "Z1Z2回安全位置";
                                RestartStopwatch();
                                FlowInit = true;
                                this.All_ZGoSafe(VariableSys.VelMode_Current);
                            }
                            else
                            {
                                if (this.All_ZReachOrg())
                                {
                                    FlowInit = false;
                                    FlowDoneIndex = FlowIndex;
                                    FlowIndex = 1;
                                }
                            }
                            if (StopWatch_FlowIndex.ElapsedMilliseconds > VariableSys.iTimeOut_Normal)
                                this.AlarmInfoInvoke("步骤[贴标]0:回安全位置超时", AlarmLevel.Warn);
                            if (FlowIndex != 0)
                            {
                                this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[贴标]0:回安全位置时间:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
                            }
                            break;
                        #endregion

                        #region 1-初始化位置信息-等待SFCS信息（目前不等待 单机测试）
                        case 1://初始化位置信息-等待SFCS信息（目前不等待 单机测试）
                            if (VariableSys.LanguageFlag == 1)
                            {
                                FlowIndex_Name = "Initialize";
                            }
                            else
                            {
                                FlowIndex_Name = "初始化位置信息";
                            }

                            SuckTime = 0;
                            FlowInit = false;
                            FlowDoneIndex = FlowIndex;

                            JOB.PASTEInfo = new Variable.PASTAE[JOB.PasteCount];//详细贴附信息
                            JOB.UpCCDResult1 = new Variable.CamReturn[JOB.PasteCount];//上视觉1结果
                            JOB.UpCCDResult2 = new Variable.CamReturn[JOB.PasteCount];//上视觉2结果

                            this.RUN_DownVisionIndex = 0;
                            this.RUN_PasteNozzle = 0;
                            this.RUN_ThrowNozzle = 0;

                            JOB.iUpCCDResult = new short[JOB.PasteCount];
                            JOB.bCalMark = false;
                            for (int i = 0; i < JOB.PasteCount; i++)
                            {
                                JOB.iUpCCDResult[i] = 0;//0 初始值 未计算
                                for (int j = 0; j < RUN_PASTEInfo.Length; j++)
                                {
                                    if (JOB.PasteName[i].ToLower() == RUN_PASTEInfo[j].PasteName.ToLower())
                                    {
                                        JOB.PASTEInfo[i].bMark1ED = false;//上视觉Mark1拍照与否
                                        JOB.PASTEInfo[i].bMark2ED = false;//上视觉Mark2拍照与否
                                        JOB.PASTEInfo[i].bMark1Caled = false;//上视觉Mark2拍照与否
                                        JOB.PASTEInfo[i].bMark2Caled = false;//上视觉Mark2拍照与否
                                        JOB.PASTEInfo[i].dPressureValue = new double[RUN_PASTEInfo[j].iPasteED.Length];//贴附的压力值
                                        JOB.PASTEInfo[i].iPasteED = new int[RUN_PASTEInfo[j].iPasteED.Length];//贴过与否

                                        for (int kk = 0; kk < RUN_PASTEInfo[j].Region.Length; ++kk)
                                        {
                                            if (this.RUN_DisPasteRegion.Contains(RUN_PASTEInfo[j].Region[kk]))
                                                JOB.PASTEInfo[i].iPasteED[kk] = 1;
                                        }


                                        JOB.PASTEInfo[i].iBadMarkED = new int[RUN_PASTEInfo[j].iPasteED.Length];//BadMark 拍照计算与否
                                        JOB.PASTEInfo[i].TransformedPoints = new PointF[RUN_PASTEInfo[j].iPasteED.Length];//修正的贴附点
                                        JOB.PASTEInfo[i].TransformedBadMarkPoints = new PointF[RUN_PASTEInfo[j].iPasteED.Length];//修正的BadMark点

                                        break;
                                    }
                                }
                            }

                            if (this.WhetherStartPoint)
                            {
                                for (int i = 0; i < JOB.PasteCount && i <= this.StartPanel; i++)
                                {
                                    if (i < this.StartPanel)
                                    {
                                        JOB.PASTEInfo[i].bMark1ED = true;
                                        JOB.PASTEInfo[i].bMark2ED = true;

                                        for (int j = 0; j < JOB.PASTEInfo[i].iPasteED.Length; ++j)
                                            JOB.PASTEInfo[i].iPasteED[j] = 1;
                                    }
                                    else if (i == this.StartPanel)
                                    {
                                        for (int k = 0; k < this.StartPaste; ++k)
                                            JOB.PASTEInfo[i].iPasteED[k] = 1;
                                    }
                                }

                                this.WhetherStartPoint = false;
                            }

                            RUN_Init = true;//初次执行
                            FlowIndex = 10000;

                            bUpdateChart = true;
                            break;
                        #endregion

                        #region 10000-贴附信息解析-找寻当次左右吸嘴需要贴附的信息
                        case 10000:
                            if (VariableSys.LanguageFlag == 1)
                            {
                                FlowIndex_Name = "PasteInfo Analysis";
                            }
                            else
                            {
                                FlowIndex_Name = "贴附信息解析";
                            }

                            #region 要找寻的变量 初始化
                            for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
                            {
                                Z_RunParam zParam = this.Z_RunParamMap[i];
                                zParam.CalFinished = false;

                                if (!zParam.RUN_bNozzleUse)
                                {
                                    zParam.RUN_Nozzle_FeederIndex = -1;
                                    zParam.RUN_PasteInfoIndex = -1;
                                    zParam.RUN_PastePointIndex = -1;
                                    zParam.RUN_dNozzleDownVisionED = 1;
                                }
                            }
                            #endregion

                            bool needPasted = false;
                            for (int i = 0; i < JOB.PasteCount; i++)
                            {
                                if (JOB.PASTEInfo[i].iPasteED.Contains(0) || JOB.PASTEInfo[i].iPasteED.Contains(-1))
                                {
                                    needPasted = true;
                                }
                            }

                            //! 全部贴附完成 不需要再贴附
                            if (needPasted)
                            {
                                #region 找寻 吸嘴贴附的板号 以及 板号中的 点位号
                                for (int i = 0; i < JOB.PasteCount; i++)//从JOB中找寻 i-JOB中的第i个PASTE
                                {
                                    // 该板不存在 0 未贴附的信息
                                    if (!JOB.PASTEInfo[i].iPasteED.Contains(0))
                                    {
                                        continue;
                                    }

                                    if (JOB.iUpCCDResult[i] == 0 || (JOB.iUpCCDResult[i] == 1 && JOB.PASTEInfo[i].iPasteED.Sum() != JOB.PASTEInfo[i].iPasteED.Length))//没有拍上视觉 || 拍完上视觉结果OK且贴附未完成
                                    {
                                        for (int j = 0; j < RUN_PASTEInfo.Length; j++)//j-RUN_PASTEInfo中的序列   (RUN_PASTEInfo-使用多少PASTE进行（扩展 增加 镜像..) 最小的组合)
                                        {
                                            if (JOB.PasteName[i] == RUN_PASTEInfo[j].PasteName)//PASTE名字一致
                                            {
                                                for (int k = 0; k < RUN_PASTEInfo[j].PastePoints.Length; k++)//k-
                                                {
                                                    if (JOB.PASTEInfo[i].iPasteED[k] != 0) //! 寻找未贴附 的点位
                                                    {
                                                        continue;
                                                    }

                                                    uint nz = 0;
                                                    if (JOB.bLocalMode)
                                                        nz = (uint)JOB.UsedNz[i] - 1;
                                                    else
                                                        nz = (uint)RUN_PASTEInfo[j].NozzleIndex[k] - 1;

                                                    if (this.Z_RunParamMap.ContainsKey(nz))
                                                    {
                                                        if (!this.Z_RunParamMap[nz].RUN_bNozzleUse)
                                                        {
                                                            Z_RunParam zParam = this.Z_RunParamMap[nz];
                                                            zParam.RUN_bNozzleUse = true;

                                                            if (JOB.bLocalMode)
                                                                zParam.RUN_Nozzle_FeederIndex = (short)JOB.UsedFeeder[i];
                                                            else
                                                                zParam.RUN_Nozzle_FeederIndex = RUN_PASTEInfo[j].FeederIndex[k];

                                                            zParam.RUN_PasteInfoIndex = (short)i;//当次 吸嘴在贴第几块板子-----------------多板模式下
                                                            zParam.RUN_PasteInfoIndex_List = (short)j;//当次 吸嘴在[小板模式LIST]下的序列号
                                                            zParam.RUN_PastePointIndex = (short)k;//当次 吸嘴在贴板子的第几个点
                                                            if (zParam.RUN_dNozzleDownVisionED == 0 || zParam.RUN_dNozzleDownVisionED == 3 || zParam.RUN_dNozzleDownVisionED == 4)
                                                            {
                                                                zParam.RUN_dNozzleDownVisionED = 1;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                #endregion

                                #region 正常搜索不到，开始补板
                                for (int i = 0; i < JOB.PasteCount; i++)//从JOB中找寻 i-JOB中的第i个PASTE
                                {
                                    // 该板不存在 -1 补贴位
                                    if (!JOB.PASTEInfo[i].iPasteED.Contains(-1))
                                    {
                                        continue;
                                    }

                                    if (JOB.iUpCCDResult[i] == 0 || (JOB.iUpCCDResult[i] == 1 && JOB.PASTEInfo[i].iPasteED.Sum() != JOB.PASTEInfo[i].iPasteED.Length))//没有拍上视觉 || 拍完上视觉结果OK且贴附未完成
                                    {
                                        for (int j = 0; j < RUN_PASTEInfo.Length; j++)//j-RUN_PASTEInfo中的序列   (RUN_PASTEInfo-使用多少PASTE进行（扩展 增加 镜像..) 最小的组合)
                                        {
                                            if (JOB.PasteName[i] == RUN_PASTEInfo[j].PasteName)//PASTE名字一致
                                            {
                                                for (int k = 0; k < RUN_PASTEInfo[j].PastePoints.Length; k++)//k-
                                                {
                                                    if (JOB.PASTEInfo[i].iPasteED[k] != -1) //! 寻找补贴 的点位
                                                    {
                                                        continue;
                                                    }

                                                    uint nz = 0;
                                                    if (JOB.bLocalMode)
                                                        nz = (uint)JOB.UsedNz[i] - 1;
                                                    else
                                                        nz = (uint)RUN_PASTEInfo[j].NozzleIndex[k] - 1;

                                                    if (this.Z_RunParamMap.ContainsKey(nz))
                                                    {
                                                        if (!this.Z_RunParamMap[nz].RUN_bNozzleUse)
                                                        {
                                                            Z_RunParam zParam = this.Z_RunParamMap[nz];
                                                            zParam.RUN_bNozzleUse = true;

                                                            if (JOB.bLocalMode)
                                                                zParam.RUN_Nozzle_FeederIndex = (short)JOB.UsedFeeder[i];
                                                            else
                                                                zParam.RUN_Nozzle_FeederIndex = RUN_PASTEInfo[j].FeederIndex[k];

                                                            zParam.RUN_PasteInfoIndex = (short)i;//当次 吸嘴在贴第几块板子-----------------多板模式下
                                                            zParam.RUN_PasteInfoIndex_List = (short)j;//当次 吸嘴在[小板模式LIST]下的序列号
                                                            zParam.RUN_PastePointIndex = (short)k;//当次 吸嘴在贴板子的第几个点
                                                            if (zParam.RUN_dNozzleDownVisionED == 0 || zParam.RUN_dNozzleDownVisionED == 3 || zParam.RUN_dNozzleDownVisionED == 4)
                                                            {
                                                                zParam.RUN_dNozzleDownVisionED = 1;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion

                                FlowInit = false;
                                FlowDoneIndex = FlowIndex;
                                this.FlowIndex = 10009;
                            }
                            else
                            {
                                if (VariableSys.bEnableVaccumCheck && CheckLabelTask != null)
                                {
                                    CheckLabelTask.Wait();
                                    if (CheckLabelTask.Result != string.Empty)
                                    {
                                        this.AlarmInfoInvoke($"{CheckLabelTask.Result} 有沾料,请清理!!!", AlarmLevel.Err);
                                        CheckLabelTask = null;
                                        this.bUpdateChart = true;
                                        break;
                                    }
                                }

                                if (!needPasted)
                                {
                                    StatisticsHelper.Instance.Reoprt.ProductPCB(VariableSys.sProgramName);
                                    ZDTHelper.Instance.UpdateProdctMessage();

                                    if (ZDTHelper.Instance.EnableBJZS)
                                    {
                                        string message = FeederHelper.Instance.UploadMesInfo();
                                        if (!string.IsNullOrEmpty(message))
                                        {
                                            this.AlarmInfoInvoke("追溯系统上传数据出现问题!!!\n\r详细信息：" + message, AlarmLevel.Warn);
                                        }
                                    }

                                    if (CycleStop)
                                    {
                                        this.Invoke(new Action(() =>
                                        {
                                            this.bAutoSinglePause_Click(this, new EventArgs());
                                        }));
                                        break;
                                    }

                                    this.PanelAlarmed = false;
                                    JOB.bCalMark = false;
                                    RUN_bPasteOK = true;
                                    FlowInit = false;

                                    FlowDoneIndex = FlowIndex;
                                    FlowIndex = 0;
                                }
                            }

                            if (FlowIndex != 10000)
                            {
                                if (VariableSys.LanguageFlag == 1)
                                {
                                    this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "Step[Labeler]10000:PasteInfo Analysis time:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
                                }
                                else
                                {
                                    this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[贴标]10000:贴附信息解析:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
                                }
                            }
                            break;
                        #endregion

                        //*************************************************[吸料]********************************************************************************************
                        //吸嘴 处理-feeder******************DONE
                        #region 10009-吸标参数准备
                        case 10009:
                            if (!this.FlowInit)
                            {
                                FlowIndex_Name = "吸标参数准备";

                                //! 吸标时 翻转气缸没有翻转
                                if (VariableSys.machineVersion == 2 && !Turn.AxisReach(VariableSys.dTurnXIAngle))
                                {
                                    this.FlowDoneIndex = this.FlowIndex;
                                    this.FlowIndex = 10100;
                                    break;
                                }

                                #region 沾料检测
                                if (VariableSys.bEnableVaccumCheck && CheckLabelTask != null)
                                {
                                    CheckLabelTask.Wait();
                                    if (CheckLabelTask.Result != string.Empty)
                                    {
                                        this.AlarmInfoInvoke($"{CheckLabelTask.Result} 有沾料,请清理!!!", AlarmLevel.Err);
                                        CheckLabelTask = null;
                                        this.bUpdateChart = true;
                                        break;
                                    }
                                }
                                #endregion

                                this.RUN_XIList.Clear();
                                List<uint> xiLeft = new List<uint>(); // 一次可以支持2个吸嘴同吸
                                List<uint> xiRight = new List<uint>(); // 一次可支持两个吸嘴同吸

                                if (VariableSys.bEnableAsyncXI)
                                {
                                    for (uint i = 0; i < Variable.NOZZLE_NUM; i++)
                                    {
                                        #region 吸嘴同吸分配

                                        if (this.Z_RunParamMap[i].RUN_bNozzleUse || this.Z_RunParamMap[i + 2].RUN_bNozzleUse)
                                        {
                                            if (this.Z_RunParamMap[i].RUN_Nozzle_FeederIndex == 1)
                                            {
                                                xiLeft.Add(i);
                                                xiLeft.Add(i + 2);
                                            }
                                            else
                                            {
                                                xiRight.Add(i);
                                                xiRight.Add(i + 2);
                                            }

                                            i++;
                                        }
                                        #endregion
                                    }
                                }
                                else
                                {
                                    #region 吸嘴单吸分配
                                    for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
                                    {
                                        if (this.Z_RunParamMap[i].RUN_bNozzleUse)
                                        {
                                            if (this.Z_RunParamMap[i].RUN_Nozzle_FeederIndex == 1)
                                            {
                                                xiLeft.Add(i);
                                                xiLeft.Add(i);
                                            }
                                            else
                                            {
                                                xiRight.Add(i);
                                                xiRight.Add(i);
                                            }
                                        }
                                    }
                                    #endregion
                                }

                                // 先吸左Feeder 再吸 右Feeder
                                this.RUN_XIList.AddRange(xiLeft);
                                this.RUN_XIList.AddRange(xiRight);
                                this.RUN_XIIndex = 0;

                                if (RUN_XIList.Count > 0)
                                {
                                    this.FlowDoneIndex = this.FlowIndex;
                                    this.FlowIndex = 10010;
                                    this.FlowInit = false;
                                }
                                else
                                {
                                    for (uint i = 0; i < Variable.NOZZLE_NUM; i++)
                                    {
                                        this.Z_RunParamMap[i].RUN_bNozzleUse = false;
                                    }
                                    this.FlowDoneIndex = this.FlowIndex;
                                    this.FlowIndex = 10000;
                                    this.FlowInit = false;
                                }
                            }
                            break;

                        #endregion

                        #region 10010-吸嘴 XY到 Feeder位置且出标到位后立马吸
                        case 10010://吸嘴 XY 到 Feeder位置且出标到位后立马吸
                            this.RUN_FeedrIndex = Z_RunParamMap[this.RUN_XIList[this.RUN_XIIndex]].RUN_Nozzle_FeederIndex - 1;
                            this.DoXIStep_GoXIPos(this.RUN_XIList[this.RUN_XIIndex], this.RUN_XIList[this.RUN_XIIndex + 1]
                                , ref Feeder[this.RUN_FeedrIndex], ref XI_IndexG[this.RUN_FeedrIndex], ref bArr_IO_IN_Status.bIN_LabelReach);
                            break;
                        #endregion

                        #region 10011-Z 到吸料高度
                        case 10011://Z 到吸料高度 
                            this.DoXIStep_GoXIHeigh(this.RUN_XIList[this.RUN_XIIndex], this.RUN_XIList[this.RUN_XIIndex + 1]
                                , ref Feeder[this.RUN_FeedrIndex], ref XI_IndexG[this.RUN_FeedrIndex]);
                            break;
                        #endregion

                        #region 10013-Z 到安全高度
                        case 10013://Z 到安全高度
                            this.DoXIStep_GOSafeHeight(this.RUN_XIList[this.RUN_XIIndex], this.RUN_XIList[this.RUN_XIIndex + 1]);
                            break;
                        #endregion

                        #region 10014-检测真空是否达到
                        case 10014://检测真空是否达到
                            this.DoXIStep_CheckVaccum(this.RUN_XIList[this.RUN_XIIndex], this.RUN_XIList[this.RUN_XIIndex + 1]
                                , ref XI_IndexG[this.RUN_FeedrIndex]);
                            break;
                        #endregion

                        #region 10015 -是否继续吸标
                        case 10015:
                            this.RUN_XIIndex += 2;
                            if (this.RUN_XIIndex >= this.RUN_XIList.Count) // 吸标完成
                            {
                                this.FlowIndex = 20000; // 去下视觉
                                this.FlowInit = false;
                            }
                            else
                            {
                                this.FlowIndex = 10010; // 继续吸标
                                this.FlowInit = false;
                            }
                            break;
                        #endregion

                        //*************************************************[翻转-下视觉-抛料-吸标]********************************************************************************************
                        #region 10100-到翻转位
                        case 10100:
                            if (VariableSys.machineVersion == 3)
                            {
                                this.FlowIndex = this.FlowDoneIndex;
                                break;
                            }

                            if (!this.FlowInit)
                            {
                                if ((this.FlowDoneIndex >= 20000 && this.FlowDoneIndex < 20200) || this.FlowDoneIndex > 20300) // 在贴标流程中
                                {
                                    if (Turn.AxisReach(VariableSys.dTurnPasteAngle))
                                    {
                                        this.FlowIndex = this.FlowDoneIndex;
                                        break;
                                    }
                                }
                                else
                                {
                                    if (Turn.AxisReach(VariableSys.dTurnXIAngle))
                                    {
                                        this.FlowIndex = this.FlowDoneIndex;
                                        break;
                                    }
                                }

                                RestartStopwatch();
                                FlowIndex_Name = "轨道翻转";
                                XYGoPos(VariableSys.pReadyPoint, VariableSys.VelMode_Current);

                                if (IsDownPhoto) // 设置相机曝光 和 光源
                                {
                                    SetLightAndShutter();
                                    IsDownPhoto = false;
                                }

                                FlowInit = true;
                            }
                            else
                            {
                                if (AxisReach(VariableSys.pReadyPoint))
                                {
                                    this.FlowIndex = 10101;
                                    this.FlowInit = false;
                                }
                                else
                                {
                                    XYGoPos(VariableSys.pReadyPoint, VariableSys.VelMode_Current); // 到待料位
                                }

                                if (StopWatch_FlowIndex.ElapsedMilliseconds > VariableSys.iTimeOut_Normal)
                                    this.AlarmInfoInvoke("步骤[贴标]10100: 到翻转位超时", AlarmLevel.Warn);

                                if (FlowIndex != 10100)
                                {
                                    this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[贴标]10100:到达翻转位置:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
                                }
                            }
                            break;
                        #endregion

                        #region 10101-翻转并返回原来的步骤
                        case 10101:
                            if (!this.FlowInit)
                            {
                                FlowIndex_Name = "等待轨道翻转到位";

                                RestartStopwatch();
                                FlowInit = true;

                                FlowIndex_Name = "等待翻转到位";

                                if ((this.FlowDoneIndex >= 20000 && this.FlowDoneIndex < 20200) || this.FlowDoneIndex > 20300) // 在贴标流程中
                                {
                                    Turn.GoPos(VariableSys.dTurnPasteAngle, VariableSys.VelMode_Current);
                                }
                                else // 抛料 吸标
                                {
                                    Turn.GoPos(VariableSys.dTurnXIAngle, VariableSys.VelMode_Current);
                                }
                            }
                            else
                            {
                                if ((this.FlowDoneIndex >= 20000 && this.FlowDoneIndex < 20200) || this.FlowDoneIndex > 20300) // 下视觉
                                {
                                    if (Turn.AxisReach(VariableSys.dTurnPasteAngle) && !Turn.bAxisIsRunning)
                                    {
                                        this.FlowIndex = this.FlowDoneIndex;
                                        this.FlowInit = false;
                                    }
                                    else
                                        Turn.GoPos(VariableSys.dTurnPasteAngle, VariableSys.VelMode_Current);
                                }
                                else // 抛料 吸标
                                {
                                    if (Turn.AxisReach(VariableSys.dTurnXIAngle) && !Turn.bAxisIsRunning)
                                    {
                                        this.FlowIndex = this.FlowDoneIndex;
                                        this.FlowInit = false;
                                    }
                                    else
                                        Turn.GoPos(VariableSys.dTurnXIAngle, VariableSys.VelMode_Current);
                                }

                                if (StopWatch_FlowIndex.ElapsedMilliseconds > VariableSys.iTimeOut_Normal)
                                {
                                    this.AlarmInfoInvoke("步骤[贴标]10101: 翻转超时", AlarmLevel.Warn);
                                }

                                if (FlowIndex != 10101)
                                {
                                    PressSensorHelper.Instance.SendZeroAll();
                                    this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[贴标]10101:翻转动作完成:" + StopWatch_FlowIndex.ElapsedMilliseconds.ToString() + "ms" });//
                                }
                            }
                            break;
                        #endregion

                        //*************************************************[下视觉拍照]********************************************************************************************
                        #region 20000-判别 （飞行模式 or 普通走停模式） 和 拍摄顺序
                        case 20000: //判别 （飞行模式 or 普通走停模式） 和 拍摄顺序
                                    //! 过下视觉时 翻转气缸没有翻转
                            if (VariableSys.machineVersion == 2 && !Turn.AxisReach(VariableSys.dTurnPasteAngle))
                            {
                                IsDownPhoto = true;
                                this.FlowDoneIndex = this.FlowIndex;
                                this.FlowIndex = 10100;
                                break;
                            }

                            FlowIndex_Name = "下视觉判断";

                            FlowInit = false;
                            FlowDoneIndex = FlowIndex;

                            this.FlowIndex = 20009;
                            this.RUN_DownVisionIndex = 0;
                            this.RUN_PasteNozzle = 0;
                            this.RUN_ThrowNozzle = 0;
                            this.FlowInit = false;
                            break;
                        #endregion
                        #region 20009-单点下视觉
                        //**************************[普通走停模式]*******************************
                        case 20009:// 点拍参数准备
                            if (!this.FlowInit)
                            {
                                FlowIndex_Name = "点拍参数准备";
                                this.RUN_DownVisionIndex = 0;
                                this.FlowIndex = 20010;
                                this.FlowInit = false;
                            }
                            break;
                        case 20010:
                            this.DoPointPhoto_GoPos();
                            break;

                        case 20011:
                            this.DoPointPhoto_Cal();
                            break;
                        case 20012:// 是否继续点拍
                            this.LightOFF_D();
                            this.FlowIndex = 20040;
                            this.FlowInit = false;
                            break;
                        #endregion

                        #region 20040-下视觉结果解析提前去--根据 拍摄方式 而定
                        case 20040://下视觉结果解析提前去
                            if (!this.RUN_bReachOK)
                                break;

                            if (!FlowInit)
                            {
                                FlowIndex_Name = "提前到位(下视觉结果解析)";
                                RestartStopwatch();
                                FlowInit = true;
                                // 是否拍过照
                                if (!JOB.bCalMark)
                                {
                                    #region 上视觉拍照
                                    if (JOB.bLocalMode && JOB.iLocalAlign == 1)
                                    {
                                        RUN_PrePastePoint = JOB.GlobalConfig.Mark[0].CamPos;
                                        iGG_rtn = XYGoPos(RUN_PrePastePoint, VariableSys.VelMode_Current);
                                    }
                                    else
                                    {
                                        RUN_PrePastePoint.X = JOB.Cam_Mark1Point[0].X;
                                        RUN_PrePastePoint.Y = JOB.Cam_Mark1Point[0].Y;
                                        iGG_rtn = XYGoPos(RUN_PrePastePoint, VariableSys.VelMode_Current);
                                    }

                                    // R 轴提前到 贴标角度
                                    for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
                                    {
                                        if (this.Z_RunParamMap[i].RUN_bNozzleUse)
                                        {
                                            iGG_rtn += this.R_RunParamMap[i].GoPos(RUN_PASTEInfo[this.Z_RunParamMap[i].RUN_PasteInfoIndex_List].PasteAngle[this.Z_RunParamMap[i].RUN_PastePointIndex], VariableSys.VelMode_Current);
                                        }
                                    }
                                    #endregion
                                }
                                else // 直接取贴标位
                                {
                                    uint zIndex = 0;
                                    for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
                                    {
                                        if (this.Z_RunParamMap[i].RUN_bNozzleUse)
                                        {
                                            zIndex = i;
                                            break;
                                        }
                                    }
                                    var zParam = this.Z_RunParamMap[zIndex];
                                    if (!JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].bMark1Caled && !JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].bMark2Caled)
                                    {
                                        #region 上CCD计算
                                        UpCCDResult[0] = JOB.UpCCDResult1[zParam.RUN_PasteInfoIndex];
                                        if (JOB.iLocalAlign == 1 && JOB.bLocalMode)
                                        {
                                            UpCCDResult[0].Angle = RUN_GloablAngle;
                                        }

                                        newMark1 = Point2CCDCenter(JOB.Cam_Mark1Point[zParam.RUN_PasteInfoIndex], new PointContour(UpCCDResult[0].X, UpCCDResult[0].Y), 0, 0);
                                        if (RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].AlinIndex2 == 0)
                                        {
                                            JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].TransformedPoints = TransformPointsFormMarkAndAngle_IsPaste(RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].PastePoints, RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].Mark1, newMark1, UpCCDResult[0].Angle, ref JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].Rotation, RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].IsPastePointsAbs);
                                        }
                                        else
                                        {
                                            UpCCDResult[1] = JOB.UpCCDResult2[zParam.RUN_PasteInfoIndex];
                                            newMark2 = Point2CCDCenter(JOB.Cam_Mark2Point[zParam.RUN_PasteInfoIndex], new PointContour(UpCCDResult[1].X, UpCCDResult[1].Y), 0, 0);

                                            #region 比较Mark 距离,是否抓错
                                            var len1 = CommonHelper.GetDist(RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].Mark1, RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].Mark2);
                                            var len2 = CommonHelper.GetDist(newMark1, newMark2);
                                            double diff = Math.Abs(len2 - len1);
                                            this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { $"软板Mark点识别管控 误差:{diff:N3}" });

                                            if (diff >= 0.5)
                                            {
                                                this.AlarmInfoInvoke($"软板Mark点识别超管控 {diff:N3}>0.5mm,请检查Mark点是否抓错,重新清料再开始程序", AlarmLevel.Err);
                                                break;
                                            }
                                            #endregion

                                            JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].TransformedPoints = TransformPointsForm2Mark_IsPaste(RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].PastePoints, RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].Mark1, RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].Mark2, newMark1, newMark2, ref JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].Rotation, RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].IsPastePointsAbs);
                                        }

                                        ImageCapture_Up2.Overlays.Default.AddText(JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].Rotation.ToString("F2"), new PointContour(500, 500), Rgb32Value.BlueColor, new OverlayTextOptions("Consolas", 125));
                                        JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].bMark1Caled = true;
                                        JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].bMark2Caled = true;
                                        #endregion
                                    }

                                    this.FlowInit = false;
                                    this.FlowIndex = 20310;
                                }
                            }
                            else
                            {
                                if (!JOB.bCalMark)
                                {
                                    if (AxisReach(RUN_PrePastePoint))
                                    {
                                        this.FlowDoneIndex = this.FlowIndex;
                                        this.FlowIndex = 20120;
                                        FlowInit = false;
                                    }
                                    else
                                    {
                                        if (!X.bAxisIsRunning || !Y.bAxisIsRunning)
                                        {
                                            XYGoPos(RUN_PrePastePoint, VariableSys.VelMode_Current);
                                        }
                                    }
                                }
                            }
                            break;
                        #endregion

                        //*************************************************[上视觉拍照]********************************************************************************************

                        #region 20100-照Global Mark
                        case 20100: // 准备
                            if (!JOB.bLocalMode || JOB.iLocalAlign != 1 || JOB.bCalMark)
                            {
                                this.FlowIndex = 20111;
                                this.FlowInit = false;
                                break;
                            }

                            RUN_GloablIndex = 0;
                            RUN_GloablAngle = 0;
                            this.FlowInit = false;
                            this.FlowIndex = 20101;
                            break;
                        case 20101: // 到 Mark
                            this.DoGoGlobalMark(RUN_GloablIndex);
                            break;
                        case 20102: // 拍 Mark
                            this.DoCalGlobalMark(RUN_GloablIndex);
                            break;
                        case 20103: // 到 Mark2
                            RUN_GloablIndex++;
                            if (RUN_GloablIndex >= 2)
                            {
                                double angle = this.getAngle(GlobalMark[0].X, GlobalMark[0].Y,
                                    GlobalMark[1].X, GlobalMark[1].Y);
                                RUN_GloablAngle = angle - JOB.GlobalConfig.BaseAngle;
                                this.FlowIndex = 20111;
                                this.FlowInit = false;
                            }
                            else
                            {
                                this.FlowIndex = 20101;
                                this.FlowInit = false;
                            }
                            break;

                        #endregion

                        #region 20111-照Mark点
                        case 20111: // 规划变量
                            #region 规划 照Mark点 变量
                            if (!this.FlowInit)
                            {
                                FlowIndex_Name = "规划上视觉拍照路径 并等待 PCB板到位";
                                RestartStopwatch();

                                if (JOB.bUpFly)
                                {
                                    ClearImage(UpFlyCapture);
                                    this.UpCaler.ResetQueue();
                                    // 设置曝光 和 光源
                                    LightON_Up_PASTE1(ref RUN_PASTEInfo[0]);
                                    // 飞拍准备
                                    this.FlowIndex = 20510;
                                    this.RUN_MarkIndex = 0;
                                    this.FlowInit = false;
                                }
                                else
                                {
                                    this.RUN_MarkList.Clear();

                                    for (int i = 0; i < JOB.PasteCount; ++i)
                                    {
                                        for (int j = 0; j < RUN_PASTEInfo.Length; ++j)
                                        {
                                            if (JOB.PasteName[i] == RUN_PASTEInfo[j].PasteName)
                                            {
                                                if (RUN_PASTEInfo[j].AlinIndex2 == 0)// 只拍一次 只需要计算一个Mark
                                                {
                                                    this.RUN_MarkList.Add(new Tuple<int, int>(i, 0));
                                                }
                                                else // 拍两次 需要计算两个Mark
                                                {
                                                    this.RUN_MarkList.Add(new Tuple<int, int>(i, 0));
                                                    this.RUN_MarkList.Add(new Tuple<int, int>(i, 1));
                                                }
                                            }
                                        }
                                    }

                                    this.RUN_MarkIndex = 0;
                                    FlowIndex = 20112;
                                    this.FlowInit = false;
                                }
                            }
                            #endregion
                            break;
                        #region 单点拍照
                        case 20112: // 到 Mark点 拍照位
                            this.DoCamMark_GoPos(this.RUN_MarkList[this.RUN_MarkIndex].Item1, this.RUN_MarkList[this.RUN_MarkIndex].Item2);
                            break;
                        case 20113: // Mark点 计算
                            this.DoCamMark_Photo(this.RUN_MarkList[this.RUN_MarkIndex].Item1, this.RUN_MarkList[this.RUN_MarkIndex].Item2);
                            break;
                        case 20114:
                            #region  是否还需要照 Mark 点
                            this.RUN_MarkIndex++;
                            if (this.RUN_MarkIndex >= this.RUN_MarkList.Count) // Mark点拍摄完成
                            {
                                JOB.bCalMark = true;
                                LightOFF_U();
                                this.FlowIndex = 20410;
                                this.FlowInit = false;
                            }
                            else // 照下一个 Mark 点
                            {
                                FlowIndex = 20112;
                                this.FlowInit = false;
                            }
                            #endregion
                            break;
                        #endregion

                        #region 飞行拍照
                        case 20510: // 到飞拍起点
                            if (!this.FlowInit)
                            {
                                FlowIndex_Name = "开始到飞拍起点";
                                RestartStopwatch();
                                this.RUN_GoPos = this.RUN_UpFlyMark[this.RUN_MarkIndex].First().Cam1;
                                if (this.RUN_GoPos.X > this.RUN_UpFlyMark[this.RUN_MarkIndex].Last().Cam1.X)
                                {
                                    this.RUN_GoPos.X += 5;
                                    this.RUN_FlyDir = 1;
                                }
                                else
                                {
                                    this.RUN_GoPos.X -= 5;
                                    this.RUN_FlyDir = 0;
                                }

                                this.XYGoPos(RUN_GoPos, VariableSys.VelMode_Current);

                                double[] Table = new double[6000];
                                short TabelCount = 0;
                                for (int i = 0; i < RUN_UpFlyMark[RUN_MarkIndex].Count; ++i)
                                {

                                    Table[i] = (RUN_UpFlyMark[RUN_MarkIndex][i].Cam1.X + RUN_UpFlyMark[RUN_MarkIndex][i].FlyDelay) * VariableSys.dRatio_Axis_X;
                                    TabelCount = (short)RUN_UpFlyMark[RUN_MarkIndex].Count;
                                }

                                this.FlyMode = 1;
                                this.bFlyStart = true;

                                //设置飞拍
                                this.X.SetComapreTable(Table, (short)Table.Length);

                                this.FlowInit = true;
                            }
                            else
                            {
                                if (AxisReach(RUN_GoPos)
                                    && !RUN_bPasteOK
                                    && RUN_bReachOK)
                                {
                                    this.X.SetComapreData(1, RUN_FlyDir, 0, 0, 0, 5);
                                    this.FlowIndex = 20511;
                                    this.FlowInit = false;
                                }
                                else
                                {
                                    if (!X.bAxisIsRunning || !Y.bAxisIsRunning)
                                        this.XYGoPos(RUN_GoPos, VariableSys.VelMode_Current);
                                }

                                if (StopWatch_FlowIndex.ElapsedMilliseconds > VariableSys.iTimeOut_Normal)
                                {
                                    this.AlarmInfoInvoke("步骤[上视觉]20510:XY到起飞位置超时", AlarmLevel.Warn);
                                }
                            }
                            break;
                        case 20511: // 到飞拍终点
                            if (!this.FlowInit)
                            {
                                FlowIndex_Name = "开始到飞拍终点";
                                RestartStopwatch();
                                this.RUN_GoPos = this.RUN_UpFlyMark[this.RUN_MarkIndex].Last().Cam1;
                                if (this.RUN_UpFlyMark[RUN_MarkIndex].First().Cam1.X > this.RUN_GoPos.X)
                                {
                                    this.RUN_GoPos.X -= 5;
                                    this.RUN_FlyDir = 1;
                                }
                                else
                                {
                                    this.RUN_GoPos.X += 5;
                                    this.RUN_FlyDir = 0;
                                }

                                this.XYGoPos(RUN_GoPos, VariableSys.VelMode_UpFly);

                                this.FlowInit = true;
                            }
                            else
                            {
                                if (AxisReach(RUN_GoPos))
                                {
                                    this.X.SetComapreData(0, RUN_FlyDir, 0, 0, 0, 5);
                                    this.FlowIndex = 20512;
                                    this.FlowInit = false;
                                }
                                else
                                {
                                    if (!X.bAxisIsRunning || !Y.bAxisIsRunning)
                                        this.XYGoPos(RUN_GoPos, VariableSys.VelMode_UpFly);
                                }

                                if (StopWatch_FlowIndex.ElapsedMilliseconds > VariableSys.iTimeOut_Normal)
                                {
                                    this.AlarmInfoInvoke("步骤[上视觉]20510:XY到终点位置超时", AlarmLevel.Warn);
                                }
                            }
                            break;
                        case 20512: // 是否还需要飞Mark
                            this.RUN_MarkIndex++;
                            if (this.RUN_MarkIndex >= this.RUN_UpFlyMark.Count)
                            {
                                Thread.Sleep(100);
                                if (UpFlyCapture.Count == JOB.PasteCount)
                                {
                                    JOB.bCalMark = true;
                                    this.bFlyStart = false;
                                    LightOFF_U();
                                    this.FlyMode = 0;
                                    this.FlowIndex = 20410;
                                    this.FlowInit = false;
                                }
                                else//飞拍采集图片出错
                                {
                                    this.AlarmInfoInvoke("步骤[上视觉]20510:采图张数不对", AlarmLevel.Err);
                                    JOB.bCalMark = false;
                                    this.FlowIndex = 20111;
                                    this.FlowInit = false;
                                }
                            }
                            else
                            {
                                this.FlowIndex = 20510;
                                this.FlowInit = false;
                            }
                            break;

                        #endregion
                        #endregion

                        #region 20120-MES-badmark
                        case 20120://MES-badmark
                            if (MFlex.MFlexHelper.Instance.EnableMES || ZDTHelper.Instance.EnableJY && ZDTHelper.Instance.JY_Config.ReadCodeBean != string.Empty)
                                this.FlowIndex = 20121;
                            else
                                this.FlowIndex = 20130;
                            break;
                        case 20121:
                            if (MFlex.MFlexHelper.Instance.EnableMES)
                            {
                                this.GoReadCodePos(MFlex.MFlexHelper.Instance.CodeBean, ref this.RUN_BadmarkCode, 20122);
                            }
                            else
                            {
                                this.GoReadCodePos(ZDTHelper.Instance.SPICodeBean, ref this.RUN_BadmarkCode, 20122);
                            }
                            break;
                        case 20122:
                            // 获取Badmark信息
                            if (MFlex.MFlexHelper.Instance.EnableMES)
                            {
                                #region MFlex 通讯格式
                                if (MFlex.MFlexHelper.Instance.CodeBean.CompareBarcode(this.RUN_BadmarkCode))
                                {
                                    Dictionary<int, bool> badmarkList = new Dictionary<int, bool>();
                                    var resultList = MFlex.MFlexHelper.Instance.CheckBaseInfo(this.RUN_BadmarkCode, out badmarkList);
                                    if (resultList.Item1) // 
                                    {
                                        this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "Barcode:" + RUN_BadmarkCode + ": OK\n\r" + resultList.Item2 });

                                        BadmarkCheck(badmarkList);
                                        bUpdateChart = true;
                                        this.FlowInit = false;
                                        this.FlowIndex = 20130;
                                    }
                                    else
                                    {
                                        this.AlarmInfoInvoke("MES对接失败，失败原因:[" + resultList.Item2 + "]", AlarmLevel.Warn);
                                        RUN_bPasteOK = true;
                                        FlowDoneIndex = FlowIndex;
                                        FlowInit = false;
                                        FlowIndex = 20120;
                                    }
                                }
                                else // 格式不对
                                {
                                    for (int k = 0; k < JOB.PASTEInfo.Length; ++k)
                                    {
                                        for (int j = 0; j < JOB.PASTEInfo[k].iPasteED.Length; ++j)
                                        {
                                            JOB.PASTEInfo[k].iPasteED[j] = 1;
                                        }
                                    }
                                    this.FlowIndex = 20130;
                                }
                                #endregion
                            }
                            else
                            {
                                #region ZDT MES通信格式
                                if (ZDTHelper.Instance.SPICodeBean.CompareBarcode(this.RUN_BadmarkCode))
                                {
                                    string mesInfo = string.Empty;
                                    if (this.GetBadMark(this.RUN_BadmarkCode, ZDTHelper.Instance.JY_Config.MES_Side, out mesInfo))
                                    {
                                        this.BadmarkCheck(mesInfo);
                                        this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "Barcode:" + this.RUN_BadmarkCode + ":" + mesInfo });
                                    }
                                    else // 获取失败
                                    {
                                        if (ZDTHelper.Instance.JY_Config.bAlarm)
                                            this.AlarmInfoInvoke("条码获取失败:" + this.RUN_BadmarkCode + ":" + mesInfo, AlarmLevel.Warn);
                                        else
                                            this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "条码获取失败:" + this.RUN_BadmarkCode + ":" + mesInfo });

                                        if (!ZDTHelper.Instance.JY_Config.bPaste)
                                        {
                                            for (int k = 0; k < JOB.PASTEInfo.Length; ++k)
                                            {
                                                for (int j = 0; j < JOB.PASTEInfo[k].iPasteED.Length; ++j)
                                                {
                                                    JOB.PASTEInfo[k].iPasteED[j] = 1;
                                                }
                                            }
                                        }
                                    }
                                    bUpdateChart = true;
                                    this.FlowIndex = 20130;
                                }
                                else // 格式不对
                                {
                                    if (ZDTHelper.Instance.JY_Config.bAlarm)
                                        this.AlarmInfoInvoke("条码获取格式不正确:" + this.RUN_BadmarkCode + ":" + "格式:" + ZDTHelper.Instance.SPICodeBean.BarcodeFormate, AlarmLevel.Warn);
                                    else
                                        this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "条码获取格式不正确:" + this.RUN_BadmarkCode + ":" + "格式:" + ZDTHelper.Instance.SPICodeBean.BarcodeFormate });

                                    if (!ZDTHelper.Instance.JY_Config.bPaste)
                                    {
                                        for (int k = 0; k < JOB.PASTEInfo.Length; ++k)
                                        {
                                            for (int j = 0; j < JOB.PASTEInfo[k].iPasteED.Length; ++j)
                                            {
                                                JOB.PASTEInfo[k].iPasteED[j] = 1;
                                            }
                                        }
                                    }

                                    this.FlowIndex = 20130;
                                }
                                #endregion

                            }
                            break;

                        #endregion

                        #region 20130-Tray-Code
                        case 20130:
                            if (ZDTHelper.Instance.EnableBJZS && ZDTHelper.Instance.BJZS_Config.ReadCodeBean != string.Empty)
                                this.FlowIndex = 20131;
                            else
                                this.FlowIndex = 20100;
                            break;
                        case 20131:
                            this.GoReadCodePos(ZDTHelper.Instance.TrayCodeBean, ref this.RUN_TrayCode, 20132);
                            break;
                        case 20132:
                            // 获取Badmark信息
                            if (!ZDTHelper.Instance.SPICodeBean.CompareBarcode(this.RUN_TrayCode))
                            {
                                if (ZDTHelper.Instance.BJZS_Config.DataAlarm)
                                    this.AlarmInfoInvoke("治具条码获取不正确:" + this.RUN_BadmarkCode + ":" + "格式:" + ZDTHelper.Instance.TrayCodeBean.BarcodeFormate, AlarmLevel.Warn);
                                else
                                    this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "治具条码获取不正确:" + this.RUN_BadmarkCode + ":" + "格式:" + ZDTHelper.Instance.TrayCodeBean.BarcodeFormate });

                                for (int k = 0; k < JOB.PASTEInfo.Length; ++k)
                                {
                                    for (int j = 0; j < JOB.PASTEInfo[k].iPasteED.Length; ++j)
                                    {
                                        JOB.PASTEInfo[k].iPasteED[j] = ZDTHelper.Instance.JY_Config.bPaste ? 0 : 1;
                                    }
                                }
                            }
                            this.FlowIndex = 20100;
                            break;
                        #endregion

                        #region 20410-照 Badmark
                        case 20410:
                            #region 规划 需要照的 Badmark 点
                            if (VariableSys.iOutSideBadMark != 1) // 扫描 Badmark
                            {
                                this.FlowIndex = 20310;
                                this.FlowInit = false;
                                break;
                            }

                            RUN_ReadBadmark_PasteIndex = 0;
                            RUN_ReadBadmark_MarkIndex = 0;
                            this.FlowIndex = 20411;
                            this.FlowInit = false;
                            #endregion
                            break;

                        case 20411: // 到 Badmark 点拍照位
                            this.DoCamBadMark_GoPos(RUN_ReadBadmark_PasteIndex, RUN_ReadBadmark_MarkIndex);
                            break;
                        case 20412: // Badmark 计算
                            this.DoCamBadMark_Photo(RUN_ReadBadmark_PasteIndex, RUN_ReadBadmark_MarkIndex);
                            break;
                        case 20413: // 是否还需要照 Badmark 点
                            RUN_ReadBadmark_MarkIndex++;
                            if (RUN_ReadBadmark_MarkIndex >= JOB.PASTEInfo[RUN_ReadBadmark_PasteIndex].iBadMarkED.Length)
                            {
                                RUN_ReadBadmark_PasteIndex++;

                                if (RUN_ReadBadmark_PasteIndex >= JOB.PASTEInfo.Length) // 所有Badmark都读完 去贴附点
                                {
                                    RUN_ReadBadmark_MarkIndex = 0;
                                    RUN_ReadBadmark_PasteIndex = 0;
                                    this.FlowIndex = 20310;
                                    this.FlowInit = false;
                                }
                                else
                                {
                                    RUN_ReadBadmark_MarkIndex = 0;
                                    this.FlowIndex = 20411;
                                    this.FlowInit = false;
                                }
                            }
                            else // 
                            {
                                this.FlowIndex = 20411;
                                this.FlowInit = false;
                            }
                            break;
                        #endregion
                        //*************************************************[抛料]********************************************************************************************
                        #region 20150 - 回拍
                        case 20150: // 到回拍位置
                            if (VariableSys.bEnableVaccumCheck)
                            {
                                if (!FlowInit)
                                {
                                    FlowIndex_Name = "到回拍位置";
                                    this.XYGoPos(VariableSys.pReadyPoint, VariableSys.VelMode_Current);
                                    this.TurnGo(VariableSys.dTurnPasteAngle, VariableSys.VelMode_Current);

                                    // 设置打光
                                    this.SetLightAndShutter();
                                    this.FlowInit = true;
                                }
                                else
                                {
                                    if (this.AxisReach(VariableSys.pReadyPoint)
                                        && this.TurnReach(VariableSys.dTurnPasteAngle))
                                    {
                                        Thread.Sleep(VariableSys.iDownCamDelay/2);
                                        try
                                        {
                                            this.CheckLabelTask = null;
                                            for (CAM cam = CAM.Bottom1; cam <= CAM.Bottom2; cam++)
                                            {
                                                this.RUN_CheckLabelCaled[(int)cam - 1] = false;
                                                this.RUN_CheckLabelImg[(int)cam - 1]?.Dispose();
                                                this.RUN_CheckLabelImg[(int)cam - 1] = CameraDefine.Instance[cam]._Session.Grab(null, true);
                                            }
                                            this.CheckLabel();
                                        }
                                        catch
                                        {
                                        }

                                        this.FlowIndex = 20214;
                                        this.FlowInit = false;
                                    }

                                    if (!this.X.bAxisIsRunning || !this.Y.bAxisIsRunning)
                                        this.XYGoPos(VariableSys.pReadyPoint, VariableSys.VelMode_Current);

                                    if (!this.Turn.bAxisIsRunning)
                                        this.TurnGo(VariableSys.dTurnPasteAngle, VariableSys.VelMode_Current);
                                }
                            }
                            else
                            {
                                this.FlowIndex = 20214;
                                this.FlowInit = false;
                            }
                            break;
                        #endregion

                        #region 20210-抛料
                        case 20210:
                            //! 抛料时 翻转气缸没有翻转
                            if (VariableSys.machineVersion == 2 && !Turn.AxisReach(VariableSys.dTurnXIAngle))
                            {
                                this.FlowDoneIndex = this.FlowIndex;
                                this.FlowIndex = 10100;
                                break;
                            }

                            this.FlowInit = false;
                            this.FlowIndex = 20211;
                            break;
                        case 20211:
                            this.DoThrow_GoPos(this.RUN_DropList);
                            break;
                        case 20212:
                            this.DoThrow_GoThrowHeigh(this.RUN_DropList);
                            break;
                        case 20213:
                            this.DoThrow_GoSafeHeigh(this.RUN_DropList);
                            break;
                        case 20214:
                            if (!this.FlowInit)
                            {
                                int rtn = this.FindNextDropNozzle(RUN_Index_LastFeederUsed == 2, out this.RUN_DropList);
                                if (rtn == 0)
                                {
                                    this.FlowIndex = 20210;
                                    this.FlowInit = false;
                                }
                                else if (rtn == 1)
                                {
                                    break;
                                }
                                else // 没有找到抛料
                                {
                                    string alarmed = string.Empty;
                                    for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
                                    {
                                        var zParam = this.Z_RunParamMap[i];
                                        if (zParam.RUN_bNozzleUse
                                            && !zParam.CamResult.bHaveLabel)
                                        {
                                            zParam.SuckFailCount++;
                                            zParam.CalFinished = false;
                                            if (zParam.SuckFailCount >= VariableSys.iSuckAlarmTime)
                                            {
                                                zParam.SuckFailCount = 0;
                                                zParam.ThrowLabelCount = 0;
                                                zParam.ThrowWarningCount = 0;
                                                alarmed += $"吸嘴{i+1}";
                                            }
                                        }
                                        else
                                            zParam.SuckFailCount = 0;
                                    }

                                    if(alarmed != string.Empty)
                                        this.AlarmInfoInvoke($"{alarmed} 连续吸标失败，请检查吸标是否OK!!!", AlarmLevel.Alarm);

                                    this.RUN_ThrowNozzle = 0;
                                    this.FlowIndex = 10000;
                                    this.FlowInit = false;
                                }
                            }
                            break;
                        #endregion

                        //*************************************************[贴标]********************************************************************************************
                        //todo 贴标流程
                        #region 20310-贴标
                        case 20310:
                            #region 20310-贴附信息解析  根据上视觉结果判断是否要贴标
                            if (!this.FlowInit)
                            {
                                RestartStopwatch();
                                Z_RunParam zParam = null;
                                bool findPasteOK = false;
                                uint zIndex = 0;
                                int rtn = this.FindNextPasteNozzle(true, out zIndex);

                                if (rtn == 0) // found success
                                {
                                    findPasteOK = true;
                                    this.RUN_PasteNozzle = zIndex;
                                    zParam = this.Z_RunParamMap[this.RUN_PasteNozzle];
                                }
                                else if (rtn == 1) // wait down finished
                                {
                                    break;
                                }
                                else if (rtn == -1) // not found go to drop
                                {
                                    this.All_RGoPos(0, VariableSys.VelMode_Current);
                                    this.FlowIndex = 20150;
                                    this.FlowInit = false;
                                    break;
                                }

                                if (zParam == null) // 如果zParam 为null 说明没找到 直接抛料
                                {
                                    this.All_RGoPos(0, VariableSys.VelMode_Current);
                                    this.FlowIndex = 20150;
                                    this.FlowInit = false;
                                    break;
                                }

                                if (findPasteOK) // Mark点计算
                                {
                                    if (!JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].bMark1Caled && !JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].bMark2Caled)
                                    {
                                        #region 上CCD计算
                                        UpCCDResult[0] = JOB.UpCCDResult1[zParam.RUN_PasteInfoIndex];
                                        if (JOB.iLocalAlign == 1 && JOB.bLocalMode)
                                        {
                                            UpCCDResult[0].Angle = RUN_GloablAngle;
                                        }

                                        newMark1 = Point2CCDCenter(JOB.Cam_Mark1Point[zParam.RUN_PasteInfoIndex], new PointContour(UpCCDResult[0].X, UpCCDResult[0].Y), 0, 0);
                                        if (RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].AlinIndex2 == 0)
                                        {
                                            JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].TransformedPoints = TransformPointsFormMarkAndAngle_IsPaste(RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].PastePoints, RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].Mark1, newMark1, UpCCDResult[0].Angle, ref JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].Rotation, RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].IsPastePointsAbs);
                                        }
                                        else
                                        {
                                            UpCCDResult[1] = JOB.UpCCDResult2[zParam.RUN_PasteInfoIndex];
                                            newMark2 = Point2CCDCenter(JOB.Cam_Mark2Point[zParam.RUN_PasteInfoIndex], new PointContour(UpCCDResult[1].X, UpCCDResult[1].Y), 0, 0);

                                            #region 比较Mark 距离,是否抓错
                                            var len1 = CommonHelper.GetDist(RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].Mark1, RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].Mark2);
                                            var len2 = CommonHelper.GetDist(newMark1, newMark2);
                                            if (Math.Abs(len2 - len1) >= 0.3)
                                            {
                                                this.AlarmInfoInvoke("软板Mark点识别超管控 误差>0.3mm,请检查Mark点是否抓错,重新清料再开始程序", AlarmLevel.Err);
                                            }
                                            #endregion

                                            JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].TransformedPoints = TransformPointsForm2Mark_IsPaste(RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].PastePoints, RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].Mark1, RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].Mark2, newMark1, newMark2, ref JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].Rotation, RUN_PASTEInfo[zParam.RUN_PasteInfoIndex_List].IsPastePointsAbs);
                                        }

                                        ImageCapture_Up2.Overlays.Default.AddText(JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].Rotation.ToString("F2"), new PointContour(500, 500), Rgb32Value.BlueColor, new OverlayTextOptions("Consolas", 125));
                                        JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].bMark1Caled = true;
                                        JOB.PASTEInfo[zParam.RUN_PasteInfoIndex].bMark2Caled = true;
                                        #endregion
                                    }

                                    this.FlowIndex = 20311;
                                    this.FlowInit = false;
                                }
                            }
                            #endregion
                            break;
                        case 20311:
                            this.DoPaste_GoPos(this.RUN_PasteNozzle);
                            break;
                        case 20312:
                            this.DoPaste_PutDown(this.RUN_PasteNozzle);
                            break;
                        case 20313:
                            this.DoPaste_GoSafe(this.RUN_PasteNozzle);
                            break;
                        #endregion

                        default:
                            Thread.Sleep(10);
                            break;
                    }
                }
                catch (Exception ex)
                {
                    Form_Main.Instance.PutInLog("D://异常//", "软件异常", $"软件异常:{ex.Message}\r\n {ex.Source}\r\n {ex.StackTrace}\r\n");
                    Thread.Sleep(10);
                }
            }
        }//

        /// <summary>
        /// 轨道吸/吹气
        /// </summary>
        private void Open_ConveyorXI()
        {
            Y.SetIO_OUT(5);
        }

        /// <summary>
        /// 轨道吸/吹气
        /// </summary>
        private void Close_ConveyorXI()
        {
            Y.ResetIO_OUT(5);
        }
        //todo 轨道流程
        private void thread_Conveyor()//轨道流程-单轨道模式
        {
            Stopwatch sw_StopUp = new Stopwatch();
            bool ByPass = false;
            // 1 - 左进右出 2 - 右进左出 3 - 左进左出 4 - 右进右出
            while (!bSystemExit)
            {
                Thread.Sleep(5);
                ByPass = RunMode == 3;
                if (ByPass)
                {
                    StopProduct_OFF();
                    CarryProduct_OFF();
                }

                if (Variable.PassWordOK != 0 && Variable.PassWordOK != 1 
                    && (RunMode == 1 || RunMode == 3))//自动模式下
                {
                    switch (FlowIndex_Conveyor)//左进右出 左进左出
                    {
                        #region 100-等待进板
                        case 100://等待进板
                            if (!FlowInit_Conveyor)
                            {
                                FlowIndex_ConveyorName = "等待进板";

                                if (StatisticsHelper.Instance.Reoprt.CurRecordTime == TimeDefine.WaitOuputTime)
                                    StatisticsHelper.Instance.Reoprt.Start(TimeDefine.ProductTime, $"回复出板[{VariableSys.sProgramName}]");

                                ResetInformBackTake(); // 重置向后出板
                                InformBeforeGive(); // 向前要板
                                ConveyorStop();

                                if(!ByPass)
                                    StopProduct_ON();//挡板下降

                                FlowInit_Conveyor = true;
                                RestartStopwatch_Conveyor();
                            }
                            else
                            {
                                if (this.WrokInput)
                                {
                                    Open_ConveyorXI();
                                    ConveryInput();

                                    FlowIndex_Conveyor_Done = FlowIndex_Conveyor;
                                    FlowInit_Conveyor = false;
                                    if (ByPass)
                                    {
                                        Thread.Sleep(1000);
                                        Thread.Sleep(VariableSys.iDelayReach);
                                        FlowIndex_Conveyor = 550;
                                    }
                                    else
                                        FlowIndex_Conveyor = 300;

                                    StatisticsHelper.Instance.Reoprt.Start(TimeDefine.ProductTime, $"回复进板[{VariableSys.sProgramName}]");
                                }

                                if (StopWatch_FlowIndex_Conveyor.ElapsedMilliseconds > 10000
                                                              && StatisticsHelper.Instance.Reoprt.CurRecordTime == TimeDefine.ProductTime)
                                {
                                    StatisticsHelper.Instance.Reoprt.Start(TimeDefine.WaitInputTime, $"等待进板[{VariableSys.sProgramName}]");
                                }
                            }

                            if (FlowIndex_Conveyor != 100)
                            {
                                this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[轨道]100:等待进板时间:" + StopWatch_FlowIndex_Conveyor.ElapsedMilliseconds.ToString() + "ms" });//
                            }
                            break;
                        #endregion
                        #region 300-减速到到位
                        case 300://减速到到位
                            if (!FlowInit_Conveyor)
                            {
                                FlowIndex_ConveyorName = "减速到到位";

                                FlowInit_Conveyor = true;
                                RestartStopwatch_Conveyor();
                            }
                            else
                            {
                                if (bArr_IO_IN_Status.bIN_WorkSpace_Reach)//轨道到位sensor
                                {
                                    ResetInformBeforeGive();

                                    Close_ConveyorXI();

                                    Thread.Sleep(VariableSys.iDelayReach);
                                    ConveyorStop();
                                    CarryProduct_ON();
                                    Thread.Sleep(VariableSys.iDelayReached);
                                    StopProduct_OFF();

                                    Thread.Sleep(300); // 用于夹板气缸到位
                                    if (!bArr_IO_IN_Status.bIN_Carry_Move.GetIO())
                                    {
                                        this.AlarmInfoInvoke("夹板动点未感应，请检查夹板是否到位！", AlarmLevel.Warn);
                                        break;
                                    }

                                    RUN_bReachOK = true;
                                    FlowIndex_Conveyor_Done = FlowIndex_Conveyor;
                                    FlowInit_Conveyor = false;
                                    FlowIndex_Conveyor = 500;
                                }
                            }

                            if (FlowIndex_Conveyor != 300)
                            {
                                this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[轨道]300:减速到到位时间:" + StopWatch_FlowIndex_Conveyor.ElapsedMilliseconds.ToString() + "ms" });//
                            }

                            if (FlowIndex_Conveyor == 300 && StopWatch_FlowIndex_Conveyor.ElapsedMilliseconds > 10000)
                            {
                                this.AlarmInfoInvoke("步骤[轨道]300:进板到位超时", AlarmLevel.Warn);
                            }
                            break;
                        #endregion
                        #region 500-等待贴装完成
                        case 500://等待贴装完成
                            if (FlowInit_Conveyor == false)
                            {
                                if (VariableSys.LanguageFlag == 1)
                                    FlowIndex_ConveyorName = "等待贴装完成";
                                this.ResetInformBeforeGive();

                                FlowInit_Conveyor = true;
                                RestartStopwatch_Conveyor();
                                Test.Reset();
                                Test.Start();
                            }
                            else
                            {
                                if (RUN_bPasteOK)//贴装OK且进板OK---夹板气缸降下来-再次进板停止
                                {
                                    Test.Stop();

                                    RUN_bReachOK = false;
                                    RUN_bPasteOK = false;
                                    Open_ConveyorXI();

                                    CarryProduct_OFF();
                                    FlowIndex_Conveyor_Done = FlowIndex_Conveyor;
                                    FlowInit_Conveyor = false;
                                    FlowIndex_Conveyor = 550;
                                }
                            }

                            if (FlowIndex_Conveyor != 500)
                            {
                                this.BeginInvoke(new VoidDO_Str(PutInLog), new object[] { "步骤[轨道]600:等待贴装完成时间:" + StopWatch_FlowIndex_Conveyor.ElapsedMilliseconds.ToString() + "ms" });//
                            }
                            break;
                        #endregion
                        #region 550-到出板口
                        case 550:
                            if (!FlowInit_Conveyor)
                            {
                                FlowIndex_ConveyorName = "等待到出板口";
                                InformBackTake(); // 向后出板
                                this.ResetInformBeforeGive();
                                Thread.Sleep(200);
                                ConveryOutput();
                                FlowInit_Conveyor = true;
                                RestartStopwatch_Conveyor();
                            }
                            else
                            {
                                if (this.WrokOutput)
                                {
                                    ConveyorStop();
                                    FlowIndex_Conveyor_Done = FlowIndex_Conveyor;
                                    FlowInit_Conveyor = false;
                                    //todo 循环运行
                                    if (CycleRun == true && VariableSys.dFlowIN_OUT == 3)
                                    {
                                        Thread.Sleep(2000);
                                        FlowIndex_Conveyor = 100;
                                    }
                                    else
                                    {
                                        FlowIndex_Conveyor = 600;
                                    }
                                }
                                else
                                {
                                    if (StopWatch_FlowIndex_Conveyor.ElapsedMilliseconds > 10000)
                                    {
                                        ConveyorStop();
                                        this.AlarmInfoInvoke("步骤[轨道]550:到出板口超时,请检查轨道是否卡板", AlarmLevel.Warn);
                                    }
                                }
                            }
                            break;
                        #endregion
                        #region 600-检测出板信号
                        case 600://出板
                            if (!FlowInit_Conveyor)
                            {
                                FlowIndex_ConveyorName = "检测出板信号";
                                FlowInit_Conveyor = true;
                                RestartStopwatch_Conveyor();
                            }
                            else
                            {
                                if (!this.WrokOutput) // 手动拿掉板子 或者  离线式 到出板口暂停
                                {
                                    Thread.Sleep(1000);
                                    FlowIndex_Conveyor_Done = FlowIndex_Conveyor;
                                    FlowInit_Conveyor = false;
                                    FlowIndex_Conveyor = 100;
                                    break;
                                }

                                if (StopWatch_FlowIndex_Conveyor.ElapsedMilliseconds > 10000)
                                {
                                    StatisticsHelper.Instance.Reoprt.Start(TimeDefine.WaitOuputTime, $"等待出板{VariableSys.sProgramName}");
                                }

                                if (VariableSys.bSystemIsOnLine)
                                {
                                    if (VariableSys.bAfterBreakEN)
                                    {
                                        if (bArr_IO_IN_Status.bIN_AfterRequest)
                                            ConveryOutput();
                                        else
                                            break;
                                    }
                                    else
                                        ConveryOutput();
                                }

                                FlowIndex_Conveyor_Done = FlowIndex_Conveyor;
                                FlowInit_Conveyor = false;
                                FlowIndex_Conveyor = 650;
                            }
                            break;
                        #endregion
                        #region 650完全出板
                        case 650:
                            if (!FlowInit_Conveyor)
                            {
                                FlowIndex_ConveyorName = "等待完全出板";
                                FlowInit_Conveyor = true;
                                RestartStopwatch_Conveyor();
                            }
                            else
                            {
                                if (!this.WrokOutput)
                                {
                                    FlowIndex_Conveyor_Done = FlowIndex_Conveyor;
                                    FlowInit_Conveyor = false;
                                    FlowIndex_Conveyor = 100;
                                }

                                if (VariableSys.bSystemIsOnLine && StopWatch_FlowIndex_Conveyor.ElapsedMilliseconds > 10000)
                                {
                                    this.AlarmInfoInvoke("步骤[轨道]650:轨道完全出板超时", AlarmLevel.Warn);
                                }
                            }
                            break;
                            #endregion
                    }
                    Thread.Sleep(5);
                }
                else//手动模式下
                {
                    Thread.Sleep(500);
                }
            }

        }

        #region 新轨道流程
        /// <summary>
        /// 进板
        /// </summary>
        private void ConveryInput()
        {
            switch (VariableSys.dFlowIN_OUT)//1-左进右出 2-右进左出 3-左进左出 4-右进右出
            {
                case 1://1-左进右出
                case 3://3-左进左出
                    ConveyorJog(true);
                    break;
                case 2://2-右进左出
                case 4://4-右进右出
                    ConveyorJog(false);
                    break;
            }
        }

        /// <summary>
        /// 出板
        /// </summary>
        private void ConveryOutput()
        {
            switch (VariableSys.dFlowIN_OUT)//1-左进右出 2-右进左出 3-左进左出 4-右进右出
            {
                case 2://2-右进左出
                case 3://3-左进左出
                    ConveyorJog(false);
                    break;
                case 1://1-左进右出
                case 4://4-右进右出
                    ConveyorJog(true);
                    break;
            }
        }

        /// <summary>
        /// 轨道进板口
        /// </summary>
        private bool WrokInput
        {
            get
            {
                switch(VariableSys.dFlowIN_OUT)//1-左进右出 2-右进左出 3-左进左出 4-右进右出
                {
                    case 1://1-左进右出
                    case 3:// 3-左进左出
                        return bArr_IO_IN_Status.bIN_WorkSpace_IN;
                    case 2:// 2-右进左出
                    case 4://4-右进右出
                        return bArr_IO_IN_Status.bIN_WorkSpace_Out;
                }

                return false;
            }
        }

        /// <summary>
        /// 轨道出板口
        /// </summary>
        private bool WrokOutput
        {
            get
            {
                switch (VariableSys.dFlowIN_OUT)//1-左进右出 2-右进左出 3-左进左出 4-右进右出
                {
                    case 1://1-左进右出
                    case 4://4-右进右出
                        return bArr_IO_IN_Status.bIN_WorkSpace_Out;
                    case 3:// 3-左进左出
                    case 2:// 2-右进左出
                        return bArr_IO_IN_Status.bIN_WorkSpace_IN;
                }
                return false;
            }
        }
        #endregion

        private void thread_DryRun()
        {
            TestInit = false;
            while (bTest)
            {
                Thread.Sleep(1);
                if (RunMode == 1)
                {
                    bTest = false;
                }
                #region 手动模式--空跑模式
                if (RunMode != 1)
                {
                    switch (TestIndex)
                    {
                        case 0:
                            if (!TestInit)
                            {
                                TestInit = true;
                                XYGoPos(VariableSys.pTest1, VariableSys.VelMode_Test);
                            }
                            else
                            {
                                if (AxisReach(VariableSys.pTest1))
                                {
                                    Thread.Sleep(50);
                                    this.Invoke(new VoidDO(Manual_UpCamSnap_ImageSet));
                                    TestIndex = 1;
                                    TestInit = false;
                                }
                            }
                            break;
                        case 1:
                            if (!TestInit)
                            {
                                TestInit = true;
                                XYGoPos(VariableSys.pTest2, VariableSys.VelMode_Test);
                            }
                            else
                            {
                                if (AxisReach(VariableSys.pTest2))
                                {
                                    Thread.Sleep(50);
                                    this.Invoke(new VoidDO(Manual_UpCamSnap_ImageSet));
                                    TestIndex = 2;
                                    TestInit = false;
                                }
                            }
                            break;
                        case 2:
                            if (!TestInit)
                            {
                                TestInit = true;
                                XYGoPos(VariableSys.pTest3, VariableSys.VelMode_Test);
                            }
                            else
                            {
                                if (AxisReach(VariableSys.pTest3))
                                {
                                    this.Invoke(new VoidDO(Manual_UpCamSnap_ImageSet));
                                    TestInit = false;
                                    TestIndex = 3;
                                }
                            }
                            break;
                        case 3:
                            if (!TestInit)
                            {
                                TestInit = true;
                                XYGoPos(VariableSys.pTest4, VariableSys.VelMode_Test);
                            }
                            else
                            {
                                if (AxisReach(VariableSys.pTest4))
                                {
                                    this.Invoke(new VoidDO(Manual_UpCamSnap_ImageSet));
                                    TestInit = false;
                                    TestIndex = 0;
                                }
                            }
                            break;
                    }
                }
                #endregion
                Thread.Sleep(10);
            }
        }

        private void thread_DryPathRun()
        {
            TestInit = false;
            while (bTest)
            {
                if (RunMode == 1)
                {
                    bTest = false;
                }
                #region 手动模式--空跑模式
                if (RunMode != 1)
                {
                    switch (TestIndex)
                    {
                        case 0:
                            if (!TestInit)
                            {
                                TestInit = true;
                                if (this.All_ZGoSafeTillStop(2000, VariableSys.VelMode_Debug_Manual))
                                {
                                    XYGoPos(VariableSys.pTest1, VariableSys.VelMode_Test);
                                }
                            }
                            else
                            {
                                Thread.Sleep(100);
                                this.Invoke(new VoidDO(Manual_UpCamSnap_ImageSet));
                                TestIndex = 1;
                                TestInit = false;
                            }
                            break;
                        case 1:
                            if (!TestInit)
                            {
                                TestInit = true;
                                if (this.All_ZGoSafeTillStop(2000, VariableSys.VelMode_Debug_Manual))
                                {
                                    if (!X.bAxisIsRunning || !Y.bAxisIsRunning)
                                    {
                                        XYGoPos(VariableSys.pTest2, VariableSys.VelMode_Test);
                                    }
                                    else
                                    {
                                        XYChangePos(VariableSys.pTest2, VariableSys.VelMode_Test);
                                        Console.WriteLine("change pos....\r\n");
                                    }
                                }
                            }
                            else
                            {
                                if (AxisReach(VariableSys.pTest2))
                                {
                                    Thread.Sleep(50);
                                    this.Invoke(new VoidDO(Manual_UpCamSnap_ImageSet));
                                    TestIndex = 2;
                                    TestInit = false;
                                }
                            }
                            break;
                        case 2:
                            if (!TestInit)
                            {
                                TestInit = true;
                                if (this.All_ZGoSafeTillStop(2000, VariableSys.VelMode_Debug_Manual))
                                {
                                    XYGoPos(VariableSys.pTest3, VariableSys.VelMode_Test);
                                }
                            }
                            else
                            {
                                if (AxisReach(VariableSys.pTest3))
                                {
                                    Thread.Sleep(50);
                                    this.Invoke(new VoidDO(Manual_UpCamSnap_ImageSet));
                                    TestInit = false;
                                    TestIndex = 3;
                                }
                            }
                            break;
                        case 3:
                            if (!TestInit)
                            {
                                TestInit = true;
                                if (this.All_ZGoSafeTillStop(2000, VariableSys.VelMode_Debug_Manual))
                                {
                                    if (!X.bAxisIsRunning || !Y.bAxisIsRunning)
                                    {
                                        XYGoPos(VariableSys.pTest4, VariableSys.VelMode_Test);
                                    }
                                    else
                                    {
                                        XYChangePos(VariableSys.pTest4, VariableSys.VelMode_Test);
                                        Console.WriteLine("change pos....\r\n");
                                    }
                                }
                            }
                            else
                            {
                                Thread.Sleep(100);
                                this.Invoke(new VoidDO(Manual_UpCamSnap_ImageSet));
                                TestInit = false;
                                TestIndex = 0;
                                //if (AxisReach(VariableSys.pTest4.X, VariableSys.Xpos_ENC) && AxisReach(VariableSys.pTest4.Y, VariableSys.Ypos_ENC))
                                //{
                                //    this.Invoke(new VoidDO(Manual_UpCamSnap_ImageSet));
                                //    TestInit = false;
                                //    TestIndex = 0;
                                //}
                            }
                            break;
                    }
                }
                #endregion
                Thread.Sleep(10);
            }
        }



        //todo 计时器
        private void RestartStopwatch()//主流程计时器重新启动
        {
            StopWatch_FlowIndex.Reset();
            StopWatch_FlowIndex.Start();
        }

        private void RestartStopwatch_Conveyor()//轨道计时器重新启动
        {
            StopWatch_FlowIndex_Conveyor.Reset();
            StopWatch_FlowIndex_Conveyor.Start();
        }

        private short GG_Failed()//轴卡异常处理
        {
            DialogResult dialogresult;
            if (VariableSys.LanguageFlag == 1)
            {
                dialogresult = MessageBox.Show("Fail to control the motion,Yes-retry|cancel-exit", "Info", MessageBoxButtons.OKCancel);
            }
            else
            {
                dialogresult = MessageBox.Show("轴卡交互异常,确定-再次交互|取消-退出程序", "提示", MessageBoxButtons.OKCancel);
            }
            if (dialogresult == DialogResult.OK)
            {
                return 1;
            }
            else
            {
                return 2;
            }
        }

        /// <summary>
        /// 计算拍照点1 视觉图像
        /// </summary>
        /// <param name="LabelInfo">Paste 信息</param>
        /// <param name="Image">图像</param>
        /// <param name="camera">所属相机</param>
        /// <returns></returns>
        public Variable.CamReturn Auto_Detect1(ref Variable.PASTAE LabelInfo, VisionImage Image, CAM camera, int nozzle = 0)
        {
            short rtn = 0;
            int areacount = 0;
            bool bIsWhite = false;
            Variable.CamReturn camreturn = new Variable.CamReturn();

            if (LabelInfo.AlinIndex1 == 0)//NONE
            {
                camreturn.X = 0;
                camreturn.Y = 0;
                camreturn.IsOK = false;
                rtn = 1;
                return camreturn;
            }

            int dist = 0;
            camreturn.IsOK = false;
            Image.Overlays.Default.Clear();

            RectangleContour Init = new RectangleContour(LabelInfo.Init_ROI_Left1, LabelInfo.Init_ROI_Top1, LabelInfo.Init_ROI_Width1, LabelInfo.Init_ROI_Height1);

            int calib = 0;
            // 推算出新的Init区域
            if (camera != CAM.Top)
            {
                Init = VariableSys.rDownROI[nozzle];
                if (nozzle == 0 || nozzle == 2)
                    dist = 500;
                calib = nozzle % 2;
            }

            CoordinateSystem oldCoord = new CoordinateSystem();
            CoordinateSystem newCoord = new CoordinateSystem();

            oldCoord.Origin = new PointContour(LabelInfo.Init_Point1.X, LabelInfo.Init_Point1.Y);
            oldCoord.Angle = LabelInfo.Init_Angle1;
            Image = GainOffset(Image, LabelInfo.GainInit1, LabelInfo.OffsetInit1);
            camreturn.bHaveLabel = true;

            #region 多料判断
            if (LabelInfo.bAreaEN1)
            {
                if (LabelInfo.iAreaOKStyle1 == 1)
                    bIsWhite = true;
                else
                    bIsWhite = false;

                areacount = AreaCount(Image, Init.ConvertToRoi(), bIsWhite);

                if (areacount > LabelInfo.iAreaMin1 && areacount < LabelInfo.iAreaMax1)
                {
                    rtn = 0;
                    Image.Overlays.Default.AddText("AreaCount:" + "OK:" + areacount.ToString(), new PointContour(100 + dist, 400), Rgb32Value.BlueColor, new OverlayTextOptions("Consolas", 125));
                }
                else
                {
                    rtn = -1;
                    Image.Overlays.Default.AddText("AreaCount:" + "NG:" + areacount.ToString(), new PointContour(100 + dist, 400), Rgb32Value.RedColor, new OverlayTextOptions("Consolas", 125));
                    if (areacount < (LabelInfo.iAreaMin1 / 2))
                    {
                        camreturn.bHaveLabel = false;
                        camreturn.State = Variable.VisionState.NoLabel;
                    }
                    else
                    {
                        camreturn.State = Variable.VisionState.MoreLabel;
                    }
                }
            }
            #endregion

            if (rtn == 0 && LabelInfo.AlinIndex1 == 13 && camera != CAM.Top)
            {
                var img = HalconHelper.NI2HImage(Image);
                HalconHelper.FindShapeModel(img, Init, LabelInfo.Model1ID, ref camreturn);
                if (!camreturn.IsOK)
                {
                    camreturn.State = Variable.VisionState.InitFail;
                    rtn = -1;
                }

                double offsetX = (double)LabelInfo.Init_OffsetX1 * camreturn.XScale;
                double offsetY = (double)LabelInfo.Init_OffsetY1 * camreturn.YScale;
                PointContour outPt = new PointContour();
                outPt.X = camreturn.X + offsetX;
                outPt.Y = camreturn.Y + offsetY;
                var PTRotated = Form_Main.Instance.PtRotateDown(outPt, new PointContour(camreturn.X, camreturn.Y), -camreturn.Angle);
                camreturn.X = PTRotated.X;
                camreturn.Y = PTRotated.Y;
            }

            #region PatternMatch 1 4 7
            if (rtn == 0 && (LabelInfo.AlinIndex1 == 1 || LabelInfo.AlinIndex1 == 4 || LabelInfo.AlinIndex1 == 7))//PM
            {
                Image.Overlays.Default.AddRectangle(Init);
                rtn = CamDetect_PatternMatch(Image, LabelInfo.Align1, (float)(LabelInfo.Score1), 1, (float)(LabelInfo.MinAngle1), (float)(LabelInfo.MaxAngle1), Init.ConvertToRoi(), ref camreturn, LabelInfo.Init_OffsetX1, LabelInfo.Init_OffsetY1);
                if (rtn == 0)
                {
                    Image.Overlays.Default.AddText("灰度匹配:" + "OK", new PointContour(100 + dist, 1000), Rgb32Value.BlueColor, new OverlayTextOptions("Consolas", 125));
                }
                else
                {
                    Image.Overlays.Default.AddText("灰度匹配:" + "NG", new PointContour(100 + dist, 1000), Rgb32Value.RedColor, new OverlayTextOptions("Consolas", 125));
                    camreturn.State = Variable.VisionState.InitFail;
                }
            }
            #endregion

            #region SearchGeometric 2 5 8
            if (rtn == 0 && (LabelInfo.AlinIndex1 == 2 || LabelInfo.AlinIndex1 == 5 || LabelInfo.AlinIndex1 == 8))//GM
            {
                Image.Overlays.Default.AddRectangle(Init);
                rtn = CamDetect_SearchGeometric(Image, LabelInfo.Align1, Init.ConvertToRoi(), LabelInfo.Score1, 1, LabelInfo.MinAngle1, LabelInfo.MaxAngle1, 100, 100, 0, 25, ref camreturn, LabelInfo.Init_OffsetX1, LabelInfo.Init_OffsetY1);
                if (rtn == 0)
                    Image.Overlays.Default.AddText("边缘匹配:" + "OK", new PointContour(100 + dist, 1000), Rgb32Value.BlueColor, new OverlayTextOptions("Consolas", 125));
                else
                {
                    Image.Overlays.Default.AddText("边缘匹配:" + "NG", new PointContour(100 + dist, 1000), Rgb32Value.RedColor, new OverlayTextOptions("Consolas", 125));
                    camreturn.State = Variable.VisionState.InitFail;
                }
            }
            #endregion

            #region Circle 3 4 5
            if ((LabelInfo.AlinIndex1 == 3 || LabelInfo.AlinIndex1 == 4 || LabelInfo.AlinIndex1 == 5) && rtn == 0)//M+Circle
            {

                Roi Second = new Roi(new RectangleContour(LabelInfo.S_ROI_Left1, LabelInfo.S_ROI_Top1, LabelInfo.S_ROI_Width1, LabelInfo.S_ROI_Height1));
                Image.Overlays.Default.AddRectangle(new RectangleContour(LabelInfo.S_ROI_Left1, LabelInfo.S_ROI_Top1, LabelInfo.S_ROI_Width1, LabelInfo.S_ROI_Height1));
                if (LabelInfo.AlinIndex1 != 3)
                {
                    newCoord.Origin = new PointContour(camreturn.X, camreturn.Y);
                    newCoord.Angle = camreturn.Angle;
                    Algorithms.TransformRoi(Second, new CoordinateTransform(oldCoord, newCoord));
                }
                else
                {
                    newCoord.Origin = new PointContour(LabelInfo.S_Center1.X, LabelInfo.S_Center1.Y);
                    newCoord.Angle = 0;
                }

                double r = 0;
                PointContour A = new PointContour();
                rtn = CamDetect_Circle(Image, Second, LabelInfo.S_MinR1, LabelInfo.S_MaxR1, ref A, ref r);
                camreturn.X = A.X;
                camreturn.Y = A.Y;
                if (rtn != 0)
                {
                    camreturn.State = Variable.VisionState.FindCircleFail;
                }
            }
            #endregion

            #region Corner-single 6 7 8
            if (rtn == 0 && (LabelInfo.AlinIndex1 == 6 || LabelInfo.AlinIndex1 == 7 || LabelInfo.AlinIndex1 == 8))//M+Corner
            {
                Roi H1 = new Roi(new RectangleContour(LabelInfo.Corner_H1_Left1, LabelInfo.Corner_H1_Top1, LabelInfo.Corner_H1_Width1, LabelInfo.Corner_H1_Height1));
                Roi H2 = new Roi(new RectangleContour(LabelInfo.Corner_H2_Left1, LabelInfo.Corner_H2_Top1, LabelInfo.Corner_H2_Width1, LabelInfo.Corner_H2_Height1));
                Roi V1 = new Roi(new RectangleContour(LabelInfo.Corner_V1_Left1, LabelInfo.Corner_V1_Top1, LabelInfo.Corner_V1_Width1, LabelInfo.Corner_V1_Height1));
                Roi V2 = new Roi(new RectangleContour(LabelInfo.Corner_V2_Left1, LabelInfo.Corner_V2_Top1, LabelInfo.Corner_V2_Width1, LabelInfo.Corner_V2_Height1));

                if (LabelInfo.AlinIndex1 != 6)
                {
                    newCoord.Origin = new PointContour(camreturn.X, camreturn.Y);
                    newCoord.Angle = camreturn.Angle;
                    Algorithms.TransformRoi(H1, new CoordinateTransform(oldCoord, newCoord));
                    Algorithms.TransformRoi(H2, new CoordinateTransform(oldCoord, newCoord));
                    Algorithms.TransformRoi(V1, new CoordinateTransform(oldCoord, newCoord));
                    Algorithms.TransformRoi(V2, new CoordinateTransform(oldCoord, newCoord));
                    Image.Overlays.Default.AddRectangle(H1.GetBoundingRectangle());//new RectangleContour(LabelInfo.Corner_H1_Left2, LabelInfo.Corner_H1_Top2, LabelInfo.Corner_H1_Width2, LabelInfo.Corner_H1_Height2));
                    Image.Overlays.Default.AddRectangle(H2.GetBoundingRectangle());//new RectangleContour(LabelInfo.Corner_H2_Left2, LabelInfo.Corner_H2_Top2, LabelInfo.Corner_H2_Width2, LabelInfo.Corner_H2_Height2));
                    Image.Overlays.Default.AddRectangle(V1.GetBoundingRectangle());//new RectangleContour(LabelInfo.Corner_V1_Left2, LabelInfo.Corner_V1_Top2, LabelInfo.Corner_V1_Width2, LabelInfo.Corner_V1_Height2));
                    Image.Overlays.Default.AddRectangle(V2.GetBoundingRectangle());//new RectangleContour(LabelInfo.Corner_V2_Left2, LabelInfo.Corner_V2_Top2, LabelInfo.Corner_V2_Width2, LabelInfo.Corner_V2_Height2));
                }
                SearchDirection searchDirection = new SearchDirection();
                EdgePolaritySearchMode edgeMode = new EdgePolaritySearchMode();
                #region 寻边参数
                if (LabelInfo.Corner_H1_PicDir1 == "Left2Right")
                {
                    searchDirection = SearchDirection.LeftToRight;
                }
                if (LabelInfo.Corner_H1_PicDir1 == "Right2Left")
                {
                    searchDirection = SearchDirection.RightToLeft;
                }
                if (LabelInfo.Corner_H1_PicDir1 == "Up2Bottom")
                {
                    searchDirection = SearchDirection.TopToBottom;
                }
                if (LabelInfo.Corner_H1_PicDir1 == "Bottom2Up")
                {
                    searchDirection = SearchDirection.BottomToTop;
                }
                if (LabelInfo.Corner_H1_GrayValueDir1 == "Dark2Light")
                {
                    edgeMode = EdgePolaritySearchMode.Rising;
                }
                else
                {
                    edgeMode = EdgePolaritySearchMode.Falling;
                }
                #endregion
                rtn = CamDetect_EdgeDetect(Image, H1, LabelInfo.Corner_H1_EdgeStrength1, searchDirection, edgeMode, ref P_Start, ref P_End);
                P_Mid_H1 = new PointContour();
                P_Mid_H1.X = (P_Start.X + P_End.X) / 2;
                P_Mid_H1.Y = (P_Start.Y + P_End.Y) / 2;
                #region 寻边参数
                if (LabelInfo.Corner_H2_PicDir1 == "Left2Right")
                {
                    searchDirection = SearchDirection.LeftToRight;
                }
                if (LabelInfo.Corner_H2_PicDir1 == "Right2Left")
                {
                    searchDirection = SearchDirection.RightToLeft;
                }
                if (LabelInfo.Corner_H2_PicDir1 == "Up2Bottom")
                {
                    searchDirection = SearchDirection.TopToBottom;
                }
                if (LabelInfo.Corner_H2_PicDir1 == "Bottom2Up")
                {
                    searchDirection = SearchDirection.BottomToTop;
                }
                if (LabelInfo.Corner_H2_GrayValueDir1 == "Dark2Light")
                {
                    edgeMode = EdgePolaritySearchMode.Rising;
                }
                else
                {
                    edgeMode = EdgePolaritySearchMode.Falling;
                }
                #endregion
                rtn += CamDetect_EdgeDetect(Image, H2, LabelInfo.Corner_H2_EdgeStrength1, searchDirection, edgeMode, ref P_Start, ref P_End);
                P_Mid_H2 = new PointContour();
                P_Mid_H2.X = (P_Start.X + P_End.X) / 2;
                P_Mid_H2.Y = (P_Start.Y + P_End.Y) / 2;
                #region 寻边参数
                if (LabelInfo.Corner_V1_PicDir1 == "Left2Right")
                {
                    searchDirection = SearchDirection.LeftToRight;
                }
                if (LabelInfo.Corner_V1_PicDir1 == "Right2Left")
                {
                    searchDirection = SearchDirection.RightToLeft;
                }
                if (LabelInfo.Corner_V1_PicDir1 == "Up2Bottom")
                {
                    searchDirection = SearchDirection.TopToBottom;
                }
                if (LabelInfo.Corner_V1_PicDir1 == "Bottom2Up")
                {
                    searchDirection = SearchDirection.BottomToTop;
                }
                if (LabelInfo.Corner_V1_GrayValueDir1 == "Dark2Light")
                {
                    edgeMode = EdgePolaritySearchMode.Rising;
                }
                else
                {
                    edgeMode = EdgePolaritySearchMode.Falling;
                }
                #endregion
                rtn += CamDetect_EdgeDetect(Image, V1, LabelInfo.Corner_V1_EdgeStrength1, searchDirection, edgeMode, ref P_Start, ref P_End);
                P_Mid_V1 = new PointContour();
                P_Mid_V1.X = (P_Start.X + P_End.X) / 2;
                P_Mid_V1.Y = (P_Start.Y + P_End.Y) / 2;
                #region 寻边参数
                if (LabelInfo.Corner_V2_PicDir1 == "Left2Right")
                {
                    searchDirection = SearchDirection.LeftToRight;
                }
                if (LabelInfo.Corner_V2_PicDir1 == "Right2Left")
                {
                    searchDirection = SearchDirection.RightToLeft;
                }
                if (LabelInfo.Corner_V2_PicDir1 == "Up2Bottom")
                {
                    searchDirection = SearchDirection.TopToBottom;
                }
                if (LabelInfo.Corner_V2_PicDir1 == "Bottom2Up")
                {
                    searchDirection = SearchDirection.BottomToTop;
                }
                if (LabelInfo.Corner_V2_GrayValueDir1 == "Dark2Light")
                {
                    edgeMode = EdgePolaritySearchMode.Rising;
                }
                else
                {
                    edgeMode = EdgePolaritySearchMode.Falling;
                }
                #endregion
                rtn += CamDetect_EdgeDetect(Image, V2, LabelInfo.Corner_V2_EdgeStrength1, searchDirection, edgeMode, ref P_Start, ref P_End);
                P_Mid_V2 = new PointContour();
                P_Mid_V2.X = (P_Start.X + P_End.X) / 2;
                P_Mid_V2.Y = (P_Start.Y + P_End.Y) / 2;
                if (rtn == 0)
                {
                    camreturn.X = Algorithms.FindIntersectionPoint(new LineContour(P_Mid_H1, P_Mid_H2), new LineContour(P_Mid_V1, P_Mid_V2)).X;
                    camreturn.Y = Algorithms.FindIntersectionPoint(new LineContour(P_Mid_H1, P_Mid_H2), new LineContour(P_Mid_V1, P_Mid_V2)).Y;
                    //计算角度
                    if (LabelInfo.AlinIndex2 == 0)//只拍一次
                    {
                        double stdAngle = 0;
                        PointContour P_Mid_H1Base = new PointContour(LabelInfo.Corner_H1_Point1.X, LabelInfo.Corner_H1_Point1.Y);
                        PointContour P_Mid_H2Base = new PointContour(LabelInfo.Corner_H2_Point1.X, LabelInfo.Corner_H2_Point1.Y);
                        PointContour P_Mid_V1Base = new PointContour(LabelInfo.Corner_V1_Point1.X, LabelInfo.Corner_V1_Point1.Y);
                        PointContour P_Mid_V2Base = new PointContour(LabelInfo.Corner_V2_Point1.X, LabelInfo.Corner_V2_Point1.Y);
                        if (LabelInfo.CornerAngleIndex1 == 0 || LabelInfo.CornerAngleIndex1 == 1)//H1算
                        {
                            if (P_Mid_H1.X >= P_Mid_H2.X)
                            {
                                stdAngle = getAngle(P_Mid_H2Base.X, P_Mid_H2Base.Y, P_Mid_H1Base.X, P_Mid_H1Base.Y);
                                camreturn.Angle = getAngle(P_Mid_H2.X, P_Mid_H2.Y, P_Mid_H1.X, P_Mid_H1.Y);
                            }
                            else
                            {
                                stdAngle = getAngle(P_Mid_H1Base.X, P_Mid_H1Base.Y, P_Mid_H2Base.X, P_Mid_H2Base.Y);
                                camreturn.Angle = getAngle(P_Mid_H1.X, P_Mid_H1.Y, P_Mid_H2.X, P_Mid_H2.Y);
                            }
                            if (camera == CAM.Top)//上视觉
                            {
                                camreturn.Angle = camreturn.Angle - stdAngle;
                            }
                        }

                        if (LabelInfo.CornerAngleIndex1 == 2 || LabelInfo.CornerAngleIndex1 == 3)//V2算
                        {
                            stdAngle = getAngle(P_Mid_V1Base.X, P_Mid_V1Base.Y, P_Mid_V2Base.X, P_Mid_V2Base.Y);
                            camreturn.Angle = getAngle(P_Mid_V1.X, P_Mid_V1.Y, P_Mid_V2.X, P_Mid_V2.Y);
                            if (camera == CAM.Top)//上视觉
                            {
                                camreturn.Angle = camreturn.Angle - stdAngle;
                            }
                        }
                    }
                    Image.Overlays.Default.AddPoint(Algorithms.FindIntersectionPoint(new LineContour(P_Mid_H1, P_Mid_H2), new LineContour(P_Mid_V1, P_Mid_V2)), Rgb32Value.BlueColor);
                }
                else
                {
                    camreturn.State = Variable.VisionState.FindLineFial;
                }
            }
            #endregion

            #region 直线抓边
            if (rtn == 0 && LabelInfo.GrabLine_Enable1)
            {
                try
                {
                    Roi Line = ConvertToRoi(LabelInfo.GrabLine_ROI1);
                    newCoord.Origin = new PointContour(camreturn.X, camreturn.Y);
                    newCoord.Angle = camreturn.Angle;
                    Algorithms.TransformRoi(Line, new CoordinateTransform(oldCoord, newCoord));
                    Image.Overlays.Default.AddRectangle(Line.GetBoundingRectangle());
                    SearchDirection sm = (SearchDirection)int.Parse(LabelInfo.GrabLine_PicDir1);
                    EdgePolaritySearchMode em = (EdgePolaritySearchMode)int.Parse(LabelInfo.GrabLine_GrayValueDir1);
                    PointContour sp = new PointContour();
                    PointContour ep = new PointContour();
                    rtn = CamDetect_EdgeDetect(Image, Line, LabelInfo.GrabLine_EdgeStrength1, sm, em, ref sp, ref ep);
                    if (rtn != 0)
                        camreturn.State = Variable.VisionState.FindLineFial;

                    if (LabelInfo.AlinIndex1 == 1 || LabelInfo.AlinIndex1 == 2)
                    {
                        if (sm == SearchDirection.LeftToRight || sm == SearchDirection.RightToLeft)
                            camreturn.Angle = -getAngle(sp.X, sp.Y, ep.X, ep.Y);
                        else
                            camreturn.Angle = getAngle(sp.X, sp.Y, ep.X, ep.Y);
                    }
                    else
                        camreturn.Angle = getAngle(sp.X, sp.Y, ep.X, ep.Y);
                }
                catch { }
            }
            #endregion

            if (rtn != 0)
            {
                camreturn.IsOK = false;
                Image.Overlays.Default.AddText("FAIL", new PointContour(100 + dist, 400), Rgb32Value.RedColor, new OverlayTextOptions("Consolas", 125));
            }
            else
            {
                camreturn.State = Variable.VisionState.OK;

                Image.Overlays.Default.AddLine(new LineContour(new PointContour(camreturn.X - 50, camreturn.Y)
                    , new PointContour(camreturn.X + 50, camreturn.Y)), Rgb32Value.RedColor);

                Image.Overlays.Default.AddLine(new LineContour(new PointContour(camreturn.X, camreturn.Y - 50)
                 , new PointContour(camreturn.X, camreturn.Y + 50)), Rgb32Value.RedColor);

                Image.Overlays.Default.AddText("X:" + camreturn.X.ToString("F3"), new PointContour(100 + dist, 100), Rgb32Value.BlueColor, new OverlayTextOptions("Consolas", 125));
                Image.Overlays.Default.AddText("Y:" + camreturn.Y.ToString("F3"), new PointContour(100 + dist, 200), Rgb32Value.BlueColor, new OverlayTextOptions("Consolas", 125));
                Image.Overlays.Default.AddText("Angle:" + camreturn.Angle.ToString("F3"), new PointContour(100 + dist, 300), Rgb32Value.BlueColor, new OverlayTextOptions("Consolas", 125));
                camreturn.IsOK = true;
            }
            return camreturn;
        }

        /// <summary>
        /// 计算拍照点2 视觉图像
        /// </summary>
        /// <param name="LabelInfo">视觉信息</param>
        /// <param name="Image">图像</param>
        /// <returns>结果</returns>
        public Variable.CamReturn Auto_Detect2(ref Variable.PASTAE LabelInfo, VisionImage Image)
        {
            short rtn = 0;
            bool bIsWhite = false;
            int areacount = 0;
            Variable.CamReturn camreturn = new Variable.CamReturn();
            camreturn.State = Variable.VisionState.Fail;
            if (LabelInfo.AlinIndex2 == 0)//NONE
            {
                camreturn.X = 0;
                camreturn.Y = 0;
                camreturn.IsOK = true;
                return camreturn;
            }
            Image.Overlays.Default.Clear();

            Roi Init = new Roi(new RectangleContour(LabelInfo.Init_ROI_Left2, LabelInfo.Init_ROI_Top2, LabelInfo.Init_ROI_Width2, LabelInfo.Init_ROI_Height2));
            BaseCoordinateSystem.Origin = new PointContour(LabelInfo.Init_Point2.X, LabelInfo.Init_Point2.Y);
            BaseCoordinateSystem.Angle = LabelInfo.Init_Angle2;
            Image = GainOffset(Image, LabelInfo.GainInit2, LabelInfo.OffsetInit2);
            camreturn.bHaveLabel = true;
            #region 多料判断
            if (LabelInfo.bAreaEN2)
            {
                if (LabelInfo.iAreaOKStyle2 == 1)
                    bIsWhite = true;
                else
                    bIsWhite = false;

                areacount = AreaCount(Image, Init, bIsWhite);
                if (areacount > LabelInfo.iAreaMin2 && areacount < LabelInfo.iAreaMax2)
                {
                    rtn = 0;
                    Image.Overlays.Default.AddText("AreaCount:" + "OK:" + areacount.ToString(), new PointContour(100, 300), Rgb32Value.BlueColor, new OverlayTextOptions("Consolas", 125));
                }
                else
                {
                    rtn = 1;
                    if (areacount < (LabelInfo.iAreaMin2 / 2))
                    {
                        camreturn.State = Variable.VisionState.NoLabel;
                        camreturn.bHaveLabel = false;
                    }
                    else
                        camreturn.State = Variable.VisionState.MoreLabel;

                    Image.Overlays.Default.AddText("AreaCount:" + "NG:" + areacount.ToString(), new PointContour(100, 300), Rgb32Value.RedColor, new OverlayTextOptions("Consolas", 125));
                }
            }

            #endregion

            #region PatternMatch 1 4 7
            if (rtn == 0 && (LabelInfo.AlinIndex2 == 1 || LabelInfo.AlinIndex2 == 4 || LabelInfo.AlinIndex2 == 7))//PM
            {
                Image.Overlays.Default.AddRectangle(new RectangleContour(LabelInfo.Init_ROI_Left2, LabelInfo.Init_ROI_Top2, LabelInfo.Init_ROI_Width2, LabelInfo.Init_ROI_Height2));
                rtn = CamDetect_PatternMatch(Image, LabelInfo.Align2, (float)(LabelInfo.Score2), 1, (float)(LabelInfo.MinAngle2), (float)(LabelInfo.MaxAngle2), Init, ref camreturn, LabelInfo.Init_OffsetX2, LabelInfo.Init_OffsetY2);

                if (rtn != 0)
                {
                    camreturn.State = Variable.VisionState.InitFail;
                }
            }
            #endregion

            #region SearchGeometric 2 5 8
            if (rtn == 0 && (LabelInfo.AlinIndex2 == 2 || LabelInfo.AlinIndex2 == 5 || LabelInfo.AlinIndex2 == 8))//GM
            {
                Image.Overlays.Default.AddRectangle(new RectangleContour(LabelInfo.Init_ROI_Left2, LabelInfo.Init_ROI_Top2, LabelInfo.Init_ROI_Width2, LabelInfo.Init_ROI_Height2));
                rtn = CamDetect_SearchGeometric(Image, LabelInfo.Align2, Init, LabelInfo.Score2, 1, LabelInfo.MinAngle2, LabelInfo.MaxAngle2, 100, 100, 0, 25, ref camreturn, LabelInfo.Init_OffsetX2, LabelInfo.Init_OffsetY2);
                if (rtn != 0)
                {
                    camreturn.State = Variable.VisionState.InitFail;
                }
            }
            #endregion

            #region Circle 3 4 5
            if ((LabelInfo.AlinIndex2 == 3 || LabelInfo.AlinIndex2 == 4 || LabelInfo.AlinIndex2 == 5) && rtn == 0)//GM+Circle
            {
                Roi Second = new Roi(new RectangleContour(LabelInfo.S_ROI_Left2, LabelInfo.S_ROI_Top2, LabelInfo.S_ROI_Width2, LabelInfo.S_ROI_Height2));
                Image.Overlays.Default.AddRectangle(new RectangleContour(LabelInfo.S_ROI_Left2, LabelInfo.S_ROI_Top2, LabelInfo.S_ROI_Width2, LabelInfo.S_ROI_Height2));
                if (LabelInfo.AlinIndex2 != 3)
                {
                    MeasurementSystems.Origin = new PointContour(camreturn.X, camreturn.Y);
                    MeasurementSystems.Angle = camreturn.Angle;
                    Algorithms.TransformRoi(Second, new CoordinateTransform(BaseCoordinateSystem, MeasurementSystems));
                }
                else
                {
                    BaseCoordinateSystem.Origin = new PointContour(LabelInfo.S_Center2.X, LabelInfo.S_Center2.Y);
                    BaseCoordinateSystem.Angle = 0;
                }

                double r = 0;
                PointContour A = new PointContour();
                rtn = CamDetect_Circle(Image, Second, LabelInfo.S_MinR2, LabelInfo.S_MaxR2, ref A, ref r);
                camreturn.X = A.X;
                camreturn.Y = A.Y;

                if (rtn != 0)
                {
                    if (rtn != 0)
                    {
                        camreturn.State = Variable.VisionState.FindCircleFail;
                    }
                }
            }
            #endregion

            #region Corner-single 6 7 8
            if ((LabelInfo.AlinIndex2 == 6 || LabelInfo.AlinIndex2 == 7 || LabelInfo.AlinIndex2 == 8) && rtn == 0)//M+Corner
            {
                Roi H1 = new Roi(new RectangleContour(LabelInfo.Corner_H1_Left2, LabelInfo.Corner_H1_Top2, LabelInfo.Corner_H1_Width2, LabelInfo.Corner_H1_Height2));
                Roi H2 = new Roi(new RectangleContour(LabelInfo.Corner_H2_Left2, LabelInfo.Corner_H2_Top2, LabelInfo.Corner_H2_Width2, LabelInfo.Corner_H2_Height2));
                Roi V1 = new Roi(new RectangleContour(LabelInfo.Corner_V1_Left2, LabelInfo.Corner_V1_Top2, LabelInfo.Corner_V1_Width2, LabelInfo.Corner_V1_Height2));
                Roi V2 = new Roi(new RectangleContour(LabelInfo.Corner_V2_Left2, LabelInfo.Corner_V2_Top2, LabelInfo.Corner_V2_Width2, LabelInfo.Corner_V2_Height2));
                if (LabelInfo.AlinIndex2 != 6)
                {
                    MeasurementSystems.Origin = new PointContour(camreturn.X, camreturn.Y);
                    MeasurementSystems.Angle = camreturn.Angle;
                    Algorithms.TransformRoi(H1, new CoordinateTransform(BaseCoordinateSystem, MeasurementSystems));
                    Algorithms.TransformRoi(H2, new CoordinateTransform(BaseCoordinateSystem, MeasurementSystems));
                    Algorithms.TransformRoi(V1, new CoordinateTransform(BaseCoordinateSystem, MeasurementSystems));
                    Algorithms.TransformRoi(V2, new CoordinateTransform(BaseCoordinateSystem, MeasurementSystems));
                    Image.Overlays.Default.AddRectangle(H1.GetBoundingRectangle());//new RectangleContour(LabelInfo.Corner_H1_Left2, LabelInfo.Corner_H1_Top2, LabelInfo.Corner_H1_Width2, LabelInfo.Corner_H1_Height2));
                    Image.Overlays.Default.AddRectangle(H2.GetBoundingRectangle());//new RectangleContour(LabelInfo.Corner_H2_Left2, LabelInfo.Corner_H2_Top2, LabelInfo.Corner_H2_Width2, LabelInfo.Corner_H2_Height2));
                    Image.Overlays.Default.AddRectangle(V1.GetBoundingRectangle());//new RectangleContour(LabelInfo.Corner_V1_Left2, LabelInfo.Corner_V1_Top2, LabelInfo.Corner_V1_Width2, LabelInfo.Corner_V1_Height2));
                    Image.Overlays.Default.AddRectangle(V2.GetBoundingRectangle());//new RectangleContour(LabelInfo.Corner_V2_Left2, LabelInfo.Corner_V2_Top2, LabelInfo.Corner_V2_Width2, LabelInfo.Corner_V2_Height2));

                }
                SearchDirection searchDirection = new SearchDirection();
                EdgePolaritySearchMode edgeMode = new EdgePolaritySearchMode();
                #region ????
                if (LabelInfo.Corner_H1_PicDir2 == "Left2Right")
                {
                    searchDirection = SearchDirection.LeftToRight;
                }
                if (LabelInfo.Corner_H1_PicDir2 == "Right2Left")
                {
                    searchDirection = SearchDirection.RightToLeft;
                }
                if (LabelInfo.Corner_H1_PicDir2 == "Up2Bottom")
                {
                    searchDirection = SearchDirection.TopToBottom;
                }
                if (LabelInfo.Corner_H1_PicDir2 == "Bottom2Up")
                {
                    searchDirection = SearchDirection.BottomToTop;
                }
                if (LabelInfo.Corner_H1_GrayValueDir2 == "Dark2Light")
                {
                    edgeMode = EdgePolaritySearchMode.Rising;
                }
                else
                {
                    edgeMode = EdgePolaritySearchMode.Falling;
                }
                #endregion
                rtn = CamDetect_EdgeDetect(Image, H1, LabelInfo.Corner_H1_EdgeStrength2, searchDirection, edgeMode, ref P_Start, ref P_End);
                P_Mid_H1 = new PointContour();
                P_Mid_H1.X = (P_Start.X + P_End.X) / 2;
                P_Mid_H1.Y = (P_Start.Y + P_End.Y) / 2;
                #region ????
                if (LabelInfo.Corner_H2_PicDir2 == "Left2Right")
                {
                    searchDirection = SearchDirection.LeftToRight;
                }
                if (LabelInfo.Corner_H2_PicDir2 == "Right2Left")
                {
                    searchDirection = SearchDirection.RightToLeft;
                }
                if (LabelInfo.Corner_H2_PicDir2 == "Up2Bottom")
                {
                    searchDirection = SearchDirection.TopToBottom;
                }
                if (LabelInfo.Corner_H2_PicDir2 == "Bottom2Up")
                {
                    searchDirection = SearchDirection.BottomToTop;
                }
                if (LabelInfo.Corner_H2_GrayValueDir2 == "Dark2Light")
                {
                    edgeMode = EdgePolaritySearchMode.Rising;
                }
                else
                {
                    edgeMode = EdgePolaritySearchMode.Falling;
                }
                #endregion
                rtn += CamDetect_EdgeDetect(Image, H2, LabelInfo.Corner_H2_EdgeStrength2, searchDirection, edgeMode, ref P_Start, ref P_End);
                P_Mid_H2 = new PointContour();
                P_Mid_H2.X = (P_Start.X + P_End.X) / 2;
                P_Mid_H2.Y = (P_Start.Y + P_End.Y) / 2;
                #region ????
                if (LabelInfo.Corner_V1_PicDir2 == "Left2Right")
                {
                    searchDirection = SearchDirection.LeftToRight;
                }
                if (LabelInfo.Corner_V1_PicDir2 == "Right2Left")
                {
                    searchDirection = SearchDirection.RightToLeft;
                }
                if (LabelInfo.Corner_V1_PicDir2 == "Up2Bottom")
                {
                    searchDirection = SearchDirection.TopToBottom;
                }
                if (LabelInfo.Corner_V1_PicDir2 == "Bottom2Up")
                {
                    searchDirection = SearchDirection.BottomToTop;
                }
                if (LabelInfo.Corner_V1_GrayValueDir2 == "Dark2Light")
                {
                    edgeMode = EdgePolaritySearchMode.Rising;
                }
                else
                {
                    edgeMode = EdgePolaritySearchMode.Falling;
                }
                #endregion
                rtn += CamDetect_EdgeDetect(Image, V1, LabelInfo.Corner_V1_EdgeStrength2, searchDirection, edgeMode, ref P_Start, ref P_End);
                P_Mid_V1 = new PointContour();
                P_Mid_V1.X = (P_Start.X + P_End.X) / 2;
                P_Mid_V1.Y = (P_Start.Y + P_End.Y) / 2;
                #region ????
                if (LabelInfo.Corner_V2_PicDir2 == "Left2Right")
                {
                    searchDirection = SearchDirection.LeftToRight;
                }
                if (LabelInfo.Corner_V2_PicDir2 == "Right2Left")
                {
                    searchDirection = SearchDirection.RightToLeft;
                }
                if (LabelInfo.Corner_V2_PicDir2 == "Up2Bottom")
                {
                    searchDirection = SearchDirection.TopToBottom;
                }
                if (LabelInfo.Corner_V2_PicDir2 == "Bottom2Up")
                {
                    searchDirection = SearchDirection.BottomToTop;
                }
                if (LabelInfo.Corner_V2_GrayValueDir2 == "Dark2Light")
                {
                    edgeMode = EdgePolaritySearchMode.Rising;
                }
                else
                {
                    edgeMode = EdgePolaritySearchMode.Falling;
                }
                #endregion
                rtn += CamDetect_EdgeDetect(Image, V2, LabelInfo.Corner_V2_EdgeStrength2, searchDirection, edgeMode, ref P_Start, ref P_End);
                P_Mid_V2 = new PointContour();
                P_Mid_V2.X = (P_Start.X + P_End.X) / 2;
                P_Mid_V2.Y = (P_Start.Y + P_End.Y) / 2;
                if (rtn == 0)
                {
                    camreturn.X = Algorithms.FindIntersectionPoint(new LineContour(P_Mid_H1, P_Mid_H2), new LineContour(P_Mid_V1, P_Mid_V2)).X;
                    camreturn.Y = Algorithms.FindIntersectionPoint(new LineContour(P_Mid_H1, P_Mid_H2), new LineContour(P_Mid_V1, P_Mid_V2)).Y;
                    Image.Overlays.Default.AddPoint(Algorithms.FindIntersectionPoint(new LineContour(P_Mid_H1, P_Mid_H2), new LineContour(P_Mid_V1, P_Mid_V2)), Rgb32Value.BlueColor);
                }
                else
                    camreturn.State = Variable.VisionState.FindLineFial;
            }
            #endregion
           
            if (rtn == 0 && LabelInfo.GrabLine_Enable2)
            {
                try
                {
                    Roi Line = ConvertToRoi(LabelInfo.GrabLine_ROI2);
                    MeasurementSystems.Origin = new PointContour(camreturn.X, camreturn.Y);
                    MeasurementSystems.Angle = camreturn.Angle;
                    Algorithms.TransformRoi(Line, new CoordinateTransform(BaseCoordinateSystem, MeasurementSystems));
                    Image.Overlays.Default.AddRectangle(Line.GetBoundingRectangle());
                    SearchDirection sm = (SearchDirection)int.Parse(LabelInfo.GrabLine_PicDir2);
                    EdgePolaritySearchMode em = (EdgePolaritySearchMode)int.Parse(LabelInfo.GrabLine_GrayValueDir2);
                    PointContour sp = new PointContour();
                    PointContour ep = new PointContour();
                    rtn = CamDetect_EdgeDetect(Image, Line, LabelInfo.GrabLine_EdgeStrength2, sm, em, ref sp, ref ep);

                    if (rtn != 0)
                    {
                        camreturn.State = Variable.VisionState.FindLineFial;
                    }

                    if (LabelInfo.AlinIndex2 == 1 || LabelInfo.AlinIndex2 == 2)
                        camreturn.Angle = -getAngle(sp.X, sp.Y, ep.X, ep.Y);
                    else
                        camreturn.Angle = getAngle(sp.X, sp.Y, ep.X, ep.Y);
                }
                catch { }
            }

            if (rtn != 0)
            {
                camreturn.IsOK = false;
                Image.Overlays.Default.AddText("FAIL", new PointContour(100, 400), Rgb32Value.RedColor, new OverlayTextOptions("Consolas", 125));
            }
            else
            {
                camreturn.State = Variable.VisionState.OK;
                camreturn.IsOK = true;
                Image.Overlays.Default.AddPoint(new PointContour(camreturn.X, camreturn.Y));
                Image.Overlays.Default.AddText("X:" + camreturn.X.ToString("F3"), new PointContour(100, 100), Rgb32Value.BlueColor, new OverlayTextOptions("Consolas", 125));
                Image.Overlays.Default.AddText("Y:" + camreturn.Y.ToString("F3"), new PointContour(100, 200), Rgb32Value.BlueColor, new OverlayTextOptions("Consolas", 125));
                Image.Overlays.Default.AddText("Angle:" + camreturn.Angle.ToString("F3"), new PointContour(100, 300), Rgb32Value.BlueColor, new OverlayTextOptions("Consolas", 125));
            }

            //SaveImage(camreturn.IsOK, Image);
            return camreturn;
        }

        public PointF Auto_DetectFly(ref Variable.PASTAE LabelInfo, VisionImage Image, PointF camPt)//计算Pixel r//CamIndex == 0 上视觉 1-左吸嘴下 2-右吸嘴下
        {
            short rtn = 0;
            Variable.CamReturn camreturn = new Variable.CamReturn();
            if (LabelInfo.AlinIndex1 == 0)//NONE
            {
                camreturn.X = 0;
                camreturn.Y = 0;
                camreturn.IsOK = false;
                rtn = 1;
                return new PointF();
            }

            Image.Overlays.Default.Clear();
            Roi Init = new Roi(new RectangleContour(LabelInfo.Init_ROI_Left1, LabelInfo.Init_ROI_Top1, LabelInfo.Init_ROI_Width1, LabelInfo.Init_ROI_Height1));
            BaseCoordinateSystem.Origin = new PointContour(LabelInfo.Init_Point1.X, LabelInfo.Init_Point1.Y);
            BaseCoordinateSystem.Angle = LabelInfo.Init_Angle1;
            Image = GainOffset(Image, LabelInfo.GainInit1, LabelInfo.OffsetInit1);

            #region PatternMatch 1 4 7
            if (rtn == 0 && (LabelInfo.AlinIndex1 == 1 || LabelInfo.AlinIndex1 == 4 || LabelInfo.AlinIndex1 == 7))//PM
            {
                Image.Overlays.Default.AddRectangle(new RectangleContour(LabelInfo.Init_ROI_Left1, LabelInfo.Init_ROI_Top1, LabelInfo.Init_ROI_Width1, LabelInfo.Init_ROI_Height1));
                rtn = CamDetect_PatternMatch(Image, LabelInfo.Align1, (float)(LabelInfo.Score1), 1, (float)(LabelInfo.MinAngle1), (float)(LabelInfo.MaxAngle1), Init, ref camreturn, LabelInfo.Init_OffsetX1, LabelInfo.Init_OffsetY1);
            }
            #endregion

            #region SearchGeometric 2 5 8
            if (rtn == 0 && (LabelInfo.AlinIndex1 == 2 || LabelInfo.AlinIndex1 == 5 || LabelInfo.AlinIndex1 == 8))//GM
            {
                Image.Overlays.Default.AddRectangle(new RectangleContour(LabelInfo.Init_ROI_Left1, LabelInfo.Init_ROI_Top1, LabelInfo.Init_ROI_Width1, LabelInfo.Init_ROI_Height1));
                rtn = CamDetect_SearchGeometric(Image, LabelInfo.Align1, Init, LabelInfo.Score1, 1, LabelInfo.MinAngle1, LabelInfo.MaxAngle1, 100, 100, 0, 25, ref camreturn, LabelInfo.Init_OffsetX1, LabelInfo.Init_OffsetY1);
            }
            #endregion

            #region Circle 3 4 5
            if ((LabelInfo.AlinIndex1 == 3 || LabelInfo.AlinIndex1 == 4 || LabelInfo.AlinIndex1 == 5) && rtn == 0)//M+Circle
            {
                Roi Second = new Roi(new RectangleContour(LabelInfo.S_ROI_Left1, LabelInfo.S_ROI_Top1, LabelInfo.S_ROI_Width1, LabelInfo.S_ROI_Height1));
                Image.Overlays.Default.AddRectangle(new RectangleContour(LabelInfo.S_ROI_Left1, LabelInfo.S_ROI_Top1, LabelInfo.S_ROI_Width1, LabelInfo.S_ROI_Height1));
                if (LabelInfo.AlinIndex1 != 3)
                {
                    MeasurementSystems.Origin = new PointContour(camreturn.X, camreturn.Y);
                    MeasurementSystems.Angle = camreturn.Angle;
                    Algorithms.TransformRoi(Second, new CoordinateTransform(BaseCoordinateSystem, MeasurementSystems));
                }
                double r = 0;
                PointContour A = new PointContour();
                rtn = CamDetect_Circle(Image, Second, LabelInfo.S_MinR1, LabelInfo.S_MaxR1, ref A, ref r);
                camreturn.X = A.X;
                camreturn.Y = A.Y;
            }
            #endregion

            if (rtn != 0)
            {
                camreturn.IsOK = false;
                Image.Overlays.Default.AddText("FAIL", new PointContour(100, 400), Rgb32Value.RedColor, new OverlayTextOptions("Consolas", 125));
                return new PointF();
            }
            else
            {
                camreturn.IsOK = true;
                PointF result = Point2CCDCenter(camPt, new PointContour(camreturn.X, camreturn.Y), 0, 0);
                Image.Overlays.Default.AddPoint(new PointContour(camreturn.X, camreturn.Y));
                Image.Overlays.Default.AddText("X:" + camreturn.X.ToString("F3"), new PointContour(100, 100), Rgb32Value.BlueColor, new OverlayTextOptions("Consolas", 125));
                Image.Overlays.Default.AddText("Y:" + camreturn.Y.ToString("F3"), new PointContour(100, 200), Rgb32Value.BlueColor, new OverlayTextOptions("Consolas", 125));
                Image.Overlays.Default.AddText("Angle:" + camreturn.Angle.ToString("F3"), new PointContour(100, 300), Rgb32Value.BlueColor, new OverlayTextOptions("Consolas", 125));
                return result;
            }
        }

        /// <summary>
        /// 根据下视觉结果计算出 角度
        /// </summary>
        /// <param name="nozzleIndex">吸嘴序号</param>
        /// <returns></returns>
        public short CalNozzle(uint nozzleIndex, CAM camera, int calib)
        {
            Z_RunParam zParam = this.Z_RunParamMap[nozzleIndex];

            Variable.FEEDER feeder = Feeder[zParam.RUN_Nozzle_FeederIndex - 1];

            #region 拍一次
            if (zParam.CamResult.IsOK)//
            {
                zParam.Nozzle_DownXY_Pos = new PointContour(zParam.CamResult.X, zParam.CamResult.Y);
                //屏蔽if_else解决算法2抓边下视觉OK但贴附角度补反的问题_Fowindy_190703
                if (feeder.Label.AlinIndex1 == 1 || feeder.Label.AlinIndex1 == 2)
                {
                    if (feeder.Label.GrabLine_Enable1)
                        zParam.Nozzle_Down_Angle = zParam.CamResult.Angle;//SEARCH
                    else
                        zParam.Nozzle_Down_Angle = -zParam.CamResult.Angle;//SEARCH
                }
                else
                    zParam.Nozzle_Down_Angle = zParam.CamResult.Angle;

                PointF rotatePt = this.Point2CCDCenter(VariableSys.pReadyPoint, VariableSys.pDownRotateCenter[nozzleIndex], camera, calib);
                PointF suckPos = this.Point2CCDCenter(VariableSys.pReadyPoint, zParam.Nozzle_DownXY_Pos, camera, calib);

                PointF offset = new PointF();
                offset.X = suckPos.X - rotatePt.X;
                offset.Y = suckPos.Y - rotatePt.Y;

                if (Math.Abs(offset.X - feeder.StandardSuckPos.X) > VariableSys.dMaxOffsetX
                    || Math.Abs(offset.Y - feeder.StandardSuckPos.Y) > VariableSys.dMaxOffsetX)
                {
                    zParam.CamResult.IsOK = false;
                    zParam.CamResult.State = Variable.VisionState.OutoffRange;
                    zParam.RUN_dNozzleDownVisionED = 4;
                    return 1;
                }

                if (Math.Abs(zParam.Nozzle_Down_Angle) > VariableSys.dMaxOffsetR)
                {
                    zParam.CamResult.IsOK = false;
                    zParam.CamResult.State = Variable.VisionState.AngleFail;
                    zParam.RUN_dNozzleDownVisionED = 4;
                    return 1;
                }
            }
            else
            {
                if (zParam.CamResult.bHaveLabel)
                    zParam.RUN_dNozzleDownVisionED = 4;
                else
                    zParam.RUN_dNozzleDownVisionED = 1;
                return 1;
            }
            #endregion

            zParam.RUN_dNozzleDownVisionED = 2;//OK的
            return 0;
        }

        private short ShowChart(bool install = false)//显示程式图表
        {
            //清除图点
            try
            {
                if (install)
                {
                    ChartPane.GraphPane.CurveList.Clear();
                    ChartPane.GraphPane.GraphObjList.Clear();
                    ChartPane.GraphPane.Title.Text = "机种程式:" + VariableSys.sProgramName;
                }

                if (ChartPane.GraphPane.CurveList.Count == 0)
                    install = true;

                int index = 0;

                for (int PCSBCount = 0; PCSBCount < JOB.PasteCount; PCSBCount++)// RUN_PASTEInfo[RUN_PasteInfoIndex_List_Left].PastePoints.Length; i_DrawPoint++)
                {
                    for (int j = 0; j < RUN_PASTEInfo.Length; j++)
                    {
                        if (JOB.PasteName[PCSBCount] == RUN_PASTEInfo[j].PasteName)//
                        {
                            for (int k = 0; k < RUN_PASTEInfo[j].PastePoints.Length; k++)
                            {
                                if (!install)
                                {
                                    if (index < ChartPane.GraphPane.CurveList.Count)
                                    {
                                        if (JOB.PASTEInfo[PCSBCount].iPasteED[k] == 1)
                                        {
                                            this.ChartPane.GraphPane.CurveList[index].Color = Color.Green;
                                        }
                                        else
                                        {
                                            this.ChartPane.GraphPane.CurveList[index].Color = Color.Yellow;
                                        }
                                        index++;
                                    }
                                }
                                else
                                {
                                    #region 重新画
                                    double[] x = new double[1];
                                    double[] y = new double[1];
                                    x[0] = TransformPointsForm2Mark(RUN_PASTEInfo[j].PastePoints, RUN_PASTEInfo[j].CamPoint1, RUN_PASTEInfo[j].CamPoint2, JOB.Cam_Mark1Point[PCSBCount], JOB.Cam_Mark2Point[PCSBCount], ref R)[k].X;
                                    y[0] = TransformPointsForm2Mark(RUN_PASTEInfo[j].PastePoints, RUN_PASTEInfo[j].CamPoint1, RUN_PASTEInfo[j].CamPoint2, JOB.Cam_Mark1Point[PCSBCount], JOB.Cam_Mark2Point[PCSBCount], ref R)[k].Y;
                                    //根据贴 和 未贴 重新画图
                                    if (JOB.PASTEInfo[PCSBCount].iPasteED[k] == -1 || JOB.PASTEInfo[PCSBCount].iPasteED[k] == 0)//未
                                    {
                                        ZedGraph.LineItem curve = ChartPane.GraphPane.AddCurve("", x, y, Color.Black, ZedGraph.SymbolType.Circle);
                                        curve.Line.IsVisible = false;
                                        curve.Symbol.Size = 15;
                                        curve.Symbol.Fill = new ZedGraph.Fill(Color.Yellow);
                                    }
                                    else if (JOB.PASTEInfo[PCSBCount].iPasteED[k] == 1)//已经贴
                                    {
                                        ZedGraph.LineItem curve = ChartPane.GraphPane.AddCurve("", x, y, Color.Blue, ZedGraph.SymbolType.Circle);
                                        curve.Line.IsVisible = false;
                                        curve.Symbol.Size = 15;
                                        curve.Symbol.Fill = new ZedGraph.Fill(Color.Green);
                                        if (VariableSys.bPressureEN)
                                        {
                                            ZedGraph.TextObj text = new ZedGraph.TextObj("Pressure:" + JOB.PASTEInfo[PCSBCount].dPressureValue[k].ToString("F3"), (float)(x[0] + 18), (float)(y[0]));
                                            text.FontSpec.Fill.IsVisible = false;
                                            ChartPane.GraphPane.GraphObjList.Add(text);
                                        }
                                    }
                                    #endregion
                                }
                            }
                        }
                    }
                }

                ChartPane.AxisChange();
                ChartPane.Refresh();
                //ChartPane.Invalidate();
                return 0;
            }
            catch (System.Exception ex)
            {
                return 1;
            }
        }

        private short bgWorker_Cam_Work()//连续采集开启
        {
            bgWorker_Cam.RunWorkerAsync();
            return 0;
        }
        private short bgWorker_Cam_Stop()//连续采集关闭
        {
            bgWorker_Cam.CancelAsync();
            return 0;
        }
        private short ReadOutSideBadMark()//读取外部BadMark的信息
        {
            try
            {
                if (File.Exists(Variable.sPath_SYS_BadMark + "\\NG.TXT"))
                {
                    File.Delete(Variable.sPath_SYS_BadMark + "\\NG.TXT");
                    return 1;
                }
                else
                {
                    if (File.Exists(Variable.sPath_SYS_BadMark + "\\OK.TXT"))
                    {
                        File.Delete(Variable.sPath_SYS_BadMark + "\\OK.TXT");
                        if (File.Exists(Variable.sPath_SYS_BadMark + "\\BadMark.TXT"))
                        {
                            string[] sLines = File.ReadAllLines(Variable.sPath_SYS_BadMark + "\\BadMark.TXT");
                            if (sLines.Length > 0)
                            {
                                RUN_SFCS_ISBadMark = new bool[sLines[0].Length];
                                for (int i = 0; i < sLines[0].Length; i++)
                                {
                                    RUN_SFCS_ISBadMark[i] = sLines[0].Substring(i, 1) == "1" ? true : false;
                                }
                                File.Delete(Variable.sPath_SYS_BadMark + "\\BadMark.TXT");
                            }
                            else
                            {
                                return 1;
                            }
                        }
                        else
                        {

                            return 1;
                        }
                    }
                }
            }
            catch
            {
                return 1;
            }
            return 0;
        }
        public short SaveImage(bool IsOK, VisionImage image)
        {
            using (VisionImage AAA = new VisionImage())
            {
                try
                {
                    if (image.Height == 0 || image.Width == 0)
                    {
                        return 1;
                    }
                    Algorithms.Copy(image, AAA);
                    string str_data = DateTime.Now.Year.ToString("0000")
                       + DateTime.Now.Month.ToString("00")
                       + DateTime.Now.Day.ToString("00");//文件夹名称
                    if (!Directory.Exists(VariableSys.sPath_PicSave + "\\" + str_data))
                    {
                        Directory.CreateDirectory(VariableSys.sPath_PicSave + "\\" + str_data);
                        Directory.CreateDirectory(VariableSys.sPath_PicSave + "\\" + str_data + "\\OK");
                        Directory.CreateDirectory(VariableSys.sPath_PicSave + "\\" + str_data + "\\NG");
                    }

                    string str =
                    DateTime.Now.Year.ToString("0000")
                        + DateTime.Now.Month.ToString("00")
                        + DateTime.Now.Day.ToString("00")
                        + DateTime.Now.Hour.ToString("00")
                        + DateTime.Now.Minute.ToString("00")
                        + DateTime.Now.Second.ToString("00") + DateTime.Now.Millisecond.ToString("000");

                    //0-none 1-ok 2-ng 3-all
                    if (VariableSys.iPic_SaveIndex == 0)//0-none
                    {
                    }
                    if (VariableSys.iPic_SaveIndex == 1 && IsOK)//1-ok
                    {
                        AAA.Overlays.Default.Merge();
                        AAA.WritePngFile(VariableSys.sPath_PicSave + "\\" + str_data + "\\OK\\" + str + ".Png");
                    }
                    if (VariableSys.iPic_SaveIndex == 2 && !IsOK)//2-ng
                    {
                        AAA.Overlays.Default.Merge();
                        AAA.WritePngFile(VariableSys.sPath_PicSave + "\\" + str_data + "\\NG\\" + str + ".Png");
                    }
                    if (VariableSys.iPic_SaveIndex == 3)//3-all
                    {
                        if (IsOK)
                        {
                            AAA.Overlays.Default.Merge();
                            AAA.WritePngFile(VariableSys.sPath_PicSave + "\\" + str_data + "\\OK\\" + str + ".Png");
                        }
                        else
                        {
                            AAA.Overlays.Default.Merge();
                            AAA.WritePngFile(VariableSys.sPath_PicSave + "\\" + str_data + "\\NG\\" + str + ".Png");
                        }
                    }
                }
                catch
                {
                }
            }
            return 0;
        }

        private void thread_Clear()//清料 回待料点
        {
            if (this.All_ZGoSafeTillStop(2000, VariableSys.VelMode_Debug_Manual))
            {
                Variable.VelMode CLEANVel = new Variable.VelMode(60, 60, 100, 100);
                Variable.VelMode CLEANTurnVel = new Variable.VelMode(0, 200, 500, 500);
                short rtn = 0;
                if (!Turn.AxisReach(VariableSys.dTurnXIAngle))
                {
                    rtn += XYGoPosTillStop(30000, VariableSys.pReadyPoint, CLEANVel);
                    rtn += Turn.GoPosTillStop(30000, VariableSys.dTurnXIAngle, CLEANTurnVel);
                }

                if (rtn == -1)
                    return;

                var throwPt = this.Z_RunParamMap[0].ThrowPoint1;
                throwPt.X += (StatisticsHelper.Instance.Reoprt.Total.TotalDrop % 4 * 8);
                throwPt.Y -= ((StatisticsHelper.Instance.Reoprt.Total.TotalDrop / 4 % 4) * 8);
                XYGoPosTillStop(3000, throwPt, CLEANVel);//VariableSys.VelMode_Slow_Manual);

                if (VariableSys.bEnableThrowPut)
                {
                    this.Z_RunParamMap[0].XI_vaccum.ResetIO();
                    this.Z_RunParamMap[2].XI_vaccum.ResetIO();
                    this.Z_RunParamMap[0].PO_vaccum.SetIO();
                    this.Z_RunParamMap[2].XI_vaccum.ResetIO();
                    this.Z_RunParamMap[0].GoPos(this.Z_RunParamMap[0].ThrowHeight, VariableSys.VelMode_Current);
                    this.Z_RunParamMap[2].GoPos(this.Z_RunParamMap[2].ThrowHeight, VariableSys.VelMode_Current);
                    Thread.Sleep(1000);

                    this.Z_RunParamMap[1].XI_vaccum.ResetIO();
                    this.Z_RunParamMap[3].XI_vaccum.ResetIO();
                    this.Z_RunParamMap[1].PO_vaccum.SetIO();
                    this.Z_RunParamMap[3].XI_vaccum.ResetIO();
                    this.Z_RunParamMap[1].GoPos(this.Z_RunParamMap[1].ThrowHeight, VariableSys.VelMode_Current);
                    this.Z_RunParamMap[3].GoPos(this.Z_RunParamMap[3].ThrowHeight, VariableSys.VelMode_Current);
                    Thread.Sleep(1000);

                    this.All_ZGoSafeTillStop(3000, VariableSys.VelMode_Current_Manual);

                    this.Z_RunParamMap[0].PO_vaccum.ResetIO();
                    this.Z_RunParamMap[1].PO_vaccum.ResetIO();
                    this.Z_RunParamMap[2].PO_vaccum.ResetIO();
                    this.Z_RunParamMap[3].PO_vaccum.ResetIO();
                }
                else
                {
                    for (uint nz = 0; nz < Variable.NOZZLE_NUM; ++nz)
                    {
                        this.Z_RunParamMap[nz].XI_vaccum.ResetIO();
                        this.Z_RunParamMap[nz].PO_vaccum.SetIO();
                        Thread.Sleep(500);
                        this.Z_RunParamMap[nz].PO_vaccum.ResetIO();
                    }
                }
            }
        }

        private bool LoadFrmFinshed = false;

        /// <summary>
        /// 刷新界面
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void Instance_UIRefresh()
        {
            if (!LoadFrmFinshed) return;

            try
            {
                if (VariableSys.bSafeDoorEN)
                {
                    if (RunMode != 1 && (!bArr_IO_IN_Status.bIN_SafeDoor.GetIO() || !bArr_IO_IN_Status.bIN_SafeGrant.GetIO()))
                    {
                        if (!Monitor.IsEntered(this.SafeDoor))
                        {
                            Monitor.Enter(this.SafeDoor);
                            StopAllAxis();
                            this.Three_Red_ON();
                            RUN_AlarmInfo[0] = 1;
                            MessageBox.Show("安全门打开,机器禁止移动!!!");
                            RUN_AlarmInfo[0] = 0;
                            this.Three_Red_OFF();
                            Monitor.Exit(this.SafeDoor);
                        }
                    }
                }

                this.NeedCloseLight();

                #region 界面显示
                if (this.RunMode != 1)
                    ShowStatus();

                if (tabControl_Main.SelectedIndex == 0)
                {
                    if (bUpdateChart)
                    {
                        bUpdateChart = false;
                        ShowChart();
                    }

                    lLabelLeftIndex.Text = XI_IndexG[0].ToString();
                    lLabelRightIndex.Text = XI_IndexG[1].ToString();

                    StatisticsHelper.Instance.SetGridView(StatisticsHelper.Instance.Reoprt, this.dGV_Statics, true);
                    PressSensorHelper.Instance.ShowXIPress();
                }

                #endregion

                #region 手动模式--IO显示
                if (tabControl_Main.SelectedIndex != 0 && (RunMode != 1) && tabTools.SelectedIndex == 2)
                {
                    if (cB_CardIO_Index.SelectedIndex == 0)
                    {
                        for (int i = 0; i < 16; i++)
                        {
                            ushort axisno = (ushort)(i / 4);
                            ushort port = (ushort)(i % 4);
                            if (!IO.IOManager.Instance.GetInput(axisno, port))
                                PB_IO_IN[i].Image = GeneralLabelerStation.Properties.Resources.green;
                            else
                                PB_IO_IN[i].Image = GeneralLabelerStation.Properties.Resources.red;

                            if (!IO.IOManager.Instance.GetOutput(axisno, (ushort)(port + 4)))
                                PB_IO_OUT[i].Image = GeneralLabelerStation.Properties.Resources.green;
                            else
                                PB_IO_OUT[i].Image = GeneralLabelerStation.Properties.Resources.red;
                        }
                    }
                    if (cB_CardIO_Index.SelectedIndex == 1)
                    {
                        for (int i = 0; i < 16; i++)
                        {
                            ushort axisno = (ushort)(i / 4 + 4);
                            ushort port = (ushort)(i % 4);
                            if (!IO.IOManager.Instance.GetInput(axisno, port))
                                PB_IO_IN[i].Image = GeneralLabelerStation.Properties.Resources.green;
                            else
                                PB_IO_IN[i].Image = GeneralLabelerStation.Properties.Resources.red;

                            if (!IO.IOManager.Instance.GetOutput(axisno, (ushort)(port + 4)))
                                PB_IO_OUT[i].Image = GeneralLabelerStation.Properties.Resources.green;
                            else
                                PB_IO_OUT[i].Image = GeneralLabelerStation.Properties.Resources.red;
                        }
                    }
                }
                #endregion

                #region 缺料报警提示
                //if (ZDTHelper.Instance.BJZS_Config.EnableAlarmCount && ZDTHelper.Instance.EnableBJZS)
                //{
                //    for (int i = 0; i < 2; ++i)
                //    {
                //        if (FeederHelper.Instance.MaterialList.ContainsKey(ZDTHelper.Instance.BJZS_Config.FeederID[i]))
                //        {
                //            if (FeederHelper.Instance.FeederInfo[i].RemainCount < ZDTHelper.Instance.BJZS_Config.AlarmCount)
                //            {
                //                if (FeederHelper.Instance.FeederInfo[i].RemainCount <= 0)
                //                {
                //                    FeederHelper.Instance.FeederInfo[i].IfAlarm = true;
                //                }
                //                RUN_AlarmInfo[1] = 1;
                //            }
                //            else
                //            {
                //                RUN_AlarmInfo[1] = 0;
                //            }
                //        }
                //        else
                //        {
                //            RUN_AlarmInfo[1] = 1;
                //        }
                //    }
                //}
                //else
                //{
                //    RUN_AlarmInfo[1] = 0;
                //}
                #endregion

                //this.feederMesInfo.RefreshUIData();
            }
            catch { }
        }
        #endregion

        public object SafeDoor = new object();
        private short ShowStatus()//显示轴控状态
        {
            if (Status_ScanIO == 0)//OK
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    tSSL_Error.Text = "Normal";
                }
                else
                {
                    tSSL_Error.Text = "设备正常";
                }

                tSSL_Error.BackColor = Color.Green;
            }
            else//NG
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    tSSL_Error.Text = "AbNormal";
                }
                else
                {
                    tSSL_Error.Text = "设备异常";
                }

                tSSL_Error.BackColor = Color.Red;
            }

            //**************************************[Status]****************************************************
            lWorkStep.Text = FlowIndex.ToString();
            lWorkContent.Text = FlowIndex_Name;
            lWorkTime.Text = StopWatch_FlowIndex.ElapsedMilliseconds.ToString();
            //**************************************[X]****************************************************
            tSS_XPosN.BackColor = (VariableSys.bAxis_X_LimN == true) ? Color.Red : Color.GreenYellow;
            tSS_XPosP.BackColor = (VariableSys.bAxis_X_LimP == true) ? Color.Red : Color.GreenYellow;
            if (VariableSys.bAxis_X_Origin == true)
            {
                tSS_XPosN.BackColor = Color.Yellow;
                tSS_XPosP.BackColor = Color.Yellow;
            }

            PointF xy = this.XYPos;
            tSS_XPos.Text = String.Format("{0:N3}", xy.X);
            tSS_XPos.BackColor = X.bAxisIsRunning == true ? Color.GreenYellow : Color.Transparent;
            //**************************************[Y]****************************************************
            tSS_YPosN.BackColor = (VariableSys.bAxis_Y_LimN == true) ? Color.Red : Color.GreenYellow;
            tSS_YPosP.BackColor = (VariableSys.bAxis_Y_LimP == true) ? Color.Red : Color.GreenYellow;
            if (VariableSys.bAxis_Y_Origin == true)
            {
                tSS_YPosN.BackColor = Color.Yellow;
                tSS_YPosP.BackColor = Color.Yellow;
            }
            tSS_YPos.Text = String.Format("{0:N3}", xy.Y);
            tSS_YPos.BackColor = Y.bAxisIsRunning == true ? Color.GreenYellow : Color.Transparent;

            PointF act = GlassHelper.MachinePoint2ActPoint(xy);
            tSS_ActXY.Text = String.Format($"ACT:(X:{act.X:N3}, Y:{act.Y:N3})");
            Collection<ToolStripStatusLabel> rLabelList = new Collection<ToolStripStatusLabel>();
            rLabelList.Add(tSS_R1Pos);
            rLabelList.Add(tSS_R2Pos);
            rLabelList.Add(tSS_R3Pos);
            rLabelList.Add(tSS_R4Pos);

            for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
            {
                if (this.R_RunParamMap[i].bAxisIsHoming)
                {
                    rLabelList[(int)i].BackColor = Color.Yellow;
                }
                else
                {
                    if (this.R_RunParamMap[i].bAxisIsRunning)
                        rLabelList[(int)i].BackColor = Color.GreenYellow;
                    else
                        rLabelList[(int)i].BackColor = Color.Transparent;
                }

                rLabelList[(int)i].Text = $"R{i + 1}: {this.R_RunParamMap[i].Pos:N3}";
            }

            Collection<ToolStripStatusLabel> zList = new Collection<ToolStripStatusLabel>();
            zList.Add(tSS_Z1Org);
            zList.Add(tSS_Z2Org);
            zList.Add(tSS_Z3Org);
            zList.Add(tSS_Z4Org);

            for (uint i = 0; i < Variable.NOZZLE_NUM; ++i)
            {
                zList[(int)i].Text = $"Z{i + 1}:{this.Z_RunParamMap[i].Pos:N3}";
            }


            //**************************************[Sensor]****************************************************
            tSSL_AirPressure.BackColor = (bArr_IO_IN_Status.bIN_AirPressure.GetIO() == true) ? Color.Red : Color.White;
            tSSL_SaftyGrating.BackColor = (bArr_IO_IN_Status.bIN_SafeGrant.GetIO() == true) ? Color.Red : Color.White;
            lLabel1.BackColor = IO.IOManager.Instance.FDExitLabel[0]  ? Color.Green : Color.White;
            lLabel2.BackColor = IO.IOManager.Instance.FDExitLabel[1]  ? Color.Green : Color.White;

            lFeeder1.BackColor = (bArr_IO_IN_Status.bIN_FeederOK_Left.GetIO() == true) ? Color.Green : Color.White;
            lFeeder2.BackColor = (bArr_IO_IN_Status.bIN_FeederOK_Right.GetIO() == true) ? Color.Green : Color.White;

            if((DateTime.Now - IO.IOManager.Instance.FDMonitor[0]).TotalMilliseconds > VariableSys.iTimeOut_Feeder)
            {
                this.lLeftState.Text = "Feeder缺料";
                this.lLeftState.BackColor = Color.Red;
            }
            else
            {
                this.lLeftState.Text = "Feeder有料";
                this.lLeftState.BackColor = Color.LightGreen;
            }

            if ((DateTime.Now - IO.IOManager.Instance.FDMonitor[1]).TotalMilliseconds > VariableSys.iTimeOut_Feeder)
            {
                this.lRightState.Text = "Feeder缺料";
                this.lRightState.BackColor = Color.Red;
            }
            else
            {
                this.lRightState.Text = "Feeder有料";
                this.lRightState.BackColor = Color.LightGreen;
            }

            //**************************************[IO_Status]****************************************************
            return 0;
        }

        #region 自动校验吸嘴
        private void thread_Rotate_Cali(object caliNozzle)
        {
            bool Init = false;
            short rtn = 0;
            R_RunParam rParam = this.R_RunParamMap[uint.Parse(caliNozzle.ToString())];
            PointRotateArr = new Collection<PointContour>();
            int cali_index = 0;
            int step = (int)this.numRotateStep.Value;
            double stepAngle = 360 / step;
            while (cali_index < step)
            {
                if (!Init)
                {
                    Init = true;
                    rParam.GoPos(stepAngle * cali_index, VariableSys.VelMode_Current_Manual);
                }
                else
                {
                    if (rParam.AxisReach(stepAngle * cali_index) && !rParam.bAxisIsRunning)
                    {
                        rtn = (short)this.Invoke(new Func<int, short>(Cali_DetectRotate), new object[] { cali_index });//
                        if (rtn != 0)
                        {
                            return;
                        }
                        Init = false;
                        cali_index++;
                    }
                }
            }

            //拟合中心
            this.Invoke(new VoidDO(Cali_RotateDone));
        }

        /// <summary>
        /// 自动校验吸嘴流程
        /// </summary>
        private short Cali_DetectRotate(int sPointIndex)
        {
            Variable.CamReturn a = new Variable.CamReturn();
            if (!bSnap.Enabled)
            {
                return -1;
            }

            var cam = Nozzle2Cam(this.cB_NozzleIndex3.SelectedIndex);
            CameraDefine.Instance[cam.Item1]._Session.Snap(imageSet.Image);
            short rtn = CamDetect_SearchGeometric(imageSet.Image, VariableSys.imageCali_Gemetric, imageSet.Roi, 600, 1, -180, 180, 100, 100, 0, 25, ref a, 0, 0);
            if (rtn != 0)
            {
                MessageBox.Show("特征寻找失败!", "提示");
                return 1;
            }

            PointRotateArr.Add(gpmResults[0].Position);
            return 0;
        }//自动校验吸嘴流程

        /// <summary>
        /// 自动校验吸嘴流程
        /// </summary>
        /// <returns></returns>
        private short Cali_RotateDone()
        {
            FitCircleReport FR = new FitCircleReport();
            try
            {
                FR = Algorithms.FitCircle(PointRotateArr);
                imageSet.Image.Overlays.Default.AddArc(new Arc(FR.Center, FR.Radius, 0, 359), Rgb32Value.RedColor);
                imageSet.Image.Overlays.Default.AddPoints(PointRotateArr, Rgb32Value.YellowColor);
            }
            catch
            {
                MessageBox.Show("拟合圆失败", "提示");
                return 1;
            }

            //CAM camera = (CAM)(cB_NozzleIndex3.SelectedIndex / 2 + 1);
            //PointF worldP = Point2CCDCenter(new PointF((float)X.Pos, (float)Y.Pos), FR.Center, camera);
            tRotateCenterX_Temp.Text = FR.Center.X.ToString("f3");
            tRotateCenterY_Temp.Text = FR.Center.Y.ToString("f3");
            PointF xy = this.XYPos;
            this.tRotateCamX_Temp.Text = xy.X.ToString("f3");
            this.tRotateCamY_Temp.Text = xy.Y.ToString("f3");
            return 0;
        }
        #endregion
        private short CloseUpCamera()//关闭上部相机
        {
            cameraComboBox.SelectedIndex = 0;
            bSet_CamLive = false;
            if (VariableSys.LanguageFlag == 1)
            {
                bCamLive.Text = "live";
            }
            else
            {
                bCamLive.Text = "实时";
            }

            try//关闭相机
            {
                bgWorker_Cam.CancelAsync();
                //bufNumTextBox.Text = "";
            }
            catch
            {
                return 1;
            }
            bSnap.Enabled = true;
            return 0;
        }
        private short LiveUpCamera()//打开上部相机并实时显示
        {
            cameraComboBox.SelectedIndex = 0;
            bSet_CamLive = true;
            bSnap.Enabled = false;
            //打开相机
            try
            {
                CameraDefine.Instance[CAM.Top]._Session.ConfigureGrab();
                if (VariableSys.LanguageFlag == 1)
                {
                    bCamLive.Text = "stop";
                }
                else
                {
                    bCamLive.Text = "关闭实时";
                }

                bgWorker_Cam.RunWorkerAsync();
            }
            catch
            {
                return 1;
            }
            return 0;
        }
        private short Manual_UpCamSnap_ImageSet()
        {
            try
            {
                CameraDefine.Instance[CAM.Top]._Session.Grab(imageSet.Image, true);
            }
            catch
            {
                return 1;
            }
            return 0;
        }
        private short Manual_Detect1()
        {
            short rtn = 0;
            Variable.CamReturn camreturn = new Variable.CamReturn();
            Roi Init = new Roi(new RectangleContour(PasteInfo.Init_ROI_Left1, PasteInfo.Init_ROI_Top1, PasteInfo.Init_ROI_Width1, PasteInfo.Init_ROI_Height1));
            Roi Second = new Roi(new RectangleContour(PasteInfo.S_ROI_Left1, PasteInfo.S_ROI_Top1, PasteInfo.S_ROI_Width1, PasteInfo.S_ROI_Height1));
            Algorithms.Copy(GainOffset(imageSet.Image, PasteInfo.GainInit1, PasteInfo.OffsetInit1), imageSet.Image);

            //newMark1
            if (PasteInfo.AlinIndex1 == 1 || PasteInfo.AlinIndex1 == 4)//PM
            {
                rtn = CamDetect_PatternMatch(imageSet.Image, PasteInfo.Align1, (float)(PasteInfo.Score1), 1, (float)(PasteInfo.MinAngle1), (float)(PasteInfo.MaxAngle1), Init, ref camreturn, PasteInfo.Init_OffsetX1, PasteInfo.Init_OffsetY1);
            }
            if (PasteInfo.AlinIndex1 == 2 || PasteInfo.AlinIndex1 == 5)//GM
            {
                rtn = CamDetect_SearchGeometric(imageSet.Image, PasteInfo.Align1, Init, PasteInfo.Score1, 1, PasteInfo.MinAngle1, PasteInfo.MaxAngle1, 100, 100, 0, 25, ref camreturn, PasteInfo.Init_OffsetX1, PasteInfo.Init_OffsetY1);
            }
            if (PasteInfo.AlinIndex1 == 3)//Circle
            {
                double r = 0;
                PointContour A = new PointContour();
                rtn = CamDetect_Circle(imageSet.Image, Second, PasteInfo.S_MinR1, PasteInfo.S_MaxR1, ref A, ref r);
                camreturn.X = A.X;
                camreturn.Y = A.Y;
            }
            if (PasteInfo.AlinIndex1 == 4 && rtn == 0)//PM+Circle
            {
                BaseCoordinateSystem.Origin = new PointContour(camreturn.X, camreturn.Y);
                BaseCoordinateSystem.Angle = camreturn.Angle;
                Algorithms.TransformRoi(Second, new CoordinateTransform(BaseCoordinateSystem, MeasurementSystems));
                double r = 0;
                PointContour A = new PointContour();
                rtn = CamDetect_Circle(imageSet.Image, Second, PasteInfo.S_MinR1, PasteInfo.S_MaxR1, ref A, ref r);
                camreturn.X = A.X;
                camreturn.Y = A.Y;
            }
            if (PasteInfo.AlinIndex1 == 5 && rtn == 0)//GM+Circle
            {
                BaseCoordinateSystem.Origin = new PointContour(camreturn.X, camreturn.Y);
                BaseCoordinateSystem.Angle = camreturn.Angle;
                Algorithms.TransformRoi(Second, new CoordinateTransform(BaseCoordinateSystem, MeasurementSystems));
                double r = 0;
                PointContour A = new PointContour();
                rtn = CamDetect_Circle(imageSet.Image, Second, PasteInfo.S_MinR1, PasteInfo.S_MaxR1, ref A, ref r);
                camreturn.X = A.X;
                camreturn.Y = A.Y;
            }
            newMark1 = Point2CCDCenter(PasteInfo.CamPoint1, new PointContour(camreturn.X, camreturn.Y), 0,0);
            return rtn;
        }
        private short Manual_Detect2()
        {
            short rtn = 0;
            Variable.CamReturn camreturn = new Variable.CamReturn();
            Roi Init = new Roi(new RectangleContour(PasteInfo.Init_ROI_Left2, PasteInfo.Init_ROI_Top2, PasteInfo.Init_ROI_Width2, PasteInfo.Init_ROI_Height2));
            Roi Second = new Roi(new RectangleContour(PasteInfo.S_ROI_Left2, PasteInfo.S_ROI_Top2, PasteInfo.S_ROI_Width2, PasteInfo.S_ROI_Height2));
            Algorithms.Copy(GainOffset(imageSet.Image, PasteInfo.GainInit2, PasteInfo.OffsetInit2), imageSet.Image);
            //newMark2
            if (PasteInfo.AlinIndex2 == 1 || PasteInfo.AlinIndex2 == 4)//PM
            {
                rtn = CamDetect_PatternMatch(imageSet.Image, PasteInfo.Align2, (float)(PasteInfo.Score2), 1, (float)(PasteInfo.MinAngle2), (float)(PasteInfo.MaxAngle2), Init, ref camreturn, PasteInfo.Init_OffsetX2, PasteInfo.Init_OffsetY2);
            }
            if (PasteInfo.AlinIndex2 == 2 || PasteInfo.AlinIndex2 == 5)//GM
            {
                rtn = CamDetect_SearchGeometric(imageSet.Image, PasteInfo.Align2, Init, PasteInfo.Score2, 1, PasteInfo.MinAngle2, PasteInfo.MaxAngle2, 100, 100, 0, 25, ref camreturn, PasteInfo.Init_OffsetX2, PasteInfo.Init_OffsetY2);
            }
            if (PasteInfo.AlinIndex2 == 3)//Circle
            {
                double r = 0;
                PointContour A = new PointContour();
                rtn = CamDetect_Circle(imageSet.Image, Second, PasteInfo.S_MinR2, PasteInfo.S_MaxR2, ref A, ref r);
                camreturn.X = A.X;
                camreturn.Y = A.Y;
            }
            if (PasteInfo.AlinIndex2 == 4 && rtn == 0)//PM+Circle
            {
                BaseCoordinateSystem.Origin = new PointContour(camreturn.X, camreturn.Y);
                BaseCoordinateSystem.Angle = camreturn.Angle;
                Algorithms.TransformRoi(Second, new CoordinateTransform(BaseCoordinateSystem, MeasurementSystems));
                double r = 0;
                PointContour A = new PointContour();
                rtn = CamDetect_Circle(imageSet.Image, Second, PasteInfo.S_MinR2, PasteInfo.S_MaxR2, ref A, ref r);
                camreturn.X = A.X;
                camreturn.Y = A.Y;
            }
            if (PasteInfo.AlinIndex2 == 5 && rtn == 0)//GM+Circle
            {
                BaseCoordinateSystem.Origin = new PointContour(camreturn.X, camreturn.Y);
                BaseCoordinateSystem.Angle = camreturn.Angle;
                Algorithms.TransformRoi(Second, new CoordinateTransform(BaseCoordinateSystem, MeasurementSystems));
                double r = 0;
                PointContour A = new PointContour();
                rtn = CamDetect_Circle(imageSet.Image, Second, PasteInfo.S_MinR2, PasteInfo.S_MaxR2, ref A, ref r);
                camreturn.X = A.X;
                camreturn.Y = A.Y;
            }
            newMark2 = Point2CCDCenter(PasteInfo.CamPoint2, new PointContour(camreturn.X, camreturn.Y), 0, 0);
            return rtn;
        }

        #region 吸嘴自动吸标签
        private void thread_NozzleTest(object selectZ)//吸FEEDER
        {

        }

        #endregion

        #region 自动吸取动作
        private PointF NozzleTest = new PointF();

        private double NozzleZ = 0;

        private void bNozzleTest_Click(object sender, EventArgs e)//吸左 Feeder
        {
            if (dGV_FeederLeft.SelectedRows.Count > 0 && (dGV_FeederLeft.SelectedRows[0].Index != dGV_FeederLeft.RowCount - 1))
            {
                try
                {
                    if (!this.All_ZReachOrg())
                    {
                        if (VariableSys.LanguageFlag == 1)
                        {
                            MessageBox.Show("Pls go to safe height", "Info");
                        }
                        else
                        {
                            MessageBox.Show("吸嘴未在安全高度,请移动后再试", "提示");
                        }
                        return;
                    }


                    Task.Factory.StartNew(() =>
                    {
                        try
                        {
                            PointF nzPt = new PointF();
                            nzPt.X = float.Parse(dGV_FeederLeft.SelectedRows[0].Cells[0].Value.ToString());
                            nzPt.Y = float.Parse(dGV_FeederLeft.SelectedRows[0].Cells[1].Value.ToString());
                            nzPt = this.Nz1ToOther(nzPt, ZAxisIndex - 1);
                            double zHeight = float.Parse(dGV_FeederLeft.SelectedRows[0].Cells[1 + ZAxisIndex].Value.ToString());
                            double xiAngle = float.Parse(dGV_FeederLeft.SelectedRows[0].Cells[3 + Variable.NOZZLE_NUM].Value.ToString());
                            Z_RunParam zParam = this.Z_RunParamMap[(uint)(ZAxisIndex - 1)];
                            zParam.PO_vaccum.ResetIO();
                            zParam.XI_vaccum.ResetIO();

                            XYGoPosTillStop(5000, nzPt, VariableSys.VelMode_Current_Manual);
                            this.R_RunParamMap[(uint)(ZAxisIndex - 1)].GoPosTillStop(5000, xiAngle, VariableSys.VelMode_Current_Manual);
                            zParam.XI_vaccum.SetIO();
                            zParam.GoPosTillStop(5000, zHeight, VariableSys.VelMode_Current_Manual);
                            Thread.Sleep(VariableSys.iDelay_BeforeXI);
                            this.All_ZGoSafeTillStop(5000, VariableSys.VelMode_Debug_Manual);
                            XYGoPosTillStop(5000, VariableSys.pReadyPoint, VariableSys.VelMode_Current_Manual);

                        }
                        catch { }
                    });
                }
                catch { }
            }
        }
        #endregion

        #region BadMark
        private void bXY_BadMARK_Click(object sender, EventArgs e)
        {
            if (dGV_Paste.SelectedRows.Count > 0 && (dGV_Paste.SelectedRows[0].Index != dGV_Paste.RowCount - 1))
            {
                for (int i_Temp = 0; i_Temp < dGV_Paste.SelectedRows.Count; i_Temp++)
                {
                    if (dGV_Paste.SelectedRows[i_Temp].Index != dGV_Paste.Rows.Count - 1)
                    {
                        PointF xy = this.XYPos;
                        dGV_Paste.Rows[dGV_Paste.SelectedRows[i_Temp].Index].Cells[9 + Variable.NOZZLE_NUM].Value = xy.X.ToString();
                        dGV_Paste.Rows[dGV_Paste.SelectedRows[i_Temp].Index].Cells[10 + Variable.NOZZLE_NUM].Value = xy.Y.ToString();
                    }
                }
            }
            bXY_BadMARK.BackColor = Color.MediumSpringGreen;
        }

        private void bROI_BadMARK_Click(object sender, EventArgs e)
        {
            try
            {
                tROI_TOP_BadMark.Text = ((RectangleContour)(imageSet.Roi[0].Shape)).Top.ToString();
                tROI_LEFT_BadMark.Text = ((RectangleContour)(imageSet.Roi[0].Shape)).Left.ToString();
                tROI_WIDTH_BadMark.Text = ((RectangleContour)(imageSet.Roi[0].Shape)).Width.ToString();
                tROI_HEIGHT_BadMark.Text = ((RectangleContour)(imageSet.Roi[0].Shape)).Height.ToString();

            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("No ROI in Image!", "Info");
                }
                else
                {
                    MessageBox.Show("在图像中没有矩形框", "提示");
                }
            }
        }

        private void bBadMarkDetect_Click(object sender, EventArgs e)
        {
            try
            {
                tBadMarkValue.Text = AreaCount(imageSet.Image, imageSet.Roi, rB_ISWhite.Checked).ToString();
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Fail to set!", "Info");
                }
                else
                {
                    MessageBox.Show("数值设置错误", "提示");
                }
            }
        }

        private void bXY_BadMARK_MouseDown(object sender, MouseEventArgs e)
        {
            bXY_BadMARK.BackColor = Color.Transparent;
        }

        private void rB_BadMark_Area_CheckedChanged(object sender, EventArgs e)
        {
            if (rB_BadMark_Area.Checked)
            {
                PasteInfo.BadMark_AlgthrimIndex = 1;
            }
            gB_BadMarkArea.Visible = rB_BadMark_Area.Checked;
            gB_BadMarkPattern.Visible = !rB_BadMark_Area.Checked;
        }

        private void rB_BadMark_Pattern_CheckedChanged(object sender, EventArgs e)
        {
            if (rB_BadMark_Pattern.Checked)
            {
                PasteInfo.BadMark_AlgthrimIndex = 2;
            }
            gB_BadMarkArea.Visible = !rB_BadMark_Pattern.Checked;
            gB_BadMarkPattern.Visible = rB_BadMark_Pattern.Checked;
        }

        private void bLearn_BadMark_Click(object sender, EventArgs e)
        {
            PasteInfo.BadMark_Image = new VisionImage();
            Extract_LearnPttern(imageSet.Image, PasteInfo.BadMark_Image);
            Algorithms.Copy(PasteInfo.BadMark_Image, image_BadMark.Image);
        }

        private void bDetect_BadMark_Click(object sender, EventArgs e)
        {
            short Score = 600;
            double MinR = -10;
            double MaxR = 10;
            short rtn = 0;
            Variable.CamReturn a = new Variable.CamReturn();
            try
            {
                Score = short.Parse(tScore_BadMark.Text);
                MinR = double.Parse(tMinAngle_BadMark.Text);
                MaxR = double.Parse(tMaxAngle_BadMark.Text);
                rtn = CamDetect_PatternMatch(imageSet.Image, PasteInfo.BadMark_Image, (float)Score, 1, (float)MinR, (float)MaxR, imageSet.Roi, ref a, 0, 0);
                if (rtn == 0)
                {
                    PasteInfo.BadMark_Score = Score;
                    PasteInfo.BadMark_MinAngle = MinR;
                    PasteInfo.BadMark_MaxAngle = MaxR;
                    MessageBox.Show("BadMark:OK！");
                }
                else
                {
                    MessageBox.Show("BadMark:Fail！");
                }
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Detect Fail!", "Info");
                }
                else
                {
                    MessageBox.Show("请正确输入数值或模板未建立", "提示");
                }

                return;
            }
        }

        private void bRecodeShutter_Click(object sender, EventArgs e)
        {
            tShutter_BadMark.Text = ntCamShutter.Value.ToString();
        }
        #endregion

        #region 分段加速
        private void bSaveDistVel_MouseDown(object sender, MouseEventArgs e)
        {
            bSaveDistVel.BackColor = Color.Transparent;
        }

        private void bSaveDistVel_Click(object sender, EventArgs e)
        {
            try
            {
                if (dGV_CompareVel.Rows.Count == 0)
                {
                    if (VariableSys.LanguageFlag == 1)
                    {
                        MessageBox.Show("Save Fail,no data!", "Info");
                    }
                    else
                    {
                        MessageBox.Show("数据为0，请确认后再保存！", "提示");
                    }

                    return;
                }
                VariableSys.DistVelCount = (short)(dGV_CompareVel.Rows.Count);
                VariableSys.DistVel_MinDist = new double[VariableSys.DistVelCount];
                VariableSys.DistVel_MaxDist = new double[VariableSys.DistVelCount];
                VariableSys.DistVel_Ratio_LowVel = new double[VariableSys.DistVelCount];
                VariableSys.DistVel_Ratio_HighVel = new double[VariableSys.DistVelCount];
                VariableSys.DistVel_Ratio_Acc = new double[VariableSys.DistVelCount];
                VariableSys.DistVel_Ratio_Dec = new double[VariableSys.DistVelCount];
                for (int i = 0; i < VariableSys.DistVelCount; i++)
                {
                    VariableSys.DistVel_MinDist[i] = double.Parse(dGV_CompareVel.Rows[i].Cells[0].Value.ToString());
                    VariableSys.DistVel_MaxDist[i] = double.Parse(dGV_CompareVel.Rows[i].Cells[1].Value.ToString());
                    VariableSys.DistVel_Ratio_LowVel[i] = double.Parse(dGV_CompareVel.Rows[i].Cells[2].Value.ToString());
                    VariableSys.DistVel_Ratio_HighVel[i] = double.Parse(dGV_CompareVel.Rows[i].Cells[3].Value.ToString());
                    VariableSys.DistVel_Ratio_Acc[i] = double.Parse(dGV_CompareVel.Rows[i].Cells[4].Value.ToString());
                    VariableSys.DistVel_Ratio_Dec[i] = double.Parse(dGV_CompareVel.Rows[i].Cells[5].Value.ToString());
                    Ini_Sys.IniWriteNumber("DistVel", "MinDist" + (i + 1).ToString(), VariableSys.DistVel_MinDist[i]);
                    Ini_Sys.IniWriteNumber("DistVel", "MaxDist" + (i + 1).ToString(), VariableSys.DistVel_MaxDist[i]);
                    Ini_Sys.IniWriteNumber("DistVel", "VelRatioLowVel" + (i + 1).ToString(), VariableSys.DistVel_Ratio_LowVel[i]);
                    Ini_Sys.IniWriteNumber("DistVel", "VelRatioHighVel" + (i + 1).ToString(), VariableSys.DistVel_Ratio_HighVel[i]);
                    Ini_Sys.IniWriteNumber("DistVel", "VelRatioAcc" + (i + 1).ToString(), VariableSys.DistVel_Ratio_Acc[i]);
                    Ini_Sys.IniWriteNumber("DistVel", "VelRatioDec" + (i + 1).ToString(), VariableSys.DistVel_Ratio_Dec[i]);
                }
                Ini_Sys.IniWriteNumber("DistVel", "Count", VariableSys.DistVelCount);
            }
            catch
            {
                MessageBox.Show("数据格式出错（注意非数字），请确认后再保存！", "提示");
            }
        }

        private void dGV_CompareVel_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                tMinDist.Text = dGV_CompareVel.SelectedRows[0].Cells[0].Value.ToString();
                tMaxDist.Text = dGV_CompareVel.SelectedRows[0].Cells[1].Value.ToString();
                tRatio_DistVel_LowVel.Text = dGV_CompareVel.SelectedRows[0].Cells[2].Value.ToString();
                tRatio_DistVel_HighVel.Text = dGV_CompareVel.SelectedRows[0].Cells[3].Value.ToString();
                tRatio_DistVel_Acc.Text = dGV_CompareVel.SelectedRows[0].Cells[4].Value.ToString();
                tRatio_DistVel_Dec.Text = dGV_CompareVel.SelectedRows[0].Cells[5].Value.ToString();
                AddRowHeader(dGV_CompareVel, false);
            }
            catch (System.Exception ex)
            {

            }

        }

        private void bSetSingle_Click(object sender, EventArgs e)
        {
            double a0, a1, a2, a3, a4, a5;
            try
            {
                a0 = double.Parse(tMinDist.Text);
                a1 = double.Parse(tMaxDist.Text);
                a2 = double.Parse(tRatio_DistVel_LowVel.Text);
                a3 = double.Parse(tRatio_DistVel_HighVel.Text);
                a4 = double.Parse(tRatio_DistVel_Acc.Text);
                a5 = double.Parse(tRatio_DistVel_Dec.Text);
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("输入数值有误！");
                }
                return;
            }
            dGV_CompareVel.SelectedRows[0].Cells[0].Value = a0.ToString();
            dGV_CompareVel.SelectedRows[0].Cells[1].Value = a1.ToString();
            dGV_CompareVel.SelectedRows[0].Cells[2].Value = a2.ToString();
            dGV_CompareVel.SelectedRows[0].Cells[3].Value = a3.ToString();
            dGV_CompareVel.SelectedRows[0].Cells[4].Value = a4.ToString();
            dGV_CompareVel.SelectedRows[0].Cells[5].Value = a5.ToString();
        }

        private void bDistVel_Add_Click(object sender, EventArgs e)
        {
            //获取当前选定的Index
            if (dGV_CompareVel.SelectedRows.Count > 0)
            {
                dGV_CompareVel.Rows.Insert(dGV_CompareVel.SelectedRows[0].Index + 1, 1);
                AddRowHeader(dGV_CompareVel, false);
                DataGridViewRow item = dGV_CompareVel.Rows[dGV_CompareVel.SelectedRows[0].Index + 1];
                item.Cells[0].Value = "0";
                item.Cells[1].Value = "0";
                item.Cells[2].Value = "0";
                item.Cells[3].Value = "0";
                item.Cells[4].Value = "0";
                item.Cells[5].Value = "0";
            }
            else
            {
                dGV_CompareVel.Rows.Insert(0, 1);
                AddRowHeader(dGV_CompareVel, false);
                DataGridViewRow item = dGV_CompareVel.Rows[0];
                item.Cells[0].Value = "0";
                item.Cells[1].Value = "0";
                item.Cells[2].Value = "0";
                item.Cells[3].Value = "0";
                item.Cells[4].Value = "0";
                item.Cells[5].Value = "0";
            }
        }

        private void bDistVel_Del_Click(object sender, EventArgs e)
        {
            if (dGV_CompareVel.SelectedRows.Count > 0)
            {
                //获取当前选中的行（单行或者多行）
                DialogResult RSS;
                if (VariableSys.LanguageFlag == 1)
                {
                    RSS = MessageBox.Show(this, "Are you sure to delete the data？", "Info", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                }
                else
                {
                    RSS = MessageBox.Show(this, "确定要删除选中行数据码？", "提示", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                }
                switch (RSS)
                {
                    case DialogResult.Yes:
                        //获取当前选定的Index
                        for (int i = this.dGV_CompareVel.SelectedRows.Count; i > 0; i--)
                        {
                            if (dGV_CompareVel.SelectedRows[i - 1].Index == (dGV_CompareVel.RowCount - 1))
                            {
                                if (VariableSys.LanguageFlag == 1)
                                {
                                    MessageBox.Show("Delete the end line fail!", "Info");
                                }
                                else
                                {
                                    MessageBox.Show("末尾行无数据不可删除！", "提示");
                                }
                                break;
                            }
                            int Index = dGV_CompareVel.SelectedRows[i - 1].Index;
                            dGV_CompareVel.Rows.RemoveAt(Index);
                        }
                        AddRowHeader(dGV_CompareVel, false);
                        break;
                    case DialogResult.No:
                        break;
                }
            }
        }

        private void bDistVel_Up_Click(object sender, EventArgs e)
        {
            if (dGV_CompareVel.SelectedRows.Count > 0 && (dGV_CompareVel.SelectedRows[0].Index != dGV_CompareVel.RowCount - 1))
            {
                int index = dGV_CompareVel.SelectedRows[0].Index;
                if (index == 0)
                {
                    return;
                }
                List<string> list = new List<string>();
                for (int i = 0; i < dGV_CompareVel.Columns.Count; i++)
                {
                    list.Add(dGV_CompareVel.SelectedRows[0].Cells[i].Value.ToString());   //把当前选中行的数据存入list数组中  
                }
                for (int j = 0; j < dGV_CompareVel.Columns.Count; j++)
                {
                    dGV_CompareVel.Rows[index].Cells[j].Value = dGV_CompareVel.Rows[index - 1].Cells[j].Value;
                    dGV_CompareVel.Rows[index - 1].Cells[j].Value = list[j].ToString();
                }
                dGV_CompareVel.Rows[index].Selected = false;
                dGV_CompareVel.Rows[index - 1].Selected = true;
            }
        }

        private void bDistVel_Down_Click(object sender, EventArgs e)
        {
            if (dGV_CompareVel.SelectedRows.Count > 0 && (dGV_CompareVel.SelectedRows[0].Index != dGV_CompareVel.RowCount - 1))
            {
                int index = dGV_CompareVel.SelectedRows[0].Index;
                if (index == dGV_CompareVel.RowCount - 2)
                {
                    return;
                }
                List<string> list = new List<string>();
                for (int i = 0; i < dGV_CompareVel.Columns.Count; i++)
                {
                    list.Add(dGV_CompareVel.SelectedRows[0].Cells[i].Value.ToString());   //把当前选中行的数据存入list数组中  
                }

                for (int j = 0; j < dGV_CompareVel.Columns.Count; j++)
                {
                    dGV_CompareVel.Rows[index].Cells[j].Value = dGV_CompareVel.Rows[index + 1].Cells[j].Value;
                    dGV_CompareVel.Rows[index + 1].Cells[j].Value = list[j].ToString();
                }
                dGV_CompareVel.Rows[index + 1].Selected = true;
                dGV_CompareVel.Rows[index].Selected = false;
            }
        }
        #endregion

        private void bDetect_Click(object sender, EventArgs e)
        {
        }

        private void bNewProgram_Click(object sender, EventArgs e)
        {
            String sss = "";
            if (VariableSys.LanguageFlag == 1)
            {
                sss = Microsoft.VisualBasic.Interaction.InputBox("Input program name!", "new program", "programe name", 400, 320);
            }
            else
            {
                sss = Microsoft.VisualBasic.Interaction.InputBox("输入您要新建的程式配置名称!", "新建程式配置", "名称", 400, 320);
            }
            if (sss == "")
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("program name should not be empty!", "Info");
                }
                else
                {
                    MessageBox.Show("配置名称不能为空", "提示");
                }
                return;
            }
            if (Directory.Exists(Variable.sPath_SYS_Program + "\\" + sss))
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("program is exist!", "Info");
                }
                else
                {
                    MessageBox.Show("此配置已经存在", "提示");
                }
                return;
            }
            lProgramName.Text = sss;
            gB_Feeder.Visible = true;
            gB_JOB.Visible = true;
            VariableSys.sProgramName = lProgramName.Text;
            if (!Directory.Exists(Variable.sPath_SYS_Program + "\\" + VariableSys.sProgramName))
            {
                Directory.CreateDirectory(Variable.sPath_SYS_Program + "\\" + VariableSys.sProgramName);
                Directory.CreateDirectory(Variable.sPath_SYS_Program + "\\" + VariableSys.sProgramName + "\\" + "Feeder_Left");
                Directory.CreateDirectory(Variable.sPath_SYS_Program + "\\" + VariableSys.sProgramName + "\\" + "Feeder_Left\\Label");
                Directory.CreateDirectory(Variable.sPath_SYS_Program + "\\" + VariableSys.sProgramName + "\\" + "Feeder_Right");
                Directory.CreateDirectory(Variable.sPath_SYS_Program + "\\" + VariableSys.sProgramName + "\\" + "Feeder_Right\\Label");
                Directory.CreateDirectory(Variable.sPath_SYS_Program + "\\" + VariableSys.sProgramName + "\\" + "JOBFILE");
                Directory.CreateDirectory(Variable.sPath_SYS_Program + "\\" + VariableSys.sProgramName + "\\" + "PASTE");
            }
            bLoadProgram.BackColor = Color.Transparent;
        }

        private void bLoadProgram_Click(object sender, EventArgs e)
        {
            folderBrowserDialog.SelectedPath = Variable.sPath_SYS_Program;
            if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
            {
                if (!Directory.Exists(Variable.sPath_SYS_Program + "\\" + folderBrowserDialog.SelectedPath.Substring(folderBrowserDialog.SelectedPath.LastIndexOf("\\") + 1)))
                {
                    if (VariableSys.LanguageFlag == 1)
                    {
                        MessageBox.Show("Program is not exist!", "Info");
                    }
                    else
                    {
                        MessageBox.Show("程式资料库中不存在此配置,请从程式资料库中选择", "提示");
                    }
                    return;
                }

                lProgramName.Text = folderBrowserDialog.SelectedPath.Substring(folderBrowserDialog.SelectedPath.LastIndexOf("\\") + 1);
                //导入 左右 feeder 和 JOB(Paste)
                short rtn = InitProgram(lProgramName.Text);
                if (rtn != 0)
                {
                    if (VariableSys.LanguageFlag == 1)
                    {
                        MessageBox.Show("Load Program error!", "Info");
                    }
                    else
                    {
                        MessageBox.Show("导入程式错误", "提示");
                    }
                    return;
                }
                try
                {
                    if (VariableSys.sProgramName != lProgramName.Text)
                    {
                        StatisticsHelper.Instance.Reoprt.Start(TimeDefine.ChangeLineTime, $"{VariableSys.sProgramName} => {lProgramName.Text}");
                    }

                    VariableSys.sProgramName = lProgramName.Text;
                    Ini_Sys.IniWriteValue("LastProgram", "ProgramName", VariableSys.sProgramName);

                    ChartPane.GraphPane.Title.Text = "Program:" + VariableSys.sProgramName;

                    this.cbSelectFeeder.SelectedIndex = 0;
                    //this.UpdateFlyMode();

                    cB_LocalMode.Checked = JOB.bLocalMode;
                    cB_UpFly.Checked = JOB.bUpFly;

                    if (JOB.iLocalAlign > 0)
                        cb_LocalAlign.SelectedIndex = JOB.iLocalAlign - 1;
                    //PASTE
                    dGV_JOB_U.Rows.Clear();
                    if (JOB.PasteCount != 0)
                    {
                        dGV_JOB_U.Rows.Add(JOB.PasteCount);
                        for (int i = 0; i < JOB.PasteCount; i++)
                        {
                            dGV_JOB_U.Rows[i].Cells[0].Value = JOB.PasteName[i];
                            dGV_JOB_U.Rows[i].Cells[1].Value = JOB.Cam_Mark1Point[i].X.ToString("F3");
                            dGV_JOB_U.Rows[i].Cells[2].Value = JOB.Cam_Mark1Point[i].Y.ToString("F3");
                            dGV_JOB_U.Rows[i].Cells[3].Value = JOB.Cam_Mark2Point[i].X.ToString("F3");
                            dGV_JOB_U.Rows[i].Cells[4].Value = JOB.Cam_Mark2Point[i].Y.ToString("F3");
                            dGV_JOB_U.Rows[i].Cells[5].Value = JOB.OffsetX[i].ToString();
                            dGV_JOB_U.Rows[i].Cells[6].Value = JOB.OffsetY[i].ToString();
                            dGV_JOB_U.Rows[i].Cells[7].Value = JOB.OffsetR[i].ToString();
                            dGV_JOB_U.Rows[i].Cells[8].Value = JOB.UsedFeeder[i].ToString();
                            dGV_JOB_U.Rows[i].Cells[9].Value = JOB.UsedNz[i].ToString();
                            dGV_JOB_U.Rows[i].Cells[10].Value = JOB.FlyDelay[i].ToString();
                        }
                        dGV_JOB_U.Rows[0].Selected = true;
                    }

                    if (JOB.iLocalAlign == 1)
                    {
                        Common.SerializableHelper<GlobalMarkModule> helper = new Common.SerializableHelper<GlobalMarkModule>(JOB.GlobalConfig);
                        JOB.GlobalConfig = helper.DeXMLSerialize(Variable.sPath_SYS_Program + "\\" + lProgramName.Text + "\\" + "JOBFILE\\Global.xml");
                    }
                    bUpdateChart = true;
                }
                catch
                {
                }
            }
        }

        #region 贴标平面校验
        private PointF GetXY_DownUpValue(short NozzleIndex)
        {
            return VariableSys.pNozzle_2_Cam[NozzleIndex];
        }
        #endregion

        private void bSetOffset_Click_1(object sender, EventArgs e)
        {
            if (dGV_JOB_U.SelectedRows.Count > 0)
            {
                double offsetx = 0;
                double offsety = 0;
                double offsetr = 0;
                try
                {
                    offsetx = double.Parse(tOffSetX_Paste.Text);
                    offsety = double.Parse(tOffSetY_Paste.Text);
                    offsetr = double.Parse(tOffSetR_Paste.Text);
                }
                catch
                {
                    MessageBox.Show("请输入正确数值", "提示");
                    return;
                }
                for (int i = 0; i < dGV_JOB_U.SelectedRows.Count; i++)
                {
                    dGV_JOB_U.SelectedRows[i].Cells[5].Value = offsetx.ToString();
                    dGV_JOB_U.SelectedRows[i].Cells[6].Value = offsety.ToString();
                    dGV_JOB_U.SelectedRows[i].Cells[7].Value = offsetr.ToString();
                }
            }
        }

        private void pLanguage_Click(object sender, EventArgs e)
        {
            if (VariableSys.LanguageFlag == 0)
            {
                VariableSys.LanguageFlag = 1;
                pLanguage.Image = Properties.Resources.english;
                string ww = typeof(Form_Main).Assembly.GetName().Name;
                ChangLanguage.SetAllLang("en-GB", ww, "Form_Main");
                ChangLanguage.SetLang("en-GB", this, typeof(Form_Main));
                dGV_JOB_U.Columns[0].HeaderText = "PasteInfo";
                dGV_JOB_U.Columns[1].HeaderText = "Mark1X";
                dGV_JOB_U.Columns[2].HeaderText = "Mark1Y";
                dGV_JOB_U.Columns[3].HeaderText = "Mark2X";
                dGV_JOB_U.Columns[4].HeaderText = "Mark2Y";
                dGV_JOB_U.Columns[5].HeaderText = "OffsetX";
                dGV_JOB_U.Columns[6].HeaderText = "OffsetY";
                dGV_JOB_U.Columns[7].HeaderText = "OffsetR";
            }
            else
            {
                VariableSys.LanguageFlag = 0;
                pLanguage.Image = Properties.Resources.china;
                string ww = typeof(Form_Main).Assembly.GetName().Name;
                ChangLanguage.SetAllLang("zh-CN", ww, "Form_Main");
                ChangLanguage.SetLang("zh-CN", this, typeof(Form_Main));
                dGV_JOB_U.Columns[0].HeaderText = "帖附信息";
                dGV_JOB_U.Columns[1].HeaderText = "Mark1拍照点X";
                dGV_JOB_U.Columns[2].HeaderText = "Mark1拍照点Y";
                dGV_JOB_U.Columns[3].HeaderText = "Mark2拍照点X";
                dGV_JOB_U.Columns[4].HeaderText = "Mark2拍照点Y";
                dGV_JOB_U.Columns[5].HeaderText = "OffsetX";
                dGV_JOB_U.Columns[6].HeaderText = "OffsetY";
                dGV_JOB_U.Columns[7].HeaderText = "OffsetR";
            }

            Ini_Sys.IniWriteNumber("RunOption", "LanguageFlag", VariableSys.LanguageFlag);
            #region UI
            if (VariableSys.dFlowIN_OUT == 1)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bFlowInOut.Text = "L-in-R-out（2）";
                }
                else
                {
                    bFlowInOut.Text = "左进右出（两段式）";
                }
            }
            if (VariableSys.dFlowIN_OUT == 2)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bFlowInOut.Text = "R-in-L-out（2）";
                }
                else
                {
                    bFlowInOut.Text = "右进左出（两段式）";
                }
            }
            if (VariableSys.dFlowIN_OUT == 3)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bFlowInOut.Text = "L-in-L-out（2）";
                }
                else
                {
                    bFlowInOut.Text = "左进左出（两段式）";
                }

            }
            if (VariableSys.dFlowIN_OUT == 4)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bFlowInOut.Text = "R-in-R-out（2）";
                }
                else
                {
                    bFlowInOut.Text = "右进右出（两段式）";
                }
            }
            if (VariableSys.dFlowIN_OUT == 5)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bFlowInOut.Text = "L-in-R-out（3）";
                }
                else
                {
                    bFlowInOut.Text = "左进右出（三段式）";
                }
            }
            if (VariableSys.dFlowIN_OUT == 6)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bFlowInOut.Text = "R-in-L-out（3）";
                }
                else
                {
                    bFlowInOut.Text = "右进左出（三段式）";
                }
            }
            /////////////////////////////////////////////////
            if (VariableSys.iOutSideBadMark == 0)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bBadMark.Text = "BadMark:Out";
                }
                else
                {
                    bBadMark.Text = "BadMark:外部";
                }
            }
            if (VariableSys.iOutSideBadMark == 1)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bBadMark.Text = "BadMark:Scan";
                }
                else
                {
                    bBadMark.Text = "BadMark:扫描";
                }
            }
            if (VariableSys.iOutSideBadMark == 2)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bBadMark.Text = "BadMark:Out Fail2Scan";
                }
                else
                {
                    bBadMark.Text = "BadMark:外部失败自动切换到扫描";
                }
            }
            if (VariableSys.iOutSideBadMark == 3)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bBadMark.Text = "BadMark:None";
                }
                else
                {
                    bBadMark.Text = "BadMark:屏蔽";
                }
            }
            if (VariableSys.bSystemIsOnLine)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bLineStyle.Text = "InLine";
                }
                else
                {
                    bLineStyle.Text = "在线式";
                }
            }
            else
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bLineStyle.Text = "OffLine";
                }
                else
                {
                    bLineStyle.Text = "离线式";
                }
            }

            if (VariableSys.bAfterBreakEN)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bAfterRequest.Text = "AfterRequest:EN";
                }
                else
                {
                    bAfterRequest.Text = "后要板:侦测";
                }
            }
            else
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bAfterRequest.Text = "AfterRequest:Dis";
                }
                else
                {
                    bAfterRequest.Text = "后要板:屏蔽";
                }
            }

            if (VariableSys.iAxisSource == 0)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bCoordSorce.Text = "Coord:Ecoder";
                }
                else
                {
                    bCoordSorce.Text = "系统坐标:编码器";
                }

            }
            else if (VariableSys.iAxisSource == 1)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bCoordSorce.Text = "Coord:Planner";
                }
                else
                {
                    bCoordSorce.Text = "系统坐标:规划器";
                }

            }
            imageSet.ShowToolbar = true;
            imageSet.ToolsShown = ViewerTools.All;
            imageUp.ShowToolbar = true;
            imageUp.ToolsShown = ViewerTools.All;

            #endregion
            gB_Feeder.Visible = lProgramName.Text == "" ? false : true;
            gB_JOB.Visible = lProgramName.Text == "" ? false : true;
            gB_PasteInfo.Visible = lPasteInfo.Text == "" ? false : true;
        }

        private void cbxSelectR_SelectedIndexChanged(object sender, EventArgs e)
        {
            this.tR1InitDeg.Text = this.R_RunParamMap[(uint)this.cbxSelectR.SelectedIndex].InitPos.ToString("f3");
            this.tZSafeHeight.Text = this.Z_RunParamMap[(uint)this.cbxSelectR.SelectedIndex].SafeHeigh.ToString("f3");
            this.tCamZPos.Text = this.Z_RunParamMap[(uint)this.cbxSelectR.SelectedIndex].CamHeigh.ToString("f3");
            this.tPasteHeight.Text = this.Z_RunParamMap[(uint)this.cbxSelectR.SelectedIndex].PasteHeight.ToString("f3");
            this.tThrowHeight.Text = this.Z_RunParamMap[(uint)this.cbxSelectR.SelectedIndex].ThrowHeight.ToString("f3");
            this.bRecrod3.BackColor = Color.White;
        }

        private void pTurnN_MouseDown(object sender, MouseEventArgs e)
        {
            pTurnN.Image = GeneralLabelerStation.Properties.Resources.RN2;
            Turn.Jog(VariableSys.VelMode_Current_Manual, true);
        }

        private void pTurnN_MouseUp(object sender, MouseEventArgs e)
        {
            pTurnN.Image = GeneralLabelerStation.Properties.Resources.RN;
            Turn.StopAxis();
        }

        private void pTurnP_MouseDown(object sender, MouseEventArgs e)
        {
            pTurnP.Image = GeneralLabelerStation.Properties.Resources.RS2;
            Turn.Jog(VariableSys.VelMode_Current_Manual, false);
        }

        private void pTurnP_MouseUp(object sender, MouseEventArgs e)
        {
            pTurnP.Image = GeneralLabelerStation.Properties.Resources.RS;
            Turn.StopAxis();
        }

        private void bTurnRotation_Click(object sender, EventArgs e)
        {
            string str = tTurnR.Text;
            double p = 0;
            try
            {
                p = Convert.ToDouble(str);
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("输入数值有误！");
                }

                return;
            }

            Turn.GoPos(p, VariableSys.VelMode_Current_Manual);
        }

        private void bRecordTrunPaste_Click(object sender, EventArgs e)
        {
            this.tTurnPasteAngle.Text = Turn.Pos.ToString("f3");
        }

        private void bRecordXIAngle_Click(object sender, EventArgs e)
        {
            this.tTurnXIAngle.Text = Turn.Pos.ToString("f3");
        }

        private void bTurnInit_Click(object sender, EventArgs e)
        {
            this.All_ZGoSafeTillStop(3000, VariableSys.VelMode_Debug_Manual);
            this.XYGoPosTillStop(5000, VariableSys.pReadyPoint, VariableSys.VelMode_Debug_Manual);
            Turn.GoPos(VariableSys.dTurnXIAngle, VariableSys.VelMode_Current_Manual);
        }

        private void bTurnPaste_Click(object sender, EventArgs e)
        {
            this.All_ZGoSafeTillStop(3000, VariableSys.VelMode_Debug_Manual);
            this.XYGoPosTillStop(5000, VariableSys.pReadyPoint, VariableSys.VelMode_Debug_Manual);
            Turn.GoPos(VariableSys.dTurnPasteAngle, VariableSys.VelMode_Current_Manual);
        }

        private void cbxSelectNozzle_SelectedIndexChanged(object sender, EventArgs e)
        {
            //this.UpdateFlyMode();
        }

        private void bRecordMinX_Click(object sender, EventArgs e)
        {
            this.tMinXSafe.Text = this.XYPos.X.ToString("f3");
        }

        private void bRecordMaxX_Click(object sender, EventArgs e)
        {
            this.tMaxXSafe.Text = this.XYPos.X.ToString("f3");
        }

        private void bInput_Click(object sender, EventArgs e)
        {
            if (this.RunMode != 1)
            {
                Task.Factory.StartNew(() =>
                {
                    StopProduct_ON();
                    CarryProduct_OFF();
                    Thread.Sleep(1000);
                    ConveryInput();

                    Stopwatch a = new Stopwatch();
                    a.Start();

                    while (!this.bArr_IO_IN_Status.bIN_WorkSpace_Reach
                    && a.ElapsedMilliseconds < 10000)
                    {
                        Thread.Sleep(5);
                    }

                    a.Stop();
                    if (a.ElapsedMilliseconds < 10000)
                    {
                        Thread.Sleep(500);
                        CarryProduct_ON();
                    }

                    ConveyorStop();
                });
            }
        }

        private void bOutput_Click(object sender, EventArgs e)
        {
            if (this.RunMode != 1)
            {
                Task.Factory.StartNew(() =>
                {
                    StopProduct_OFF();
                    CarryProduct_OFF();
                    Thread.Sleep(1000);

                    ConveryOutput();

                    Stopwatch a = new Stopwatch();
                    a.Start();

                    while (a.ElapsedMilliseconds < 5000)
                    {
                        Thread.Sleep(5);

                        if(this.WrokOutput)
                        {
                            break;
                        }
                    }

                    a.Stop();
                    ConveyorStop();
                });
            }
        }

        private void bOpmiztionNz_Click(object sender, EventArgs e)
        {
        }

        private void bNzToCam_Click(object sender, EventArgs e)
        {
            try
            {
                PointF pt = this.XYPos;
                pt = NozzleToCamPoint(pt, ZAxisIndex - 1);
                this.XYGoPos(pt, VariableSys.VelMode_Debug);
            }
            catch { }
        }

        private void bCamToNz_Click(object sender, EventArgs e)
        {
            try
            {
                PointF pt = this.XYPos;
                pt = CamToNozzlePoint(pt, ZAxisIndex - 1);
                this.XYGoPos(pt, VariableSys.VelMode_Debug);
            }
            catch { }
        }

        private void bSetLocalUse_Click(object sender, EventArgs e)
        {
            if (dGV_JOB_U.SelectedRows.Count > 0)
            {
                for (int i_Temp = 0; i_Temp < dGV_JOB_U.SelectedRows.Count; i_Temp++)
                {
                    dGV_JOB_U.Rows[dGV_JOB_U.SelectedRows[i_Temp].Index].Cells[8].Value = this.tFeederNo.Text.ToString();
                    dGV_JOB_U.Rows[dGV_JOB_U.SelectedRows[i_Temp].Index].Cells[9].Value = this.tNozzleNo.Text.ToString();
                }
            }
        }

        private void cB_LocalMode_CheckedChanged(object sender, EventArgs e)
        {
            JOB.bLocalMode = this.cB_LocalMode.Checked;
        }

        #region 上视觉飞拍
        private void cB_UpFly_CheckedChanged(object sender, EventArgs e)
        {
            JOB.bUpFly = this.cB_UpFly.Checked;
        }

        private void bOpimztionPath_Click(object sender, EventArgs e)
        {
            var line = this.OptimizePath();
            if (line.Count > 0 && JOB.PasteCount != 0)
            {
                dGV_JOB_U.Rows.Clear();
                for (int i = 0; i < line.Count; ++i)
                {
                    for (int j = 0; j < line[i].Count; ++j)
                    {
                        dGV_JOB_U.Rows.Add();
                        dGV_JOB_U.Rows[dGV_JOB_U.Rows.Count - 2].Cells[0].Value = line[i][j].PasteName;
                        dGV_JOB_U.Rows[dGV_JOB_U.Rows.Count - 2].Cells[1].Value = line[i][j].Cam1.X.ToString("F3");
                        dGV_JOB_U.Rows[dGV_JOB_U.Rows.Count - 2].Cells[2].Value = line[i][j].Cam1.Y.ToString("F3");
                        dGV_JOB_U.Rows[dGV_JOB_U.Rows.Count - 2].Cells[3].Value = line[i][j].Cam2.X.ToString("F3");
                        dGV_JOB_U.Rows[dGV_JOB_U.Rows.Count - 2].Cells[4].Value = line[i][j].Cam2.Y.ToString("F3");
                        dGV_JOB_U.Rows[dGV_JOB_U.Rows.Count - 2].Cells[5].Value = line[i][j].OffsetX.ToString();
                        dGV_JOB_U.Rows[dGV_JOB_U.Rows.Count - 2].Cells[6].Value = line[i][j].OffsetY.ToString();
                        dGV_JOB_U.Rows[dGV_JOB_U.Rows.Count - 2].Cells[7].Value = line[i][j].OffsetR.ToString();
                        dGV_JOB_U.Rows[dGV_JOB_U.Rows.Count - 2].Cells[8].Value = line[i][j].UsedFeeder.ToString();
                        dGV_JOB_U.Rows[dGV_JOB_U.Rows.Count - 2].Cells[9].Value = line[i][j].UsedNz.ToString();
                        dGV_JOB_U.Rows[dGV_JOB_U.Rows.Count - 2].Cells[10].Value = line[i][j].FlyDelay.ToString();
                    }
                }

                dGV_JOB_U.Rows[0].Selected = true;
            }
            //Dictionary
            //Directory<int, List<Variable.PasteItem>> map = new  
        }

        public List<List<Variable.PasteItem>> OptimizePath()
        {
            List<Variable.PasteItem> ModuleMark = new List<Variable.PasteItem>();
            for (int i = 0; i < JOB.PasteCount; i++)
            {
                Variable.PasteItem item = new Variable.PasteItem();
                item.PasteName = JOB.PasteName[i];
                item.Cam1 = JOB.Cam_Mark1Point[i];
                item.Cam2 = JOB.Cam_Mark2Point[i];
                item.OffsetX = JOB.OffsetX[i];
                item.OffsetY = JOB.OffsetY[i];
                item.OffsetR = JOB.OffsetR[i];
                item.UsedFeeder = JOB.UsedFeeder[i];
                item.UsedNz = JOB.UsedNz[i];
                item.FlyDelay = JOB.FlyDelay[i];
                ModuleMark.Add(item);
            }

            if (ModuleMark.Count == 0)
                return new List<List<Variable.PasteItem>>();


            // 根据Y方向排序
            ModuleMark.Sort((a, b) =>
            {
                if (a.Cam1.Y < b.Cam1.Y)
                    return -1;
                else if (a.Cam1.Y == b.Cam1.Y)
                    return 0;
                else
                    return 1;
            });

            List<List<Variable.PasteItem>> ModuleLine = new List<List<Variable.PasteItem>>();
            ModuleLine.Add(new List<Variable.PasteItem>());
            ModuleLine[0].Add(ModuleMark[0]);
            int line = 0;
            for (int i = 1; i < ModuleMark.Count; ++i)
            {
                if (Math.Abs(ModuleMark[i - 1].Cam1.Y - ModuleMark[i].Cam1.Y) < 3) // 小于3mm 认为属于一行的
                {
                    Variable.PasteItem temp = ModuleMark[i];
                    temp.Cam1.Y = ModuleLine[line][0].Cam1.Y;
                    ModuleLine[line].Add(temp);
                }
                else
                {
                    line++;
                    ModuleLine.Add(new List<Variable.PasteItem>());
                    ModuleLine[line].Add(ModuleMark[i]);
                }
            }

            // 蛇形排序
            for (int i = 0; i < ModuleLine.Count; ++i)
            {
                if (i % 2 == 0)
                {
                    ModuleLine[i].Sort((a, b) =>
                    {
                        if (a.Cam1.X < b.Cam1.X)
                            return -1;
                        else if (a.Cam1.X == b.Cam1.X)
                            return 0;
                        else
                            return 1;
                    });
                }
                else
                {
                    ModuleLine[i].Sort((a, b) =>
                    {
                        if (a.Cam1.X > b.Cam1.X)
                            return -1;
                        else if (a.Cam1.X == b.Cam1.X)
                            return 0;
                        else
                            return 1;
                    });
                }
            }

            ModuleMark.Clear();
            foreach (var item in ModuleLine)
            {
                ModuleMark.AddRange(item);
            }

            return ModuleLine;
        }

        public void WaitReach(PointF pt)
        {
            while (!AxisReach(pt))
            {
                Thread.Sleep(1);
            }
        }
        private void bCalParam_Click(object sender, EventArgs e)
        {
            try
            {
                //List<Variable.PasteItem> Temp = new List<Variable.PasteItem>();
                //for (int i = 0; i < dGV_JOB_U.Rows.Count - 1; i++)
                //{
                //    Variable.PasteItem item = new Variable.PasteItem();
                //    item.PasteName = this.dGV_JOB_U.Rows[i].Cells[0].Value.ToString();
                //    item.Cam1.X = float.Parse(this.dGV_JOB_U.Rows[i].Cells[1].Value.ToString());
                //    item.Cam1.Y = float.Parse(this.dGV_JOB_U.Rows[i].Cells[2].Value.ToString());
                //    item.Cam2.X = float.Parse(this.dGV_JOB_U.Rows[i].Cells[3].Value.ToString());
                //    item.Cam2.Y = float.Parse(this.dGV_JOB_U.Rows[i].Cells[4].Value.ToString());
                //    item.OffsetX = double.Parse(this.dGV_JOB_U.Rows[i].Cells[5].Value.ToString());
                //    item.OffsetY = double.Parse(this.dGV_JOB_U.Rows[i].Cells[6].Value.ToString());
                //    item.OffsetR = double.Parse(this.dGV_JOB_U.Rows[i].Cells[7].Value.ToString());
                //    item.UsedFeeder = int.Parse(this.dGV_JOB_U.Rows[i].Cells[8].Value.ToString());
                //    item.UsedNz = int.Parse(this.dGV_JOB_U.Rows[i].Cells[9].Value.ToString());
                //    item.FlyDelay = double.Parse(this.dGV_JOB_U.Rows[i].Cells[10].Value.ToString());
                //    Temp.Add(item);
                //}

                var line = this.OptimizePath();

                // 飞拍计算
                FlyTool tool = new FlyTool(CameraDefine.Instance[CAM.Top]._Session);
                tool.StartFly();
                Thread.Sleep(100);
                List<PointF> FlyResult = new List<PointF>();
                XYGoPosTillStop(30000, VariableSys.pReadyPoint, VariableSys.VelMode_Debug);
                Thread.Sleep(100);

                Thread task = new Thread(() =>
                {
                    for (int i = 0; i < line.Count; ++i)
                    {
                        if (line[i].Count > 1)
                        {
                            PointF startP = line[i][0].Cam1;
                            PointF endP = line[i].Last().Cam1;

                            int dir = 0;
                            if (startP.X > endP.X)
                            {
                                startP.X += 5;
                                endP.X -= 5;
                                dir = 1;
                            }
                            else
                            {
                                startP.X -= 5;
                                endP.X += 5;
                                dir = 0;
                            }

                            endP.Y = startP.Y;
                            Thread.Sleep(100);
                            XYGoPos(startP, VariableSys.VelMode_UpFly);
                            WaitReach(startP);

                            double[] Table = new double[6000];
                            short TabCount = 0;
                            for (int j = 0; j < line[i].Count; ++j)
                            {
                                Table[j] = (int)((line[i][j].Cam1.X + line[i][j].FlyDelay) * VariableSys.dRatio_Axis_X);
                                TabCount = (short)(line[i].Count);
                            }
                            Thread.Sleep(100);

                            short rtn = X.SetComapreTable(Table, TabCount);
                            rtn += X.SetComapreData(1, (uint)dir, 0, 0, 0, 5);//设置飞拍
                            XYGoPos(endP, VariableSys.VelMode_UpFly);
                            WaitReach(endP);

                            Thread.Sleep(100);
                            X.SetComapreData(0, (uint)dir, 0, 0, 0, 5);//取消飞拍
                        }
                    }
                });

                task.Start();
                while (task.IsAlive)
                {
                    Thread.Sleep(100);
                    Application.DoEvents();
                }

                Thread.Sleep(500);
                tool.StopFly();

                if (tool.GrabList.Count != JOB.PasteCount)
                {
                    MessageBox.Show($"飞拍采图 张数不匹配{tool.GrabList.Count}");
                    tool.ClearImage();
                }
                else
                {
                    List<PointF> PointResult = new List<PointF>();

                    Thread thd = new Thread(() =>
                    {
                        for (int i = 0; i < tool.GrabList.Count; ++i)
                        {
                            int index = this.GetRUNPasteIndex(JOB.PasteName[i]);
                            FlyResult.Add(Auto_DetectFly(ref RUN_PASTEInfo[index], tool.GrabList[i], JOB.Cam_Mark1Point[i]));
                            Algorithms.Copy(tool.GrabList[i], imageSet.Image);
                            Thread.Sleep(100);
                        }
                        tool.ClearImage();

                        // 点拍计算
                        for (int i = 0; i < line.Count; ++i)
                        {
                            for (int j = 0; j < line[i].Count; ++j)
                            {
                                XYGoPos(line[i][j].Cam1, VariableSys.VelMode_Debug);
                                WaitReach(line[i][j].Cam1);

                                Thread.Sleep(VariableSys.iUpCamDelay);
                                CameraDefine.Instance[CAM.Top]._Session.Snap(imageSet.Image);
                                int index = this.GetRUNPasteIndex(line[i][j].PasteName);
                                PointResult.Add(Auto_DetectFly(ref RUN_PASTEInfo[index], imageSet.Image, line[i][j].Cam1));
                            }
                        }
                    });

                    thd.Start();
                    while (thd.IsAlive)
                    {
                        Thread.Sleep(100);
                        Application.DoEvents();
                    }

                    if (FlyResult.Count == PointResult.Count)
                    {
                        // 与点拍进行比较
                        for (int index = 0; index < dGV_JOB_U.Rows.Count; ++index)
                        {
                            if (FlyResult[index].X == 0 || PointResult[index].X == 0)
                                continue;
                            double offset = double.Parse(dGV_JOB_U.Rows[index].Cells[10].Value.ToString());
                            dGV_JOB_U.Rows[index].Cells[10].Value = (offset + (FlyResult[index].X - PointResult[index].X)).ToString("f3");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }
        }
        #endregion

        public void ClearImage(List<VisionImage> list)
        {
            for (int i = 0; i < list.Count; ++i)
            {
                try
                {
                    list[i]?.Dispose();
                }
                catch { }
            }

            list.Clear();
        }

        private void cB_CamUpTrigger_CheckedChanged(object sender, EventArgs e)
        {
            if (Variable.PassWordOK > 1)
            {
                if (cB_CamUpTrigger.Checked)
                {
                    bSet_CamLive = false;
                    if (VariableSys.LanguageFlag == 1)
                    {
                        bCamLive.Text = "live";
                    }
                    else
                    {
                        bCamLive.Text = "实时";
                    }

                    try//关闭相机
                    {
                        bgWorker_Cam.CancelAsync();
                    }
                    catch
                    {
                        if (VariableSys.LanguageFlag == 1)
                        {
                            MessageBox.Show("Camera Acq error!", "Info");
                        }
                        else
                        {
                            MessageBox.Show("相机取像错误！", "提示");
                        }
                    }

                    bSnap.Enabled = true;
                    Thread.Sleep(200);
                    bFlyTest = true;
                    FlyMode = 1;
                    CameraDefine.Instance[CAM.Top]._Session.Attributes["CameraAttributes::AcquisitionControl::TriggerMode"].SetValue(1);
                    CameraDefine.Instance[CAM.Top]._Session.Attributes["CameraAttributes::AcquisitionControl::TriggerSource"].SetValue(1);
                }
                else
                {
                    bFlyTest = false;
                    FlyMode = 1;
                    CameraDefine.Instance[CAM.Top]._Session.Attributes["CameraAttributes::AcquisitionControl::TriggerMode"].SetValue(0);
                    CameraDefine.Instance[CAM.Top]._Session.Attributes["CameraAttributes::AcquisitionControl::TriggerSource"].SetValue(0);
                }
            }
        }

        private void tSetFlyDelay_Click(object sender, EventArgs e)
        {
            if (dGV_JOB_U.SelectedRows.Count > 0)
            {
                for (int i_Temp = 0; i_Temp < dGV_JOB_U.SelectedRows.Count; i_Temp++)
                {
                    dGV_JOB_U.Rows[dGV_JOB_U.SelectedRows[i_Temp].Index].Cells[10].Value = this.tFlyDelay.Text.ToString();
                }
            }
        }

        private void bImageInit_Click(object sender, EventArgs e)
        {
            double gain = 1;
            double offset = 0;
            try
            {
                gain = double.Parse(tGainInit.Text);
                offset = double.Parse(tOffsetInit.Text);
                Algorithms.Copy(GainOffset(imageSet.Image, gain, offset), imageSet.Image);
                dGV_Mark.Rows[Mark_Index].Cells[147].Value = gain.ToString();
                dGV_Mark.Rows[Mark_Index].Cells[148].Value = offset.ToString();
            }
            catch
            {
                MessageBox.Show("请输入正确数字", "提示");
            }

        }

        private void bReadPlaneC_Click(object sender, EventArgs e)
        {
            int selectNz = cB_NozzleIndex2.SelectedIndex;

            tDownCenterX.Text = Ini_Sys.IniReadValue("VisionCalibration", string.Format("Nozzle{0}_DownUpCenterX", selectNz + 1));
            tDownCenterY.Text = Ini_Sys.IniReadValue("VisionCalibration", string.Format("Nozzle{0}_DownUpCenterY", selectNz + 1));
        }

        private void bSaveProgram_Click(object sender, EventArgs e)
        {
            if (lProgramName.Text == "")
            {
                MessageBox.Show("请输入程式名称", "提示");
                return;
            }

            short rtn = 0;
            Ini_Sys.IniWriteValue("LastProgram", "ProgramName", VariableSys.sProgramName);
            ChartPane.GraphPane.Title.Text = VariableSys.sProgramName;
            bool OKNG = false;

            JobFile = new IniFile(Variable.sPath_SYS_Program + "\\" + VariableSys.sProgramName + "\\" + "JOBFILE\\Job.ini");
            try
            {
                SaveFeeder(VariableSys.sProgramName, this.cbSelectFeeder.SelectedIndex);
            }
            catch
            {
                rtn += 1;
                MessageBox.Show("Feeder:保存失败", "提示");
            }

            try
            {
                #region JOBFile
                try
                {
                    JOB.bLocalMode = cB_LocalMode.Checked;
                    JOB.bUpFly = cB_UpFly.Checked;
                    JOB.iLocalAlign = cb_LocalAlign.SelectedIndex + 1;
                }
                catch
                {
                    MessageBox.Show("JOB:数值填入错误", "提示");
                    return;
                }

                JobFile.IniWriteNumber("JOB", "IsLocalMode", JOB.bLocalMode == true ? 1 : 0);
                JobFile.IniWriteNumber("JOB", "IsUpFly", JOB.bUpFly == true ? 1 : 0);
                JobFile.IniWriteNumber("JOB", "LocalAlign", JOB.iLocalAlign);

                //2-点位
                try
                {
                    JOB.PasteCount = (short)(dGV_JOB_U.Rows.Count);
                    JOB.Cam_Mark1Point = new PointF[JOB.PasteCount];
                    JOB.Cam_Mark2Point = new PointF[JOB.PasteCount];
                    JOB.PasteName = new String[JOB.PasteCount];
                    JOB.OffsetX = new double[JOB.PasteCount];
                    JOB.OffsetY = new double[JOB.PasteCount];
                    JOB.OffsetR = new double[JOB.PasteCount];
                    JOB.UsedFeeder = new int[JOB.PasteCount];
                    JOB.UsedNz = new int[JOB.PasteCount];
                    JOB.FlyDelay = new double[JOB.PasteCount];

                    //JOB.PASTEInfo = new Variable.PASTAE[JOB.PasteCount];
                    for (int i = 0; i < JOB.PasteCount; i++)
                    {
                        JOB.PasteName[i] = dGV_JOB_U.Rows[i].Cells[0].Value.ToString();
                        //JOB.PASTEInfo[i] = ReadXls2Paste(JOB.PasteName[i], ref OKNG);
                        JOB.Cam_Mark1Point[i].X = float.Parse(dGV_JOB_U.Rows[i].Cells[1].Value.ToString());
                        JOB.Cam_Mark1Point[i].Y = float.Parse(dGV_JOB_U.Rows[i].Cells[2].Value.ToString());
                        JOB.Cam_Mark2Point[i].X = float.Parse(dGV_JOB_U.Rows[i].Cells[3].Value.ToString());
                        JOB.Cam_Mark2Point[i].Y = float.Parse(dGV_JOB_U.Rows[i].Cells[4].Value.ToString());
                        JOB.OffsetX[i] = double.Parse(dGV_JOB_U.Rows[i].Cells[5].Value.ToString());
                        JOB.OffsetY[i] = double.Parse(dGV_JOB_U.Rows[i].Cells[6].Value.ToString());
                        JOB.OffsetR[i] = double.Parse(dGV_JOB_U.Rows[i].Cells[7].Value.ToString());
                        JOB.UsedFeeder[i] = int.Parse(dGV_JOB_U.Rows[i].Cells[8].Value.ToString());
                        JOB.UsedNz[i] = int.Parse(dGV_JOB_U.Rows[i].Cells[9].Value.ToString());
                        JOB.FlyDelay[i] = double.Parse(dGV_JOB_U.Rows[i].Cells[10].Value.ToString());
                    }

                    JobFile.IniWriteNumber("JOB", "PASTECount", JOB.PasteCount);
                    for (int i = 0; i < JOB.PasteCount; i++)
                    {
                        JobFile.IniWriteValue("JOB", "PASTEName" + (i + 1).ToString(), JOB.PasteName[i]);
                        JobFile.IniWriteNumber("JOB", "CamMark1X" + (i + 1).ToString(), JOB.Cam_Mark1Point[i].X);
                        JobFile.IniWriteNumber("JOB", "CamMark1Y" + (i + 1).ToString(), JOB.Cam_Mark1Point[i].Y);
                        JobFile.IniWriteNumber("JOB", "CamMark2X" + (i + 1).ToString(), JOB.Cam_Mark2Point[i].X);
                        JobFile.IniWriteNumber("JOB", "CamMark2Y" + (i + 1).ToString(), JOB.Cam_Mark2Point[i].Y);
                        JobFile.IniWriteNumber("JOB", "OffsetX" + (i + 1).ToString(), JOB.OffsetX[i]);
                        JobFile.IniWriteNumber("JOB", "OffsetY" + (i + 1).ToString(), JOB.OffsetY[i]);
                        JobFile.IniWriteNumber("JOB", "OffsetR" + (i + 1).ToString(), JOB.OffsetR[i]);
                        JobFile.IniWriteNumber("JOB", "UsedFeeder" + (i + 1).ToString(), JOB.UsedFeeder[i]);
                        JobFile.IniWriteNumber("JOB", "UsedNz" + (i + 1).ToString(), JOB.UsedNz[i]);
                        JobFile.IniWriteNumber("JOB", $"FlyDelay{i + 1}", JOB.FlyDelay[i]);
                    }
                }
                catch
                {
                    MessageBox.Show("JOB:数值填入错误", "提示");
                    return;
                }
                #endregion
            }
            catch
            {
                rtn += 1;
                MessageBox.Show("Jobfile:保存失败", "提示");
            }
            if (rtn == 0)
            {
                bSaveProgram.BackColor = Color.GreenYellow;
            }
        }

        private void bCamLabel2Pos1_Click(object sender, EventArgs e)
        {
            if (dGV_FeederLeft.SelectedRows.Count > 0 && (dGV_FeederLeft.SelectedRows[0].Index != dGV_FeederLeft.RowCount - 1))
            {
                try
                {
                    PointF pt = new PointF();
                    pt.X = float.Parse(dGV_FeederLeft.SelectedRows[0].Cells[0].Value.ToString());
                    pt.Y = float.Parse(dGV_FeederLeft.SelectedRows[0].Cells[1].Value.ToString());
                    //pt = CamLabelToNozzlePoint(pt, ZAxisIndex - 1);
                    XYGoPos(pt, VariableSys.VelMode_Current_Manual);
                }
                catch
                {
                }
            }
        }

        private void bSet4_1_Click(object sender, EventArgs e)
        {
            this.tNZ1PosX.Text = this.XYPos.X.ToString("f3");
            this.tNZ1PosY.Text = this.XYPos.Y.ToString("f3");
        }

        private void bSet4_2_Click(object sender, EventArgs e)
        {
            this.tCamLabelPosX.Text = this.XYPos.X.ToString("f3");
            this.tCamLabelPosY.Text = this.XYPos.Y.ToString("f3");
        }

        private void bCalLabel2Nz_Click(object sender, EventArgs e)
        {
            PointF nz = new PointF();
            nz.X = float.Parse(this.tNZ1PosX.Text);
            nz.Y = float.Parse(this.tNZ1PosY.Text);

            PointF label = new PointF();
            label.X = float.Parse(this.tCamLabelPosX.Text);
            label.Y = float.Parse(this.tCamLabelPosY.Text);

            VariableSys.pNozzle_2_CamLabel.X = nz.X - label.X;
            VariableSys.pNozzle_2_CamLabel.Y = nz.Y - label.Y;
            this.tLabel2NZX.Text = VariableSys.pNozzle_2_CamLabel.X.ToString("f3");
            this.tLabel2NZY.Text = VariableSys.pNozzle_2_CamLabel.Y.ToString("f3");

            Ini_Sys.IniWriteNumber("VisionCalibration", "Nozzle_2_CamLabel_X", VariableSys.pNozzle_2_CamLabel.X);
            Ini_Sys.IniWriteNumber("VisionCalibration", "Nozzle_2_CamLabel_Y", VariableSys.pNozzle_2_CamLabel.Y);
        }

        private void bNZAutoHeight_Click(object sender, EventArgs e)
        {
            fmAdjustCamZ fm = new fmAdjustCamZ();
            fm.Show();
        }

        private void bOpenSetLocal_Click(object sender, EventArgs e)
        {
            if (this.cb_LocalAlign.SelectedIndex == 0)
            {
                fmLocalSet fm = new fmLocalSet(Variable.sPath_SYS_Program + "\\" + lProgramName.Text + "\\" + "JOBFILE\\Global.xml");

                fm.Show();
            }
        }

        private void bChangeXY_Click_1(object sender, EventArgs e)
        {
            if (dGV_Paste.SelectedRows.Count > 0 && (dGV_Paste.SelectedRows[0].Index != dGV_Paste.RowCount - 1))
            {
                for (int i_Temp = 0; i_Temp < dGV_Paste.SelectedRows.Count; i_Temp++)
                {
                    if (dGV_Paste.SelectedRows[i_Temp].Index != dGV_Paste.Rows.Count - 1)
                    {
                        double OffsetX = double.Parse(this.tOffsetX.Text);
                        double OffsetY = double.Parse(this.tOffsetY.Text);
                        double OffsetR = double.Parse(this.tOffsetR.Text);

                        double tempX = double.Parse(dGV_Paste.Rows[dGV_Paste.SelectedRows[i_Temp].Index].Cells[2].Value.ToString());
                        double tempY = double.Parse(dGV_Paste.Rows[dGV_Paste.SelectedRows[i_Temp].Index].Cells[3].Value.ToString());
                        double tempR = double.Parse(dGV_Paste.Rows[dGV_Paste.SelectedRows[i_Temp].Index].Cells[4].Value.ToString());

                        tempX += OffsetX;
                        tempY += OffsetY;
                        tempR += OffsetR;

                        dGV_Paste.Rows[dGV_Paste.SelectedRows[i_Temp].Index].Cells[2].Value = tempX.ToString("f3");
                        dGV_Paste.Rows[dGV_Paste.SelectedRows[i_Temp].Index].Cells[3].Value = tempY.ToString("f3");
                        dGV_Paste.Rows[dGV_Paste.SelectedRows[i_Temp].Index].Cells[4].Value = tempR.ToString("f3");
                    }
                }
            }
            bUpdateXY.BackColor = Color.MediumSpringGreen;
        }

        private PointF OffsetXY1 = new PointF();
        private PointF OffsetXY2 = new PointF();

        private PointF GetROIPoint()
        {
            if (imageSet.Roi.Count > 0)
            {
                if (imageSet.Roi[0].Shape.GetType() == typeof(RectangleContour))
                {
                    var rect = (RectangleContour)imageSet.Roi[0].Shape;
                    PointF cur = this.XYPos;
                    return Point2CCDCenter(cur, new PointContour(rect.Left, rect.Top), 0, 0);
                }
                else if (imageSet.Roi.Count == 2 && imageSet.Roi[0].Shape.GetType() == typeof(LineContour)
                    && imageSet.Roi[1].Shape.GetType() == typeof(LineContour))
                {
                    var p1 = Algorithms.FindIntersectionPoint((LineContour)imageSet.Roi[0].Shape, (LineContour)imageSet.Roi[1].Shape);
                    PointF cur = this.XYPos;
                    return Point2CCDCenter(cur, p1, 0, 0);
                }
                else
                {
                    MessageBox.Show("请正确画取ROI");
                }
            }
            else
            {
                MessageBox.Show("请正确画取ROI");
            }

            return new PointF();
        }

        private void bSetCurPaste_Click(object sender, EventArgs e)
        {
            OffsetXY1 = this.GetROIPoint();
        }

        private void bSetDistPaste_Click(object sender, EventArgs e)
        {
            OffsetXY2 = this.GetROIPoint();
        }

        //todo 贴附测试
        private void tPasteTest_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(this.cbLabel.Text)) return;

            PointF pastePt = this.XYPos;
            PointF upPt = pastePt;

            double angle = (double)this.numPasteAngle.Value;
            bool readOK = false;
            string direct = $"{Variable.sPath_SYS_LABEL}\\{this.cbLabel.Text}";
            Variable.PASTAE label = this.ReadXls2Label(direct, ref readOK);

            if (!readOK) return;
            // 去拍照
            int selectNz = this.cB_NozzleIndex2.SelectedIndex;
            var cam = Nozzle2Cam(selectNz);
            CameraDefine.Instance[cam.Item1]._Session.Acquisition.Unconfigure();
            this.SetShutter((int)label.Shutter1, cam.Item1);

            bool rtn = this.All_ZGoSafeTillStop(3000, VariableSys.VelMode_Current_Manual);
            if (!rtn) return;
            this.R_RunParamMap[(uint)selectNz].GoPosTillStop(3000, 0, VariableSys.VelMode_Current_Manual);
            short result = this.XYGoPosTillStop(3000, VariableSys.pReadyPoint, VariableSys.VelMode_Current_Manual);
            if (result != 0) return;

            result = this.Turn.GoPosTillStop(3000, VariableSys.dTurnPasteAngle, VariableSys.VelMode_Current_Manual);
            if (result != 0) return;

            CameraDefine.Instance[cam.Item1]._Session.Snap(imageSet.Image);
            var camresult = this.Auto_Detect1(ref label, imageSet.Image, cam.Item1, selectNz);
            if (camresult.IsOK)
            {
                PointContour rotated = this.PtRotateDown(new PointContour(camresult.X, camresult.Y), VariableSys.pDownRotateCenter[selectNz], camresult.Angle + angle);

                PointF labelPt = Point2CCDCenter(VariableSys.pDownRotateCam[selectNz], rotated, cam.Item1, cam.Item2);
                this.downMark = labelPt;

                PointF centerPt = VariableSys.pReadyPoint;

                PointF offset = new PointF();
                offset.X = labelPt.X - centerPt.X;
                offset.Y = labelPt.Y - centerPt.Y;

                // 得到玻璃板坐标
                pastePt = GlassHelper.MachinePoint2ActPoint(pastePt);

                pastePt.X = pastePt.X + offset.X + VariableSys.pNozzle_2_Cam[selectNz].X;
                pastePt.Y = pastePt.Y + offset.Y + VariableSys.pNozzle_2_Cam[selectNz].Y;

                if (!this.cbAutoCalib.Checked)
                {
                    pastePt = GlassHelper.ActPoint2MachinePoint(pastePt);
                    pastePt = this.GetPasteOfffset((uint)selectNz, upPt, pastePt);
                }

                this.pasteMark = pastePt;

                if (pastePt.X < VariableSys.dXSafeMaxX && pastePt.X > VariableSys.dXSafeMinX)
                {
                    this.XYGoPosTillStop(30000, pastePt, VariableSys.VelMode_Current_Manual);
                    this.R_RunParamMap[(uint)selectNz].GoPos(camresult.Angle + angle, VariableSys.VelMode_Current_Manual);
                    Thread.Sleep(2000);
                    this.Z_RunParamMap[(uint)selectNz].GoPosTillStop(30000, this.Z_RunParamMap[(uint)selectNz].PasteHeight, VariableSys.VelMode_Current_Manual);
                    this.Z_RunParamMap[(uint)selectNz].XI_vaccum.ResetIO();
                    Thread.Sleep(100);
                    this.Z_RunParamMap[(uint)selectNz].PO_vaccum.SetIO();
                    Thread.Sleep(1000);
                    this.Z_RunParamMap[(uint)selectNz].PO_vaccum.ResetIO();
                    this.All_ZGoSafeTillStop(30000, VariableSys.VelMode_Current_Manual);
                    this.XYGoPosTillStop(30000, upPt, VariableSys.VelMode_Current_Manual);
                    Debug.WriteLine(upPt.Y);
                }
                else
                {
                    MessageBox.Show("不在安全区域内!!!");
                    return;
                }
            }
        }

        private void bRefreshLabelList_Click(object sender, EventArgs e)
        {
            this.cbLabel.Items.Clear();
            string direct = $"{Variable.sPath_SYS_LABEL}\\";
            DirectoryInfo info = new DirectoryInfo(direct);
            foreach (DirectoryInfo dir in info.GetDirectories())
            {
                this.cbLabel.Items.Add(dir.Name);
            }
        }

        private void bGetAngle_Click(object sender, EventArgs e)
        {
            try
            {
                for (int i = 0; i < imageSet.Roi.Count; ++i)
                {
                    if (imageSet.Roi[i].Shape.GetType() == typeof(LineContour))
                    {
                        var line = (LineContour)imageSet.Roi[i].Shape;
                        double angle = this.getAngle(line.Start.X, line.Start.Y, line.End.X, line.End.Y);
                        if (Math.Abs(angle) > 45)
                        {
                            throw new Exception();
                        }

                        this.baseAngle.Value = (decimal)angle;
                        return;
                    }
                }

                throw new Exception();
            }
            catch
            {
                MessageBox.Show("未在视觉框中侦测到有效直线!!!");
            }
        }

        private void lShowMark_Click(object sender, EventArgs e)
        {
            try
            {
                this.SelectLabel[this.CurShowIndex].BackColor = Color.LightGray;
                this.CurShowIndex = int.Parse((sender as Label).Tag.ToString());
                (sender as Label).BackColor = Color.Orange;

                if (this.CurShowIndex > 0)
                {
                    var zparam = Z_RunParamMap[(uint)(this.CurShowIndex - 1)];
                    this.ShowVisionStatus(this.CurShowIndex, zparam.CamResult, zparam.CaptureImage);
                }
            }
            catch { }
        }

        private void bLoadCell_Click(object sender, EventArgs e)
        {
            frmPressEdit frm = new frmPressEdit();
            frm.Show();
        }

        private void cbVision_CheckedChanged(object sender, EventArgs e)
        {
        }

        private void bRecordThrowHeight_Click(object sender, EventArgs e)
        {
            int selectR = this.cbxSelectR.SelectedIndex;
            Z_RunParam zParam = this.Z_RunParamMap[(uint)selectR];
            tThrowHeight.Text = zParam.Pos.ToString();
            zParam.ThrowHeight = zParam.Pos;
        }

        private void bReportClear_Click(object sender, EventArgs e)
        {
            StatisticsHelper.Instance.Reoprt = new DayReprot();
            StatisticsHelper.Instance.Refresh();
        }

        private void bXYByCam_Click(object sender, EventArgs e)
        {
            if (dGV_FeederLeft.SelectedRows.Count > 0 && (dGV_FeederLeft.SelectedRows[0].Index != dGV_FeederLeft.RowCount - 1))
            {
                for (int i_Temp = 0; i_Temp < dGV_FeederLeft.SelectedRows.Count; i_Temp++)
                {
                    if (dGV_FeederLeft.SelectedRows[i_Temp].Index != dGV_FeederLeft.Rows.Count - 1)
                    {
                        PointF camPos = this.XYPos;

                        // 相机位转位吸嘴1的位置

                        PointF nz1 = this.CamLabelToNozzlePoint(camPos, ZAxisIndex - 1);
                        dGV_FeederLeft.Rows[dGV_FeederLeft.SelectedRows[i_Temp].Index].Cells[0].Value = (nz1.X).ToString("f2");
                        dGV_FeederLeft.Rows[dGV_FeederLeft.SelectedRows[i_Temp].Index].Cells[1].Value = (nz1.Y).ToString("f2");
                    }
                }
            }
            bXY1_N1.BackColor = Color.MediumSpringGreen;
        }

        private void bGoCamXY_Click(object sender, EventArgs e)
        {
            if (dGV_FeederLeft.SelectedRows.Count > 0 && (dGV_FeederLeft.SelectedRows[0].Index != dGV_FeederLeft.RowCount - 1))
            {
                try
                {
                    PointF pt = new PointF();
                    pt.X = float.Parse(dGV_FeederLeft.SelectedRows[0].Cells[0].Value.ToString());
                    pt.Y = float.Parse(dGV_FeederLeft.SelectedRows[0].Cells[1].Value.ToString());

                    pt = this.GetNewXIPos((uint)ZAxisIndex - 1, dGV_FeederLeft.SelectedRows[0].Index, ref Feeder[this.cbSelectFeeder.SelectedIndex], VariableSys.bEnableAsyncXI);
                    PointF cam = this.NozzleToCamLabelPoint(pt, (ZAxisIndex - 1));
                    XYGoPos(cam, VariableSys.VelMode_Current_Manual);
                }
                catch { }
            }
        }

        private void bFindShape_Click(object sender, EventArgs e)
        {
            try
            {
                frm_AddModel frm = new frm_AddModel();
                frm.XOffset = short.Parse(dGV_Mark.Rows[0].Cells[10].Value.ToString());
                frm.YOffset = short.Parse(dGV_Mark.Rows[0].Cells[11].Value.ToString());

                if (frm.ShowDialog() == DialogResult.Yes)
                {
                    PasteInfo.Model1ID = HalconHelper.LoadModel("D://");
                    dGV_Mark.Rows[0].Cells[10].Value = frm.XOffset.ToString();
                    dGV_Mark.Rows[0].Cells[11].Value = frm.YOffset.ToString();
                }
            }
            catch { }
        }

        private void bAreaDetect_Click(object sender, EventArgs e)
        {
            try
            {
                #region Area侦测1
                if (Mark_Index == 0)
                {
                    bool bIsWhite = true;
                    PasteInfo.bAreaEN1 = cB_LabelArea.Checked;
                    PasteInfo.iAreaMin1 = int.Parse(tMinArea.Text);
                    PasteInfo.iAreaMax1 = int.Parse(tMaxArea.Text);
                    if (rB_WhiteBig.Checked)
                    {
                        bIsWhite = true;
                        PasteInfo.iAreaOKStyle1 = 1;
                    }
                    if (rB_BlackBig.Checked)
                    {
                        bIsWhite = false;
                        PasteInfo.iAreaOKStyle1 = 2;
                    }

                    if (PasteInfo.bAreaEN1)
                    {
                        int areaCount = AreaCount(imageSet.Image, imageSet.Roi, bIsWhite);
                        tAreaDetect.Text = areaCount.ToString();
                        if (areaCount > PasteInfo.iAreaMin1 && areaCount < PasteInfo.iAreaMax1)
                        {
                            MessageBox.Show("面积侦测OK", "提示");
                        }
                        else
                        {
                            MessageBox.Show("面积侦测Fail", "提示");
                        }
                    }

                }
                #endregion

                #region Area侦测2
                if (Mark_Index == 1)
                {
                    bool bIsWhite = true;
                    PasteInfo.bAreaEN2 = cB_LabelArea.Checked;
                    PasteInfo.iAreaMin2 = int.Parse(tMinArea.Text);
                    PasteInfo.iAreaMax2 = int.Parse(tMaxArea.Text);
                    if (rB_WhiteBig.Checked)
                    {
                        bIsWhite = true;
                        PasteInfo.iAreaOKStyle2 = 1;
                    }
                    if (rB_BlackBig.Checked)
                    {
                        bIsWhite = false;
                        PasteInfo.iAreaOKStyle2 = 2;
                    }

                    if (PasteInfo.bAreaEN2)
                    {
                        int areaCount = AreaCount(imageSet.Image, imageSet.Roi, bIsWhite);
                        tAreaDetect.Text = areaCount.ToString();

                        if (areaCount > PasteInfo.iAreaMin2 && areaCount < PasteInfo.iAreaMax2)
                        {
                            MessageBox.Show("面积侦测OK", "提示");
                        }
                        else
                        {
                            MessageBox.Show("面积侦测Fail", "提示");
                        }
                    }
                }
            }
            catch
            {
                MessageBox.Show("面积算法数值请正确填写或者图像无ROI框", "提示");
            }
            #endregion

            if (Mark_Index == 0)
            {
                dGV_Mark.Rows[Mark_Index].Cells[159].Value = PasteInfo.bAreaEN1 == true ? "1" : "0";
                dGV_Mark.Rows[Mark_Index].Cells[160].Value = PasteInfo.iAreaMin1.ToString();
                dGV_Mark.Rows[Mark_Index].Cells[161].Value = PasteInfo.iAreaMax1.ToString();
                dGV_Mark.Rows[Mark_Index].Cells[162].Value = PasteInfo.iAreaOKStyle1.ToString();
            }
            else if (Mark_Index == 1)
            {
                dGV_Mark.Rows[Mark_Index].Cells[159].Value = PasteInfo.bAreaEN2 == true ? "1" : "0";
                dGV_Mark.Rows[Mark_Index].Cells[160].Value = PasteInfo.iAreaMin2.ToString();
                dGV_Mark.Rows[Mark_Index].Cells[161].Value = PasteInfo.iAreaMax2.ToString();
                dGV_Mark.Rows[Mark_Index].Cells[162].Value = PasteInfo.iAreaOKStyle2.ToString();
            }
        }

        private void bNzOpzimte_Click(object sender, EventArgs e)
        {
            frm_AutoOpimzitePaste frm = new frm_AutoOpimzitePaste(this.dGV_Paste);
            frm.ShowDialog();
        }

        private void bMFlexMES_Click(object sender, EventArgs e)
        {
            MFlexMesControl frm = new MFlexMesControl();
            frm.Show();
        }

        private void bGoCamPos_Click(object sender, EventArgs e)
        {
            if (this.All_ZReachOrg())
            {
                this.XYGoPos(VariableSys.pDownRotateCam[0], VariableSys.VelMode_Current_Manual);
            }
        }

        private void cbCheckXIPos_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void bAutoSuck_Click(object sender, EventArgs e)
        {
            new fmCheckXI(this.dGV_FeederLeft, this.cbSelectFeeder.SelectedIndex, this).Show();
        }

        private void bRefreshVisionList_Click(object sender, EventArgs e)
        {
            this.cbVisionList.Items.Clear();
            string direct = $"{Variable.sPath_SYS_LABEL}\\";
            DirectoryInfo info = new DirectoryInfo(direct);
            foreach (DirectoryInfo dir in info.GetDirectories())
            {
                this.cbVisionList.Items.Add(dir.Name);
            }
        }

        private PointF standardPos = new PointF();
        private void bDetectNz1_Click(object sender, EventArgs e)
        {
            standardPos = this.DetectNzCenterOffset(0);
            this.tStandardX.Text = standardPos.X.ToString("f3");
            this.tStandardY.Text = standardPos.Y.ToString("f3");
        }
        private PointF nzOffsetPos = new PointF();
        private PointF DetectNzCenterOffset(int nz)
        {
            if (string.IsNullOrEmpty(this.cbVisionList.Text)) return new PointF(0, 0);
            bool readOK = false;
            string direct = $"{Variable.sPath_SYS_LABEL}\\{this.cbVisionList.Text}";
            Variable.PASTAE label = this.ReadXls2Label(direct, ref readOK);
            if (!readOK) return new PointF(0, 0);

            this.LightON_Down_PASTE1(ref label);
            var camera = Nozzle2Cam(nz);
            this.SetShutter((int)label.Shutter1, camera.Item1);

            this.All_ZGoSafeTillStop(3000, VariableSys.VelMode_Current_Manual);
            this.XYGoPosTillStop(5000, Form_Main.VariableSys.pReadyPoint, VariableSys.VelMode_Current_Manual);
            this.Turn.GoPosTillStop(5000, Form_Main.VariableSys.dTurnPasteAngle, VariableSys.VelMode_Current_Manual);

            PointF curPos = VariableSys.pReadyPoint;
            Thread.Sleep(1000);
            CameraDefine.Instance[camera.Item1]._Session.Snap(imageSet.Image);

            Variable.CamReturn cam = Auto_Detect1(ref label, imageSet.Image, camera.Item1, nz);
            if (cam.IsOK)
            {
                var rotatePt = Point2CCDCenter(curPos, VariableSys.pDownRotateCenter[nz], camera.Item1, camera.Item2);
                PointF result = Point2CCDCenter(curPos, new PointContour(cam.X, cam.Y), camera.Item1, camera.Item2);
                return new PointF(result.X - rotatePt.X, result.Y - rotatePt.Y);
            }
            else
                return new PointF();
        }

        private void bDetectOtherNz_Click(object sender, EventArgs e)
        {
            if (this.cbNzStep4.SelectedIndex < 0) return;
            this.nzOffsetPos = this.DetectNzCenterOffset(this.cbNzStep4.SelectedIndex);
            this.tNzCenterOffsetX.Text = nzOffsetPos.X.ToString("f3");
            this.tNzCenterOffsetY.Text = nzOffsetPos.Y.ToString("f3");
        }

        private void bChangeNzOffset_Click(object sender, EventArgs e)
        {
            if (this.cbNzStep4.SelectedIndex == 0) return;
            if (MessageBox.Show("是否需要补偿取料位置? Y/N", "警告", MessageBoxButtons.YesNo) == DialogResult.Yes)
            {
                NozzleCenterOffset[this.cbNzStep4.SelectedIndex].X -= (this.nzOffsetPos.X - this.standardPos.X);
                NozzleCenterOffset[this.cbNzStep4.SelectedIndex].Y += (this.nzOffsetPos.Y - this.standardPos.Y);
                this.SaveNozzleOffsetConfig();
            }
        }

        //todo 到吸嘴孔位按钮
        private void button4_Click_1(object sender, EventArgs e)
        {
            //if (this.cbNzStep4.SelectedIndex < 0) return;
            //this.XYGoPos(NozzleCenterOffset[this.cbNzStep4.SelectedIndex], VariableSys.VelMode_Current_Manual);
            if (this.cbNzStep1.SelectedIndex < 0) return;
            this.XYGoPos(NozzleCenterOffset[this.cbNzStep1.SelectedIndex], VariableSys.VelMode_Current_Manual);
        }

        private void button10_Click(object sender, EventArgs e)
        {

        }

        private void bMoveUpCenter_Click(object sender, EventArgs e)
        {
            if (this.cB_NozzleIndex2.SelectedIndex < 0) return;
            this.XYGoPos(VariableSys.pUpMarkCoord[this.cB_NozzleIndex2.SelectedIndex], VariableSys.VelMode_Current_Manual);
        }

        private PointF upMark = new PointF();
        private PointF downMark = new PointF();
        private PointF pasteMark = new PointF();

        private void bSetRealPaste_Click(object sender, EventArgs e)
        {
            upMark = this.XYPos;
        }

        private void bAutoCalib_Click(object sender, EventArgs e)
        {
            VariableSys.pPasteCoord[this.cB_NozzleIndex2.SelectedIndex] = this.pasteMark;
            VariableSys.pUpMarkCoord[this.cB_NozzleIndex2.SelectedIndex] = this.upMark;
            VariableSys.pDownMarkCoord[this.cB_NozzleIndex2.SelectedIndex] = this.downMark;
            this.bCalCenter_Click(this, new EventArgs());
        }

        private void cbAutoCalib_CheckedChanged(object sender, EventArgs e)
        {
            this.groupBox31.Enabled = this.cbAutoCalib.Checked;
        }

        private PointF cliabStart = new PointF();
        private PointF cliabEnd = new PointF();

        private void bSetCliabStart_Click(object sender, EventArgs e)
        {
            this.cliabStart = this.XYPos;
        }

        private void bSetCalibEnd_Click(object sender, EventArgs e)
        {
            this.cliabEnd = this.XYPos;
        }

        public static Tuple<CAM, int> GetCalib(int index)
        {
            CAM cam = CAM.Top;
            int calib = 0;
            if (index >= 1 && index <= 4)
            {
                calib = (index - 1) % 2;
                cam = (CAM)((index + 1) / 2);
            }
            else if (index > 4)
                cam = CAM.Label;
            return new Tuple<CAM, int>(cam, calib);
        }

        private void bAutoStart_Click(object sender, EventArgs e)
        {
            if (cbxSelectCam.SelectedIndex < 0) return;

            int row = (int)this.numRow.Value;
            int col = (int)this.numCol.Value;
            float dx = (this.cliabEnd.X - this.cliabStart.X) / (col - 1);
            float dy = (this.cliabEnd.Y - this.cliabStart.Y) / (row - 1);
            Tuple<CAM, int> cam = GetCalib(this.cbxSelectCam.SelectedIndex);
            PixelCoordPoints = new Collection<PointContour>();
            WorldCoordPoints = new Collection<PointContour>();
            
            #region 自动寻找
            for (int rowIndex = 0; rowIndex < row; rowIndex++)
            {
                for (int colIndex = 0; colIndex < col; colIndex++)
                {
                    PointF wrold = new PointF();
                    wrold.X = this.cliabStart.X + colIndex * dx;
                    wrold.Y = this.cliabStart.Y + rowIndex * dy;

                    this.XYGoPosTillStop(3000, wrold, VariableSys.VelMode_Current_Manual);
                    Thread.Sleep(200);

                    CameraDefine.Instance[cam.Item1]._Session.Snap(imageSet.Image);
                    //计算Mark1点在图像中的坐标
                    short rtn = CamDetect_PatternMatch(imageSet.Image, VariableSys.imageCali_Template, (float)480, 1, 0f, 0f, imageSet.Roi, ref CamReturnInfo, 0, 0);
                    if (rtn != 0)
                    {
                        if (VariableSys.LanguageFlag == 1)
                        {
                            MessageBox.Show("Detect Fail!", "Info");
                        }
                        else
                        {
                            MessageBox.Show("特征获取失败!", "提示");
                        }
                        return;
                    }

                    Application.DoEvents();
                    Thread.Sleep(200);
                    PixelCoordPoints.Add(new PointContour(CamReturnInfo.X, CamReturnInfo.Y));
                    WorldCoordPoints.Add(new PointContour(wrold.X, wrold.Y));
                }
            }
            #endregion

            #region 寻找成功标定
            double source = 0;
            try
            {
                source = Algorithms.LearnCalibrationPoints(imageSet.Image, PixelCoordPoints, WorldCoordPoints); //四点校验函数
            }
            catch
            {
                MessageBox.Show("相机校验失败！", "提示");
                return;
            }
            if (source < 999)
            {
                MessageBox.Show("相机校验失败！", "提示");
                return;
            }
            else
            {
                string direct = string.Format(Variable.sPath_CaliPath, (int)cam.Item1, cam.Item2);
                if (!Directory.Exists(direct))
                {
                    Directory.CreateDirectory(direct);
                }

                try
                {
                    imageSet.Image.WriteVisionFile(direct + Variable.sPath_CaliImage);
                    CameraDefine.Instance[cam.Item1].LoadCalibImage(cam.Item1);
                }
                catch
                {
                    MessageBox.Show("相机校验失败！", "提示");
                    return;
                }
                MessageBox.Show("相机校验成功！", "提示");
            }
            #endregion
        }

        private void bRecordRegion_Click(object sender, EventArgs e)
        {
            if (dGV_Paste.SelectedRows.Count > 0 && (dGV_Paste.SelectedRows[0].Index != dGV_Paste.RowCount - 1))
            {
                for (int i_Temp = 0; i_Temp < dGV_Paste.SelectedRows.Count; i_Temp++)
                {
                    if (dGV_Paste.SelectedRows[i_Temp].Index != dGV_Paste.Rows.Count - 1)
                    {
                        dGV_Paste.Rows[dGV_Paste.SelectedRows[i_Temp].Index].Cells[14 + Variable.NOZZLE_NUM].Value = this.tRegion.Text;
                    }
                }
            }
        }

        private void cbRegionPaste_CheckedChanged(object sender, EventArgs e)
        {
            if (dGV_Paste.SelectedRows.Count > 0 && (dGV_Paste.SelectedRows[0].Index != dGV_Paste.RowCount - 1))
            {
                string reigon = dGV_Paste.Rows[dGV_Paste.SelectedRows[0].Index].Cells[14 + Variable.NOZZLE_NUM].Value.ToString();

                for (int i_Temp = 0; i_Temp < dGV_Paste.Rows.Count - 1; i_Temp++)
                {
                    string temp = dGV_Paste.Rows[i_Temp].Cells[14 + Variable.NOZZLE_NUM].Value.ToString();
                    if (temp == reigon)
                    {
                        dGV_Paste.Rows[i_Temp].Cells[1].Value = this.cbRegionPaste.Checked ? "1":"0";
                    }
                }
            }
        }

        private void dGV_Paste_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }
         //todo 点位计算器
        private void button5_Click_1(object sender, EventArgs e)
        {
            this.tBA_X.Text = (Double.Parse(this.tTest2X.Text) - Double.Parse(this.tTest1X.Text)).ToString();
            this.tBA_Y.Text = (Double.Parse(this.tTest2Y.Text) - Double.Parse(this.tTest1Y.Text)).ToString();

            this.tDC_X.Text = (Double.Parse(this.tTest4X.Text) - Double.Parse(this.tTest3X.Text)).ToString();
            this.tDC_Y.Text = (Double.Parse(this.tTest4Y.Text) - Double.Parse(this.tTest3Y.Text)).ToString();
        }

        private void groupBox61_Enter(object sender, EventArgs e)
        {

        }

        private void bNzMannualOffset_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("是否需要保存手动取料位置偏移值? Y/N", "警告", MessageBoxButtons.YesNo) == DialogResult.Yes)
            {
                NozzleManualOffset[this.cbNzStep5.SelectedIndex].X += float.Parse(this.tNzMannualOffsetX.Text);
                NozzleManualOffset[this.cbNzStep5.SelectedIndex].Y += float.Parse(this.tNzMannualOffsetY.Text);
                this.SaveNozzleManualOffsetConfig();
                this.tNzMannualOffsetX.Text = "0";
                this.tNzMannualOffsetY.Text = "0";
                this.bNzMannualOffset.BackColor = Color.GreenYellow;
            }
        }

        private void cbNzStep5_SelectedIndexChanged(object sender, EventArgs e)
        {
            this.bNzMannualOffset.BackColor = Color.Yellow;
        }

        private void BSericeMonitor_Click(object sender, EventArgs e)
        {
            fmServiceManager fm = new fmServiceManager();
            fm.Show();
        }

        private void bMoveRotateCamXY_Click(object sender, EventArgs e)
        {
            try
            {
                PointF xy = new PointF();
                xy.X = float.Parse(this.tRotateCamX.Text);
                xy.Y = float.Parse(this.tRotateCamY.Text);
                XYGoPos(xy, VariableSys.VelMode_Current_Manual);
            }
            catch { }
        }

        private void bMoveFlyCam_Click(object sender, EventArgs e)
        {
            try
            {
                PointF xy = new PointF();
                xy.X = float.Parse(this.tFlyCamX.Text);
                xy.Y = float.Parse(this.tFlyCamX.Text);
                XYGoPos(xy, VariableSys.VelMode_Current_Manual);
            }
            catch { }
        }

        private void bCalFlyOffset_Click(object sender, EventArgs e)
        {
            //1 首先判断所有拍照位是否一致
            PointF temp = VariableSys.pDownRotateCam[0];
            for (int i = 1; i < Variable.NOZZLE_NUM; ++i)
            {
                if (!temp.Equals(VariableSys.pDownRotateCam[i]))
                {
                    MessageBox.Show("各个吸嘴的拍照位置不一致,不能飞拍!!");
                    return;
                }
            }
        }

        private void bLeanFlyTemp_Click(object sender, EventArgs e)
        {
            Extract_LearnPttern(imageSet.Image, imageFly.Image);
        }

        private void bSetNzRoi_Click(object sender, EventArgs e)
        {
            if (imageSet.Roi.Count > 0 && imageSet.Roi[0].Shape.GetType() == typeof(RectangleContour))
            {
                var rect = VariableSys.rDownROI[this.cB_NozzleIndex3.SelectedIndex] = (RectangleContour)imageSet.Roi[0].Shape;
                Ini_Sys.IniWriteCamResolution("VisionCalibration", $"Nozzle{this.cB_NozzleIndex3.SelectedIndex + 1}_ROI", rect);
            }
        }

        private void bShowNzRoi_Click(object sender, EventArgs e)
        {
            imageSet.Roi.Clear();
            imageSet.Roi.Add(VariableSys.rDownROI[this.cB_NozzleIndex3.SelectedIndex]);
        }

        private void cbSelectFeeder_SelectedIndexChanged(object sender, EventArgs e)
        {
            this.ShowFeeder(this.cbSelectFeeder.SelectedIndex);
        }

        private void bOperVaccum_Click(object sender, EventArgs e)
        {
            if (this.bOperVaccum.Text == "开真空")
            {
                this.bOperVaccum.Text = "关真空";
                this.Z_RunParamMap[(uint)ZAxisIndex - 1].XI_vaccum.SetIO();
            }
            else
            {
                this.bOperVaccum.Text = "开真空";
                this.Z_RunParamMap[(uint)ZAxisIndex - 1].XI_vaccum.ResetIO();
            }
        }

        private void bRGoHome_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("是否R轴 回原点", "提示", MessageBoxButtons.YesNo) == DialogResult.Yes)
            {
                Task.Factory.StartNew(() =>
                {
                    this.R_RunParamMap[(uint)RAxisIndex - 1].CleSts(true);
                    this.R_RunParamMap[(uint)RAxisIndex - 1].StopAxis();
                    short rtn = this.R_RunParamMap[(uint)RAxisIndex - 1].GoHome(Axis_Advantech.HomeMode.MODE7_AbsSearch, new Variable.VelMode(0, 20, 50, 50), true);
                    Thread.Sleep(100);
                    while (this.R_RunParamMap[(uint)RAxisIndex - 1].bAxisIsHoming)
                    {
                        Thread.Sleep(1);
                    }
                    Thread.Sleep(100);

                    this.R_RunParamMap[(uint)RAxisIndex - 1].ZeroAxis();
                });
            }
        }

        private void bSetMachineOrg_Click(object sender, EventArgs e)
        {
            fmSetMachineOrg fm = new fmSetMachineOrg();
            fm.Show();
        }

        private void groupBox42_Enter(object sender, EventArgs e)
        {

        }

        private void bGlassCalib_Click(object sender, EventArgs e)
        {
            fmAutoCPKTest fm = new fmAutoCPKTest();
            fm.Show();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            fm_Statstics statstics = new fm_Statstics();
            statstics.Show();
        }
        //todo 上视觉校正按钮
        private void bUpVisionCheck_Click(object sender, EventArgs e)
        {
            frmPasteReCheck fm = new frmPasteReCheck();
            if (fm.CanShow)
            {
                fm.ShowDialog();
            }
        }

        private void button4_Click(object sender, EventArgs e)
        {
            fmZDT_Tool fm = new fmZDT_Tool();
            fm.Show();
        }

        private void button5_Click(object sender, EventArgs e)
        {
            fmBJZS_Tool fm = new fmBJZS_Tool();
            fm.Show();
        }

        private void cbLineOffset_CheckedChanged(object sender, EventArgs e)
        {
            if (Variable.PassWordOK > 1)
            {
                fm_Hardware frm = new fm_Hardware();
                frm.Show();
            }
        }

        private void button6_Click(object sender, EventArgs e)
        {
            ReadCodeBeanCtrl beanCtrl = new ReadCodeBeanCtrl();
            beanCtrl.Show();
        }

        private void bCalXYOffset_Click(object sender, EventArgs e)
        {
            this.tOffsetX.Text = (OffsetXY2.X - OffsetXY1.X).ToString("f3");
            this.tOffsetY.Text = (OffsetXY2.Y - OffsetXY1.Y).ToString("f3");
        }

        private void bCalAngle_Click(object sender, EventArgs e)
        {
            if (imageSet.Roi.Count == 2 && imageSet.Roi[0].Shape.GetType() == typeof(LineContour)
                    && imageSet.Roi[1].Shape.GetType() == typeof(LineContour))
            {
                var line1 = (LineContour)imageSet.Roi[0].Shape;
                var line2 = (LineContour)imageSet.Roi[1].Shape;
                this.tOffsetR.Text = (this.getAngle(line2.Start.X, line2.Start.Y, line2.End.X, line2.End.Y) - this.getAngle(line1.Start.X, line1.Start.Y, line1.End.X, line1.End.Y)).ToString();
            }
            else
            {
                MessageBox.Show("请正确画取ROI");
            }
        }

        private void bUpdateVisionInfo_Click(object sender, EventArgs e)
        {
            //if (Directory.Exists(Variable.sPath_SYS_Program + "\\" + lProgramName.Text + "\\PASTE"))
            //{
            //    DirectoryInfo a = new DirectoryInfo(Variable.sPath_SYS_Program + "\\" + lProgramName.Text + "\\PASTE");
            //    a.Delete(true);
            //}
            bool OKNG = false;
            bool bFound = false;
            JOB.PASTEInfo_List = new List<Variable.PASTAE>();
            JOB.PASTEInfo_List.Clear();

            try
            {
                for (int i = 0; i < RUN_PASTEInfo.Length; i++)
                {
                    RUN_PASTEInfo[i].Align1?.Dispose();
                    RUN_PASTEInfo[i].Align2?.Dispose();
                }

                JOB.PasteName = new string[dGV_JOB_U.Rows.Count];
                for (int i = 0; i < dGV_JOB_U.Rows.Count; i++)
                {
                    JOB.PasteName[i] = dGV_JOB_U.Rows[i].Cells[0].Value.ToString();
                    iTemp0 = JOB.PASTEInfo_List.Count;
                    if (iTemp0 == 0)
                    {
                        JOB.PASTEInfo_List.Add(ReadXls2Paste(Variable.sPath_SYS_Program + "\\" + lProgramName.Text + "\\PASTE" + "\\" + JOB.PasteName[i], ref OKNG));
                        //JOB.PASTEInfo_List.Add(ReadXls2Paste(Variable.sPath_SYS_PASTE + "\\" + JOB.PasteName[i], ref OKNG));
                        //CopyDirectory(Variable.sPath_SYS_PASTE + "\\" + JOB.PasteName[i], Variable.sPath_SYS_Program + "\\" + lProgramName.Text + "\\PASTE" + "\\" + JOB.PasteName[i]);
                    }
                    else
                    {
                        bFound = false;
                        for (int j = 0; j < JOB.PASTEInfo_List.Count; j++)
                        {
                            if (JOB.PASTEInfo_List[j].PasteName == JOB.PasteName[i])
                            {
                                bFound = true;
                                break;
                            }
                        }
                        if (!bFound)
                        {
                            JOB.PASTEInfo_List.Add(ReadXls2Paste(Variable.sPath_SYS_Program + "\\" + lProgramName.Text + "\\PASTE" + "\\" + JOB.PasteName[i], ref OKNG));
                            //JOB.PASTEInfo_List.Add(ReadXls2Paste(Variable.sPath_SYS_PASTE + "\\" + JOB.PasteName[i], ref OKNG));
                            //CopyDirectory(Variable.sPath_SYS_PASTE + "\\" + JOB.PasteName[i], Variable.sPath_SYS_Program + "\\" + lProgramName.Text + "\\PASTE" + "\\" + JOB.PasteName[i]);
                            if (!OKNG)
                            {
                                MessageBox.Show("", "");
                                return;
                            }
                        }
                    }

                }
                RUN_PASTEInfo = JOB.PASTEInfo_List.ToArray();
                bUpdateVisionInfo.BackColor = Color.GreenYellow;
                this.dGV_JOB_U_SelectionChanged(this, new EventArgs());
            }
            catch
            {
                MessageBox.Show("请重新指定贴附信息", "提示");
            }
        }

        private void bUpdateVisionInfo_MouseDown(object sender, MouseEventArgs e)
        {
            bUpdateVisionInfo.BackColor = Color.Transparent;
        }

        private void bSaveProgram_MouseDown(object sender, MouseEventArgs e)
        {
            bSaveProgram.BackColor = Color.Transparent;
        }

        private void bFlowInOut_Click(object sender, EventArgs e)
        {
            VariableSys.dFlowIN_OUT += 1;
            if (VariableSys.dFlowIN_OUT > 6)
            {
                VariableSys.dFlowIN_OUT = 1;
            }
            if (VariableSys.dFlowIN_OUT == 1)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bFlowInOut.Text = "L-in-R-out（2）";
                }
                else
                {
                    bFlowInOut.Text = "左进右出（两段式）";
                }

            }
            if (VariableSys.dFlowIN_OUT == 2)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bFlowInOut.Text = "R-in-L-out（2）";
                }
                else
                {
                    bFlowInOut.Text = "右进左出（两段式）";
                }

            }
            if (VariableSys.dFlowIN_OUT == 3)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bFlowInOut.Text = "L-in-L-out（2）";
                }
                else
                {
                    bFlowInOut.Text = "左进左出（两段式）";
                }

            }
            if (VariableSys.dFlowIN_OUT == 4)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bFlowInOut.Text = "R-in-R-out（2）";
                }
                else
                {
                    bFlowInOut.Text = "右进右出（两段式）";
                }

            }
            if (VariableSys.dFlowIN_OUT == 5)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bFlowInOut.Text = "L-in-R-out（3）";
                }
                else
                {
                    bFlowInOut.Text = "左进右出（三段式）";
                }

            }
            if (VariableSys.dFlowIN_OUT == 6)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bFlowInOut.Text = "R-in-L-out（3）";
                }
                else
                {
                    bFlowInOut.Text = "右进左出（三段式）";
                }

            }
        }

        private void bBadMark_Click(object sender, EventArgs e)
        {
            VariableSys.iOutSideBadMark += 1;//读BadMark 0-SFCS 1-自动扫描 2-SFCS失败自动切换到自动扫描 3-屏蔽
            if (VariableSys.iOutSideBadMark > 3)
            {
                VariableSys.iOutSideBadMark = 0;
            }
            if (VariableSys.iOutSideBadMark == 0)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bBadMark.Text = "BadMark:Out";
                }
                else
                {
                    bBadMark.Text = "BadMark:外部";
                }

                bBadMark.BackColor = Color.LightGreen;
            }
            if (VariableSys.iOutSideBadMark == 1)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bBadMark.Text = "BadMark:Scan";
                }
                else
                {
                    bBadMark.Text = "BadMark:扫描";
                }

                bBadMark.BackColor = Color.LightGreen;
            }
            if (VariableSys.iOutSideBadMark == 2)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bBadMark.Text = "BadMark:Out Fail2Scan";
                }
                else
                {
                    bBadMark.Text = "BadMark:外部失败自动切换到扫描";
                }
                bBadMark.BackColor = Color.LightGreen;
            }
            if (VariableSys.iOutSideBadMark == 3)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bBadMark.Text = "BadMark:None";
                }
                else
                {
                    bBadMark.Text = "BadMark:屏蔽";
                }

                bBadMark.BackColor = Color.Transparent;
            }
        }

        private void bLineStyle_Click(object sender, EventArgs e)
        {
            VariableSys.bSystemIsOnLine = !VariableSys.bSystemIsOnLine;
            if (VariableSys.bSystemIsOnLine)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bLineStyle.Text = "InLine";
                }
                else
                {
                    bLineStyle.Text = "在线式";
                }

                bLineStyle.BackColor = Color.LightGreen;
            }
            else
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bLineStyle.Text = "OffLine";
                }
                else
                {
                    bLineStyle.Text = "离线式";
                }

                bLineStyle.BackColor = Color.Transparent;
            }
        }

        private void bAfterRequest_Click(object sender, EventArgs e)
        {
            VariableSys.bAfterBreakEN = !VariableSys.bAfterBreakEN;
            if (VariableSys.bAfterBreakEN)
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bAfterRequest.Text = "AfterRequest:EN";
                }
                else
                {
                    bAfterRequest.Text = "后要板:侦测";
                }

                bAfterRequest.BackColor = Color.LightGreen;
            }
            else
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    bAfterRequest.Text = "AfterRequest:Dis";
                }
                else
                {
                    bAfterRequest.Text = "后要板:屏蔽";
                }

                bAfterRequest.BackColor = Color.Transparent;
            }
        }

        private void bCoordSorce_Click(object sender, EventArgs e)
        {
            VariableSys.iAxisSource += 1;
            if (VariableSys.iAxisSource > 1)
            {
                VariableSys.iAxisSource = 0;
            }
            Z1.iAxisSource = 0;
            Z2.iAxisSource = 0;
            Z3.iAxisSource = 0;
            Z4.iAxisSource = 0;

            if (VariableSys.iAxisSource == 0)
            {
                Turn.iAxisSource = 0;
                X.iAxisSource = 0;
                Y.iAxisSource = 0;
                if (VariableSys.LanguageFlag == 1)
                {
                    bCoordSorce.Text = "Coord:Ecoder";
                }
                else
                {
                    bCoordSorce.Text = "系统坐标:编码器";
                }

            }
            if (VariableSys.iAxisSource == 1)
            {
                Turn.iAxisSource = 1;
                X.iAxisSource = 1;
                Y.iAxisSource = 1;
                if (VariableSys.LanguageFlag == 1)
                {
                    bCoordSorce.Text = "Coord:Planner";
                }
                else
                {
                    bCoordSorce.Text = "系统坐标:规划器";
                }
            }
        }

        private void bVM_OK_Wide_Click(object sender, EventArgs e)
        {
            double temp_lowvel, temp_highvel, temp_acc, temp_dec;
            string str1, str2, str3, str4;
            str1 = tVM_Vel_Low_Wide.Text;
            str2 = tVM_Vel_High_Wide.Text;
            str3 = tVM_Acc_Wide.Text;
            str4 = tVM_Dec_Wide.Text;
            try
            {
                temp_lowvel = Convert.ToDouble(str1);
                temp_highvel = Convert.ToDouble(str2);
                temp_acc = Convert.ToDouble(str3);
                temp_dec = Convert.ToDouble(str4);
            }
            catch
            {
                if (VariableSys.LanguageFlag == 1)
                {
                    MessageBox.Show("Input the wrong number!", "Info");
                }
                else
                {
                    MessageBox.Show("输入数值有误！");
                }
                return;
            }
            VariableSys.VelMode_Wide.LowVel = temp_lowvel;
            VariableSys.VelMode_Wide.HighVel = temp_highvel;
            VariableSys.VelMode_Wide.Acc = temp_acc;
            VariableSys.VelMode_Wide.Dec = temp_dec;
            Ini_Sys.IniWriteNumber("VelMode", "Wide_LowVel", VariableSys.VelMode_Wide.LowVel);
            Ini_Sys.IniWriteNumber("VelMode", "Wide_HighVel", VariableSys.VelMode_Wide.HighVel);
            Ini_Sys.IniWriteNumber("VelMode", "Wide_Acc", VariableSys.VelMode_Wide.Acc);
            Ini_Sys.IniWriteNumber("VelMode", "Wide_Dec", VariableSys.VelMode_Wide.Dec);
            bVM_OK_Wide.BackColor = Color.GreenYellow;
        }

        private void bVM_OK_Con_MouseDown(object sender, MouseEventArgs e)
        {
            bVM_OK_Con.BackColor = Color.Transparent;
        }

        private void bVM_OK_Wide_MouseDown(object sender, MouseEventArgs e)
        {
            bVM_OK_Wide.BackColor = Color.Transparent;
        }

        private void bStopConveyor_Click(object sender, EventArgs e)
        {
            ConveyorStop();
        }

        private void bDetectLabel1_Click(object sender, EventArgs e)
        {
            PointF curPos = this.XYPos;
            var camera = Nozzle2Cam(ZAxisIndex - 1);
            CameraDefine.Instance[camera.Item1]._Session.Snap(imageSet.Image);

            Variable.CamReturn cam = Auto_Detect1(ref Feeder[this.cbSelectFeeder.SelectedIndex].Label, imageSet.Image, camera.Item1, ZAxisIndex - 1);

            if (cam.IsOK)
            {
                PointContour result = new PointContour();
                result = this.PtRotateDown(new PointContour(cam.X, cam.Y), VariableSys.pDownRotateCenter[ZAxisIndex - 1], cam.Angle);
                PointF temp = Point2CCDCenter(curPos, result, camera.Item1, camera.Item2);
                XYGoPos(temp, VariableSys.VelMode_Current_Manual);
                this.R_RunParamMap[(uint)ZAxisIndex - 1].GoPos(this.R_RunParamMap[(uint)ZAxisIndex - 1].Pos + cam.Angle, VariableSys.VelMode_Current_Manual);
            }
        }

        private void bDetectUpMark_Click(object sender, EventArgs e)
        {
            PointF curPos = this.XYPos;
            if (dGV_JOB_U.SelectedRows.Count > 0)
            {
                CameraDefine.Instance[CAM.Top]._Session.Snap(imageSet.Image);
                string name = dGV_JOB_U.Rows[dGV_JOB_U.SelectedRows[0].Index].Cells[0].Value.ToString();
                int i = 0;
                for (; i < RUN_PASTEInfo.Length; ++i)
                {
                    if (name == RUN_PASTEInfo[i].PasteName)
                        break;
                }

                var cam = Auto_Detect1(ref RUN_PASTEInfo[i], imageSet.Image, 0);
                if (cam.IsOK)
                {
                    if (MessageBox.Show("是否移动到mark 点", "Tips", MessageBoxButtons.YesNo) == DialogResult.Yes)
                    {
                        PointF temp = Point2CCDCenter(curPos, new PointContour(cam.X, cam.Y), 0, 0);
                        XYGoPos(temp, VariableSys.VelMode_Debug);
                        if (MessageBox.Show("是否移动到 贴附位 点", "Tips", MessageBoxButtons.YesNo) == DialogResult.Yes)
                        {
                            double angle = 0;
                            PointF[] trans = TransformPointsFormMarkAndAngle_IsPaste(RUN_PASTEInfo[i].PastePoints, RUN_PASTEInfo[i].Mark1, temp, cam.Angle, ref angle, RUN_PASTEInfo[i].IsPastePointsAbs);
                            XYGoPos(trans[0], VariableSys.VelMode_Debug);
                            this.R_RunParamMap[0].GoPos(90 + cam.Angle, VariableSys.VelMode_Debug);
                        }
                    }
                }
            }
        }

        private void bcampoint1_Click(object sender, EventArgs e)
        {
            tCampoint1X.Text = this.XYPos.X.ToString("F3");
            tCampoint1Y.Text = this.XYPos.Y.ToString("F3");
        }

        private void bcampoint2_Click(object sender, EventArgs e)
        {
            tCampoint2X.Text = this.XYPos.X.ToString("F3");
            tCampoint2Y.Text = this.XYPos.Y.ToString("F3");
        }

        private bool AxisReach(PointF pos)
        {
            return X.AxisReach(pos.X) && Y.AxisReach(pos.Y);
        }

        private PointF GetPasteOfffset(uint nz, PointF upPt, PointF pastePt)
        {
            PointF realPt = pastePt;
            double p1, p2, p3, p4, os, os2;
            if (HardwareOrgHelper.Instance.HardWare.XPoly != null
                && HardwareOrgHelper.Instance.HardWare.XPoly.Coefficients != null
                && HardwareOrgHelper.Instance.HardWare.XPoly.Coefficients.Length > 0)
            {
                p1 = HardwareOrgHelper.Instance.HardWare.XPoly.Evaluate(upPt.X);
                p2 = HardwareOrgHelper.Instance.HardWare.XPoly.Evaluate(VariableSys.pUpMarkCoord[nz].X);
                os = p2 - p1;

                p3 = HardwareOrgHelper.Instance.HardWare.XPoly.Evaluate(pastePt.X);
                p4 = HardwareOrgHelper.Instance.HardWare.XPoly.Evaluate(VariableSys.pPasteCoord[nz].X);
                os2 = p3 - p4;
                realPt.X += (float)(os + os2);
            }

            if (HardwareOrgHelper.Instance.HardWare.YPoly != null
                && HardwareOrgHelper.Instance.HardWare.YPoly.Coefficients != null
                && HardwareOrgHelper.Instance.HardWare.YPoly.Coefficients.Length > 0)
            {
                p1 = HardwareOrgHelper.Instance.HardWare.YPoly.Evaluate(upPt.Y);
                p2 = HardwareOrgHelper.Instance.HardWare.YPoly.Evaluate(VariableSys.pUpMarkCoord[nz].Y);
                os = p2 - p1;

                p3 = HardwareOrgHelper.Instance.HardWare.YPoly.Evaluate(pastePt.Y);
                p4 = HardwareOrgHelper.Instance.HardWare.YPoly.Evaluate(VariableSys.pPasteCoord[nz].Y);
                os2 = p3 - p4;
                realPt.Y += (float)(os + os2);
            }

            return realPt;
        }
    }
}
